import util from '../../../../../js/util'

let isMobile = util.isMobile()

export default {
    data (){
        return {
            mobileCheck : false,
            menus: ['어드벤트캘린더', '경품이벤트', '신규회원혜택', '쇼핑기획전'],
            menusmo: ['어드벤트<br />캘린더', '경품<br />이벤트', '신규 회원<br />혜택', '쇼핑<br />기획전'],
            menuclassList : ['prom01_tab','prom02_tab','prom03_tab','prom04_tab'],
            stampitem: [
                {
                    id: 1,
                    activeimg: require('@/assets/common/img/promotion/holiyday/01.png'),
                    disableimg: require('@/assets/common/img/promotion/holiyday/dim_01.png'),
                    status: false
                },{
                    id: 2,
                    activeimg: require('@/assets/common/img/promotion/holiyday/02.png'),
                    disableimg: require('@/assets/common/img/promotion/holiyday/dim_02.png'),
                    status: false
                },{
                    id: 3,
                    activeimg: require('@/assets/common/img/promotion/holiyday/03.png'),
                    disableimg: require('@/assets/common/img/promotion/holiyday/dim_03.png'),
                    status: false
                },{
                    id: 4,
                    activeimg: require('@/assets/common/img/promotion/holiyday/04.png'),
                    disableimg: require('@/assets/common/img/promotion/holiyday/dim_04.png'),
                    status: false
                },{
                    id: 5,
                    activeimg: require('@/assets/common/img/promotion/holiyday/05.png'),
                    disableimg: require('@/assets/common/img/promotion/holiyday/dim_05.png'),
                    status: false
                },{
                    id: 6,
                    activeimg: require('@/assets/common/img/promotion/holiyday/06.png'),
                    disableimg: require('@/assets/common/img/promotion/holiyday/dim_06.png'),
                    status: false
                },{
                    id: 7,
                    activeimg: require('@/assets/common/img/promotion/holiyday/07.png'),
                    disableimg: require('@/assets/common/img/promotion/holiyday/dim_07.png'),
                    status: false
                }
            ],
            stampitemmo: [
                {
                    id: 1,
                    activeimg: require('@/assets/common/img/promotion/holiyday/01_mo.png'),
                    disableimg: require('@/assets/common/img/promotion/holiyday/dim_01_mo.png'),
                    status: false
                },{
                    id: 2,
                    activeimg: require('@/assets/common/img/promotion/holiyday/02_mo.png'),
                    disableimg: require('@/assets/common/img/promotion/holiyday/dim_02_mo.png'),
                    status: false
                },{
                    id: 3,
                    activeimg: require('@/assets/common/img/promotion/holiyday/03_mo.png'),
                    disableimg: require('@/assets/common/img/promotion/holiyday/dim_03_mo.png'),
                    status: false
                },{
                    id: 4,
                    activeimg: require('@/assets/common/img/promotion/holiyday/04_mo.png'),
                    disableimg: require('@/assets/common/img/promotion/holiyday/dim_04_mo.png'),
                    status: false
                },{
                    id: 5,
                    activeimg: require('@/assets/common/img/promotion/holiyday/05_mo.png'),
                    disableimg: require('@/assets/common/img/promotion/holiyday/dim_05_mo.png'),
                    status: false
                },{
                    id: 6,
                    activeimg: require('@/assets/common/img/promotion/holiyday/06_mo.png'),
                    disableimg: require('@/assets/common/img/promotion/holiyday/dim_06_mo.png'),
                    status: false
                },{
                    id: 7,
                    activeimg: require('@/assets/common/img/promotion/holiyday/07_mo.png'),
                    disableimg: require('@/assets/common/img/promotion/holiyday/dim_07_mo.png'),
                    status: false
                }
            ],
            holidayinfo:{
                eventname1: '12월 홀리데이 이벤트 적립금_3000원_day1',
                eventname2: '12월 홀리데이 이벤트 쿠폰_15%_day2',
                eventname3: '12월 홀리데이 이벤트 적립금_2000원_day3',
                eventname4: '12월 홀리데이 이벤트 적립금_3500원_day4',
                eventname5: '12월 홀리데이 이벤트 쿠폰_10%_day5',
                eventname6: '12월 홀리데이 이벤트 적립금_1500원_day6',
                eventname7: '12월 홀리데이 이벤트_day7',
                maxregdate: '',
            },
            url: document.location.href,
            platform: window.sessionStorage.getItem("platform"),
            serverCallbackArgs:{
                id: '',
                key: '',
            },
            param: {
                kakao: {
                    objectType: "feed",
                    content: {
                        title: "[D.PLOT] 2022년 홀리데이 이벤트",
                        description: '2022년 홀리데이이벤트 공유하기!!',
                        imageUrl: '',
                        link: {
                            mobileWebUrl: window.location.href,
                            webUrl: window.location.href
                        },
                    },
                },
                meta: {
                    title: "D.PLOT",
                    summary: "상세내용",
                    img: ''
                }
            }
            ,
            isFinish: false,            
        }
    },
    mounted (){
        let today = this.$util.getDate();
        if(today>'20221231'){
            this.isFinish = true;
        }
        this.login = this.$store.state.isLogin;
        this.mobileCheck = isMobile;
        setTimeout(()=>{
            this.getPromHeight()
        },1000)
        setInterval(()=>{
            this.getPromHeight()
        },5000)
        this.onSearch();       
    },
    methods: {
        /***************************
         * 로그인사용자 초기 데이터
         ***************************/
        async onSearch(){
            let params = this.holidayinfo;
            await this.$http.post('/event/selectHoliday', params)
            .then(result => {
                let data = result.data;
                // 프로모션 상세 정보
                for(let i=0;i<7;i++){
                    this.stampitem[i].status = false;
                    this.maxregdate ='';
                }
                for(let i=0;i<data.holidaylist.length;i++){
                    if(data.holidaylist[i].status=='T'){
                        this.stampitem[i].status = true;
                        this.holidayinfo.maxregdate = data.holidaylist[i].regdate;
                    }
                    else{
                        break;
                    }
                }
            })
            .catch(error => {
                this.$util.debug(error);
            });
        },
        async onUpdate(id){
            let valName= "param.eventname"+id;
            let optionNm = (new Function('param','return '+valName)(this.holidayinfo));
            
            let params = {idx: Number(id),
                eventname : optionNm};
            await this.$http.post('/event/updateHolidayStamp', params)
            .then(async result => {
                let data = result.data;
                // 프로모션 상세 정보
 
            })
            .catch(error => {
                this.$util.debug(error);
            });
        },        
        /***************************
         * 스탬프 선택 이벤트 
         ***************************/
        stampAction(id){
            let today = this.$util.getDate();

            this.stampitem.forEach(async (item, idx) => {
                if(item.id === id){
                    if(!item.status){
                        if (!this.$store.state.isLogin) {
                            this.$eventBus.$emit('confirm', '로그인', '로그인이 필요합니다. 로그인 하시겠습니까?',()=>{
                                this.$storage.setSessionStorage('redirectPath', {name : this.$route.name, query : this.$route.query});
                                this.$router.push({name : 'member-login'});
                            });
                            return;
                        } else if (today > '20221231'){
                            alert("이벤트가 종료되었습니다.!");
                            return;
                            
                        } else if (id > 1 && !this.stampitem[(id-2)].status){
                            alert("순서대로 응모가 가능합니다.!");
                            return;
                            
                        } else if(!util.isEmpty(this.holidayinfo.maxregdate) && this.holidayinfo.maxregdate >= today ){
                            alert("하루에 한번만 응모 가능합니다.!");
                            return;
                        }

                        await this.onUpdate(id);
                        await this.onSearch();
                        if(id=='1'){
                         alert("적립금 3000원 당첨!");
                        }
                        else if(id=='2'){
                            alert("15% 할인쿠폰 당첨!");
                        }                        
                        else if(id=='3'){
                            alert("적립금 2000원 당첨!");
                        }
                        else if(id=='4'){
                            alert("적립금 3500원 당첨!");
                        }
                        else if(id=='5'){
                            alert("10% 할인쿠폰 당첨!");
                        }
                        else if(id=='6'){
                            alert("적립금 1500원 당첨!");
                        }
                        else if(id=='7'){
                            alert("경품이벤트에 응모되었습니다.");
                        }
                        /***************************
                         * [D] 해당 id 스탬프 이벤트 코드 삽입
                         ***************************/
                        //alert(`${id}번 스탬프를 찍었습니다. \n'xx'가 당첨되었습니다.`)
                        //this.stampitem[idx].status = true
                    }
                }
            })

        },
        /***************************
         * 카카오 공유하기
         * [D] /src/views/front/common/components/ui/modal/SnsContentsModal.vue
         * 파일 참고하여 붙여넣기 해두었습니다. 후속 개발 부탁드립니다.
         ***************************/
        shareKakao() {
            //alert(`카카오톡 공유하기`)
            this.param.kakao.serverCallbackArgs = this.serverCallbackArgs;
            Kakao.Link.sendDefault(this.param.kakao);
            //console.log('kakao share')

            Kakao.Link.sendDefault(this.param.kakao);
        },
        /***************************
         * URL 공유하기
         * [D] /src/views/front/common/components/ui/modal/SnsContentsModal.vue
         * 파일 참고하여 붙여넣기 해두었습니다. 후속 개발 부탁드립니다.
         ***************************/
        getUrlBtn() {
            //alert(`URL 공유하기`)
            this.$refs.urlinput.select();
            let isCopy = document.execCommand("copy");
            this.$refs.urlinput.blur();
            if (isCopy) {
                this.$toast.clear();
                this.$toast.open(
                "주소가 복사되었습니다. </br> 입력하실 곳에 붙여넣기 해주세요."
                );
            }
        },
        scrollToTargetAdjusted(element){
            element = document.querySelector(`${element}`)
            let headerOffset = 0;
            let elementPosition = element.getBoundingClientRect().top;
            let offsetPosition = elementPosition + window.pageYOffset - headerOffset - (isMobile ? 93 : 164);
        
            window.scrollTo({
                top: offsetPosition,
                behavior: "smooth"
            });
        },
        getAbsoluteTop(element) {
            return element.getBoundingClientRect().top;
        },
        getPromHeight() {
            const promTab = this.$scrollmagic.scene({
                triggerElement: '#prom01',
                duration: $('#prom01').outerHeight(true)+$('#prom02').outerHeight(true)+$('#prom03').outerHeight(true)+$('#prom04').outerHeight(true),
                triggerHook: 0,
                offset: isMobile ? -94 : -165,
            })
            .setClassToggle('#prom_tab_menu','active')
    
            const prom01 = this.$scrollmagic.scene({
                triggerElement: '#prom01',
                duration:$('#prom01').outerHeight(true),
                triggerHook: 0,
                offset: isMobile ? -94 : -165,
            })
            // .addIndicators()
            .setClassToggle('.prom01_tab','active')
    
            const prom02 = this.$scrollmagic.scene({
                triggerElement: '#prom02',
                duration:$('#prom02').outerHeight(true),
                triggerHook: 0,
                offset: isMobile ? -94 : -165,
            })
            // .addIndicators()
            .setClassToggle('.prom02_tab','active')
            const prom03 = this.$scrollmagic.scene({
                triggerElement: '#prom03',
                duration:$('#prom03').outerHeight(true),
                triggerHook: 0,
                offset: isMobile ? -94 : -165,
            })
            // .addIndicators()
            .setClassToggle('.prom03_tab','active')
            const prom04 = this.$scrollmagic.scene({
                triggerElement: '#prom04',
                duration:$('#prom04').outerHeight(true),
                triggerHook: 0,
                offset: isMobile ? -94 : -165,
            })
            // .addIndicators()
            .setClassToggle('.prom04_tab','active')
    
            this.$scrollmagic.addScene(promTab)
            this.$scrollmagic.addScene(prom01)
            this.$scrollmagic.addScene(prom02)
            this.$scrollmagic.addScene(prom03)
            this.$scrollmagic.addScene(prom04)
        },
    },
}