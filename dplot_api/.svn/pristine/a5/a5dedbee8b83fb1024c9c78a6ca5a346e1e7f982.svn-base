package com.dplot.partners.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.dplot.common.CMConst;
import com.dplot.common.Response;
import com.dplot.common.SOMap;
import com.dplot.common.service.CJMessageService;
import com.dplot.common.service.util.MallBaseService;
import com.dplot.exception.BizException;
import com.dplot.mapper.AdminMenuMapper;
import com.dplot.mapper.ComOrderMapper;
import com.dplot.mapper.DealerChargeMapper;
import com.dplot.mapper.DealerMapper;
import com.dplot.util.Util;

@Service
public class PartnersCommonServiceImpl extends MallBaseService implements PartnersCommonService{

    @Autowired
    private AdminMenuMapper adminMenuMapper;

    @Autowired
    private DealerChargeMapper dealerChargeMapper;

    @Autowired
    private CJMessageService cjMessageService;

    @Autowired
    private ComOrderMapper comOrderMapper;

	@Autowired
	DealerMapper dealerMapper;

    @Override
    public List<SOMap> selectPartnersSubMenu(SOMap params) throws Exception {
        List<SOMap> sideMenuList = adminMenuMapper.selectPartnersSubMenu(params);
        List<SOMap> resultList = new ArrayList<>();

        if(sideMenuList.size() > 0){
            for(SOMap row : sideMenuList){
                if("1".equals(row.get("depth").toString())){
                    String code = row.get("code").toString();
                    List<SOMap> child = sideMenuList.stream().peek(obj-> {
                        obj.put("isactive", obj.containsKey("url") && obj.getStr("url").equals(params.get("path")));
                    }).filter(map -> code.equals(map.get("uppercode"))).collect(Collectors.toList());
                    row.put("childmenulist", child);
                    resultList.add(row);
                }
            }
        }


     	// 하위메뉴 isActive일때 상위메뉴 isActive 적용
		for (SOMap parentMenu : resultList) {
			parentMenu.put("isactive", parentMenu.containsKey("url") && parentMenu.get("url").equals(params.get("path")));
			List<SOMap> childMenuList = (List<SOMap>) parentMenu.get("childmenulist");
			for (SOMap childMenu : childMenuList) {
				if ((boolean) childMenu.get("isactive")) {
					parentMenu.put("isactive", true);
					break;
				}
			}
		}
//        resultList = resultList.stream().peek(row -> {
//            row.put("isactive", row.containsKey("url") && row.get("url").equals(params.get("path")));
//        }).collect(Collectors.toList());

        return resultList;
    }

    @Override
    public SOMap getChargerInfoByType(SOMap params) throws Exception {
        return dealerChargeMapper.getChargerInfo(params);
    }

    @Override
    public SOMap sendAuthMessage(SOMap params) throws Exception {
        SOMap result = new SOMap();

        SOMap messageParam = new SOMap();
        messageParam.put("msg_type", "SMS");
        messageParam.put("receiver_number", params.get("chargemobile"));

        int authNo = (int)(Math.random() * (999999 - 100000 + 1)) + 100000;
        messageParam.put("msg", String.format("[D.PLOT] 제휴담당자 인증번호\n[%d]를 입력해 주세요.", authNo));

        SOMap sendResult = cjMessageService.sendMessage(messageParam);
        if("200".equals(sendResult.get("httpcode").toString())){
            result.put("number", authNo);
        }
        return result;
    }

    @Override
    public SOMap selectPartnersSaleList(SOMap params) throws Exception {
        SOMap result = new SOMap();

        //페이징 데이터
        int page = Integer.parseInt(params.get("page").toString());
        int pageCount = Integer.parseInt(params.get("pagecount").toString());
        int startPage = (page > 1) ? ((page-1) * pageCount) : 0;

        //기본 사항 SITE ID
        params.put("siteid", cs.getStr("siteid"));
        params.put("startpage", startPage);
        params.put("endpage", pageCount);

        List<SOMap> list = comOrderMapper.selectPartnersSaleList(params);
        SOMap countInfo = comOrderMapper.selectPartnersSaleListCountInfo(params);

        result.put("total", (countInfo != null) ? countInfo.getInt("total") : 0);
        result.put("ordercnt", (countInfo != null) ? countInfo.getStr("ordercnt") : "0");
        result.put("frstordcnt", (countInfo != null) ? countInfo.getStr("frstordcnt") : "0");
        result.put("ordamt", (countInfo != null) ? countInfo.getStr("ordamt") : "0");
        result.put("delivamt", (countInfo != null) ? countInfo.getStr("delivamt") : "0");
        result.put("promoshareamt", (countInfo != null) ? countInfo.getStr("promoshareamt") : "0");
        result.put("cpnshareamt", (countInfo != null) ? countInfo.getStr("cpnshareamt") : "0");
        result.put("realamt", (countInfo != null) ? countInfo.getStr("realamt") : "0");
        result.put("price", (countInfo != null) ? countInfo.getStr("price") : "0");
        result.put("rtnamt", (countInfo != null) ? countInfo.getStr("rtnamt") : "0");
        result.put("list", list);

        return result;
    }

    @Override
    public List<Map<String, Object>> selectPartnersSaleListExcel(SOMap params) throws Exception {
        List<Map<String, Object>> result = new ArrayList<>();
        Map<String, Object> map = new HashMap<>();

        //기본 사항 SITE ID
        params.put("siteid", cs.getStr("siteid"));

        List<SOMap> list = comOrderMapper.selectPartnersSaleList(params);
        SOMap countInfo = comOrderMapper.selectPartnersSaleListCountInfo(params);

        map.put("target", "합계");
        map.put("total", countInfo.getOrDefault("total", 0));
        map.put("ordercnt", countInfo.getOrDefault("ordercnt", "0"));
        map.put("frstordcnt", countInfo.getOrDefault("frstordcnt", "0"));
        map.put("ordamt", countInfo.getOrDefault("ordamt", "0"));
        map.put("delivamt", countInfo.getOrDefault("delivamt", "0"));
        map.put("promoshareamt", countInfo.getOrDefault("promoshareamt", "0"));
        map.put("cpnshareamt", countInfo.getOrDefault("cpnshareamt", "0"));
        map.put("realamt", countInfo.getOrDefault("realamt", "0"));
        map.put("price", countInfo.getOrDefault("price", "0"));
        map.put("rtnamt", countInfo.getOrDefault("rtnamt", "0"));
        map.put("orgamt", countInfo.getOrDefault("orgamt", "0"));

        result.add(map);
        result.addAll(list);

        return result;
    }

	/**
	 * KMC 본인인증 복호화 처리
	 */
	@Override
	public Response partnersKmcCertDecry(SOMap param, HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		Response results = new Response();
		results.setErrorShow(false);

		/**************************************************
		 * 변수 선언
		 **************************************************/
		String rec_cert = ""; // 결과수신DATA

		String k_certNum = ""; // 파라미터로 수신한 요청번호
		String certNum = ""; // 요청번호
		String date = ""; // 요청일시
		String CI = ""; // 연계정보(CI)
		String enCryCI = ""; // 연계정보암호화(CI)
		String DI = ""; // 중복가입확인정보(DI)
		String phoneNo = ""; // 휴대폰번호
		String phoneCorp = ""; // 이동통신사
		String birthDay = ""; // 생년월일
		String gender = ""; // 성별
		String nation = ""; // 내국인
		String name = ""; // 성명
		String M_name = ""; // 미성년자 성명
		String M_birthDay = ""; // 미성년자 생년월일
		String M_Gender = ""; // 미성년자 성별
		String M_nation = ""; // 미성년자 내외국인
		String result = ""; // 결과값
		String certMet = ""; // 인증방법
		String ip = ""; // ip주소
		String plusInfo = "";
		String encPara = "";
		String encMsg1 = "";
		String encMsg2 = "";
		String msgChk = "";
		/******************************************************
		 * 복호화 처리
		 ******************************************************/
		rec_cert = param.getStr("rec_cert");
		k_certNum = param.getStr("certnum");

		// [01. 암호화 모듈 (jar) Loading]
		com.icert.comm.secu.IcertSecuManager seed = new com.icert.comm.secu.IcertSecuManager();

		// [02. 1차 복호화]
		// 수신된 certNum를 이용하여 복호화
		rec_cert = seed.getDec(rec_cert, k_certNum);

		// [03. 1차 파싱]
		int inf1 = rec_cert.indexOf("/", 0);
		int inf2 = rec_cert.indexOf("/", inf1 + 1);
		encPara = rec_cert.substring(0, inf1); // 암호화된 통합 파라미터
		encMsg1 = rec_cert.substring(inf1 + 1, inf2); // 암호화된 통합 파라미터의 Hash값

		// [04. 위변조 검증]
		encMsg2 = seed.getMsg(encPara);
		if (encMsg2.equals(encMsg1)) {
			msgChk = "Y";
		}
		if (msgChk.equals("N")) {
			throw new BizException("비정상적인 접근입니다.!!(" + msgChk + ")");
		}

		// [05. 2차 복호화]
		rec_cert = seed.getDec(encPara, k_certNum);

		// [06. 2차 파싱]
		int info1 = rec_cert.indexOf("/", 0);
		int info2 = rec_cert.indexOf("/", info1 + 1);
		int info3 = rec_cert.indexOf("/", info2 + 1);
		int info4 = rec_cert.indexOf("/", info3 + 1);
		int info5 = rec_cert.indexOf("/", info4 + 1);
		int info6 = rec_cert.indexOf("/", info5 + 1);
		int info7 = rec_cert.indexOf("/", info6 + 1);
		int info8 = rec_cert.indexOf("/", info7 + 1);
		int info9 = rec_cert.indexOf("/", info8 + 1);
		int info10 = rec_cert.indexOf("/", info9 + 1);
		int info11 = rec_cert.indexOf("/", info10 + 1);
		int info12 = rec_cert.indexOf("/", info11 + 1);
		int info13 = rec_cert.indexOf("/", info12 + 1);
		int info14 = rec_cert.indexOf("/", info13 + 1);
		int info15 = rec_cert.indexOf("/", info14 + 1);
		int info16 = rec_cert.indexOf("/", info15 + 1);
		int info17 = rec_cert.indexOf("/", info16 + 1);
		int info18 = rec_cert.indexOf("/", info17 + 1);

		certNum = rec_cert.substring(0, info1);
		date = rec_cert.substring(info1 + 1, info2);
		enCryCI = rec_cert.substring(info2 + 1, info3);
		phoneNo = rec_cert.substring(info3 + 1, info4);
		phoneCorp = rec_cert.substring(info4 + 1, info5);
		birthDay = rec_cert.substring(info5 + 1, info6);
		gender = rec_cert.substring(info6 + 1, info7);
		nation = rec_cert.substring(info7 + 1, info8);
		name = rec_cert.substring(info8 + 1, info9);
		result = rec_cert.substring(info9 + 1, info10);
		certMet = rec_cert.substring(info10 + 1, info11);
		ip = rec_cert.substring(info11 + 1, info12);
		M_name = rec_cert.substring(info12 + 1, info13);
		M_birthDay = rec_cert.substring(info13 + 1, info14);
		M_Gender = rec_cert.substring(info14 + 1, info15);
		M_nation = rec_cert.substring(info15 + 1, info16);
		plusInfo = rec_cert.substring(info16 + 1, info17);
		DI = rec_cert.substring(info17 + 1, info18);

		// [07. CI, DI 복호화]
		CI = seed.getDec(enCryCI, k_certNum);
		DI = seed.getDec(DI, k_certNum);
		/******************************************************
		 * 파라미터 유효성 검증
		 ******************************************************/

		String regex = "";
		String regex1 = "";

		if (certNum.length() == 0 || certNum.length() > 40) {
			throw new BizException("요청번호 비정상.");
		}

		regex = "[0-9]*";
		if (date.length() != 14 || !Util.paramChk(regex, date)) {
			throw new BizException("요청일시 비정상.");
		}

		regex = "[A-Z]*";
		if (certMet.length() != 1 || !Util.paramChk(regex, certMet)) {
			throw new BizException("본인인증방법 비정상" + certMet);
		}

		regex = "[0-9]*";
		if ((phoneNo.length() != 10 && phoneNo.length() != 11) || !Util.paramChk(regex, phoneNo)) {
			throw new BizException("휴대폰번호 비정상");
		}

		regex = "[A-Z]*";
		if (phoneCorp.length() != 3 || !Util.paramChk(regex, phoneCorp)) {
			throw new BizException("이동통신사 비정상");
		}

		regex = "[0-9]*";
		if (birthDay.length() != 8 || !Util.paramChk(regex, birthDay)) {
			throw new BizException("생년월일 비정상");
		}

		regex = "[0-9]*";
		if (gender.length() != 1 || !Util.paramChk(regex, gender)) {
			throw new BizException("성별 비정상");
		}

		regex = "[0-9]*";
		if (nation.length() != 1 || !Util.paramChk(regex, nation)) {
			throw new BizException("내/외국인 비정상");
		}

		regex = "[A-Z]*";
		if (result.length() != 1 || !Util.paramChk(regex, result)) {
			throw new BizException("결과값 비정상");
		}

		regex = "[\\sA-Za-z가-?.,-]*";
		if (M_name.length() != 0) {
			if (M_name.length() > 60 || !Util.paramChk(regex, M_name)) {
				throw new BizException("미성년자 성명 비정상");
			}
		}

		regex = "[0-9]*";
		if (M_birthDay.length() != 0) {
			if (M_birthDay.length() != 8 || !Util.paramChk(regex, M_birthDay)) {
				throw new BizException("미성년자 생년월일 비정상");
			}
		}

		regex = "[0-9]*";
		if (M_Gender.length() != 0) {
			if (M_Gender.length() != 1 || !Util.paramChk(regex, M_Gender)) {
				throw new BizException("미성년자 성별 비정상");
			}
		}

		regex = "[0-9]*";
		if (M_nation.length() != 0) {
			if (M_nation.length() != 1 || !Util.paramChk(regex, M_nation)) {
				throw new BizException("미성년자 내/외국인 비정상");
			}
		}
		/**********************************
		 * 복호화된 데이터
		 **********************************/
		// kmc 결과 정보
		SOMap kmcinfo = new SOMap();
		kmcinfo.put("certnum", certNum);
		kmcinfo.put("date", date);
		kmcinfo.put("ci", CI);
		kmcinfo.put("phoneno", phoneNo);
		kmcinfo.put("phonecorp", phoneCorp);
		kmcinfo.put("birthday", birthDay);
		kmcinfo.put("gender", gender);
		kmcinfo.put("nation", nation);
		kmcinfo.put("name", name);
		kmcinfo.put("result", result);
		kmcinfo.put("certmet", certMet);
		kmcinfo.put("ip", ip);
		kmcinfo.put("m_name", M_name);
		kmcinfo.put("m_birthday", M_birthDay);
		kmcinfo.put("m_gender", M_Gender);
		kmcinfo.put("m_nation", M_nation);
		kmcinfo.put("plusinfo", plusInfo);
		kmcinfo.put("di", DI);

		// 회원정보
		SOMap dbparam = new SOMap();
		dbparam.put("ci", CI);
		dbparam.put("di", DI);
		dbparam.put("mobile", phoneNo);
		dbparam.put("name", name);
		dbparam.put("siteid", cs.getStr("siteid"));
		dbparam.put("state", CMConst.CM_STATE_REAL);

		// 사용자 정보 조회
		// CI값비교
		SOMap memberInfo = dealerMapper.selectDealerMemberInfo(dbparam);

		// 기가입 있을경우
		if (memberInfo != null) {
			if (Util.isEmpty(memberInfo.get("ci")) && Util.isEmpty(memberInfo.get("di"))) {
				memberInfo.put("ci", CI);
				memberInfo.put("di", DI);
				dealerMapper.updateDealerMemberCiDiInfo(memberInfo);
			}
			memberInfo.remove("ci");
			memberInfo.remove("di");

			if (Util.isNotEmpty(memberInfo.get("userid"))) {
				String tempMemberId = memberInfo.get("userid").toString();
				tempMemberId = Util.asterisk(tempMemberId, 2, 0);
				memberInfo.put("useridaster", tempMemberId);
			}
			if (Util.isNotEmpty(memberInfo.get("email"))) {
				String emailAster = memberInfo.get("email").toString().trim();
				String[] emailArr = emailAster.split("@");
				if (emailArr.length > 1) {
					emailAster = emailArr[0].substring(0, 2) + "****@" + emailArr[1];
					memberInfo.put("emailaster", emailAster);
				}
			}
			if (Util.isNotEmpty(memberInfo.get("mobile"))) {
				String mobile = memberInfo.get("mobile").toString().trim();
				mobile = Util.phoneFormat(mobile);
				String[] mobileArr = Util.getTelPhoneSpliter(mobile);
				if (mobileArr.length > 2) {
					mobileArr[1] = Util.asterisk(mobileArr[1], 0, 0);
					memberInfo.put("mobileaster", mobileArr[0] + "-" + mobileArr[1] + "-" + mobileArr[2]);
				}
			}
		}

		SOMap resultMap = new SOMap();
		resultMap.put("kmcinfo", kmcinfo);
		resultMap.put("memberinfo", memberInfo);
		results.setData(resultMap);

		return results;
	}
}
