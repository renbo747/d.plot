/**
 *
 */
package com.dplot.front.service;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import javax.annotation.Resource;

import org.apache.commons.lang.RandomStringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.dplot.common.CMConst;
import com.dplot.common.SOMap;
import com.dplot.common.service.CJMessageService;
import com.dplot.common.service.CommonOrderService;
import com.dplot.common.service.CommonService;
import com.dplot.common.service.ERPService;
import com.dplot.common.service.NaverService;
import com.dplot.common.service.TossService;
import com.dplot.common.service.util.MallBaseService;
import com.dplot.exception.BizException;
import com.dplot.mapper.CardBenefitMapper;
import com.dplot.mapper.CertMapper;
import com.dplot.mapper.ComCartMapper;
import com.dplot.mapper.ComOrderCouponMapper;
import com.dplot.mapper.ComOrderGoodsDelivMapper;
import com.dplot.mapper.ComOrderGoodsGiftMapper;
import com.dplot.mapper.ComOrderGoodsHisMapper;
import com.dplot.mapper.ComOrderGoodsMapper;
import com.dplot.mapper.ComOrderMapper;
import com.dplot.mapper.CommonCodeMapper;
import com.dplot.mapper.CouponMemissueMapper;
import com.dplot.mapper.EpointPayMapper;
import com.dplot.mapper.GiftMapper;
import com.dplot.mapper.GoodsOptionDetailMapper;
import com.dplot.mapper.MemberAddressMapper;
import com.dplot.mapper.MemberMapper;
import com.dplot.mapper.OrderMapper;
import com.dplot.mapper.ReserveConfigMapper;
import com.dplot.mapper.TossreceiptMapper;
import com.dplot.util.DateTimeUtil;
import com.dplot.util.Util;

/**
 * @FileName : OrderServiceImpl.java
 * @Project : datapick_api
 * @Date : 2022. 01. 17. 
 * @Author : LJS
 * ============================================================
 *  DATE               AUTHOR         NOTE
 * ============================================================
 *  2021. 12. 8.         LJS                 최초작성
 * ------------------------------------------------------------
 **/
@Service
public class OrderServiceImpl extends MallBaseService implements OrderService {

	/** The Constant logger. */
	private static final Logger logger = LoggerFactory.getLogger(OrderServiceImpl.class);
	
	@Autowired
	private OrderMapper orderMapper;
	
	@Autowired
	private MemberMapper memberMapper;
	
	@Autowired
	private MemberAddressMapper memberAddressMapper;
	
	@Autowired
	private ComCartMapper comCartMapper;
	
	@Autowired
	private CommonCodeMapper commonCodeMapper;
	
	@Autowired
	private ComOrderMapper comOrderMapper;
	
	@Autowired
	private ComOrderGoodsMapper comOrderGoodsMapper;
	
	@Autowired
	private ComOrderGoodsDelivMapper comOrderGoodsDelivMapper;
	
	@Autowired
	private ComOrderGoodsHisMapper comOrderGoodsHisMapper;
	
	@Autowired
	private ComOrderGoodsGiftMapper comOrderGoodsGiftMapper;
	
	@Autowired
	private ComOrderCouponMapper comOrderCouponMapper;
	
	@Autowired
	private GiftMapper giftMapper;
	
	@Autowired
	private CouponMemissueMapper couponMemissueMapper;
	
	@Autowired
	private ReserveConfigMapper reserveConfigMapper;
	
	@Autowired
	private TossreceiptMapper tossreceiptMapper;
	
	@Autowired
	private CertMapper certMapper;
	
	@Autowired
	private CardBenefitMapper cardBenefitMapper;
	
	@Autowired
	private EpointPayMapper epointPayMapper;
	
	@Autowired
	private GoodsOptionDetailMapper goodsOptionDetailMapper;
	
	@Autowired
	private CJMessageService cjMessageService;
	
	@Autowired
	private CommonService commonService;
	
	@Autowired
	private CommonOrderService commonOrderService;
	
	@Autowired
	private TossService tossService;

	@Autowired
	private NaverService naverService;
	
	@Autowired
	private ERPService erpService;
	
	@Resource(name="propertiesFactory")
    private Properties prop;
	
	/**
	 * 주문/결재 목록조회
	 */
	@Override
	public SOMap selectOrderList(SOMap param) throws Exception {
		param.put("siteid", cs.getStr("siteid"));
		param.put("userno", cs.getInt("authmemberno") == 0 ? -1 : cs.getInt("authmemberno"));
		param.put("platform", cs.getStr("platform"));
		
		param.put("imgtype", Util.flag2Bool(cs.getStr("ismobile")) ? CMConst.IMG_TYPE_GOODS_IMG_MO_M : CMConst.IMG_TYPE_GOODS_IMG_PC_S);
		
		//주문/결제 목록조회
		List<SOMap> orderlist = orderMapper.selectOrderList(param);
		
		//기본배송지 조회
		SOMap addr = memberAddressMapper.selectDefaultAddress(param);
		String isolatetype = "N";
		if(addr != null) {
			isolatetype = addr.getDbStr("isolatetype");
		}
		
		SOMap calParam = new SOMap();
		calParam.put("isolatetype", isolatetype);
		calParam.put("items", orderlist);
		
		SOMap calResult = commonOrderService.calOrderAmt(calParam);
		
		//배송요청사항
		param.put("cmclass", "RCVREQTYPE");
		param.put("istrash", "F");
		List<SOMap> reqlist = commonCodeMapper.selectCodeList(param);
		
		//결제수단
		param.put("cmclass", "PAYWAYTYPE");
		List<SOMap> paywaylist = commonCodeMapper.selectCodeList(param);
		
		//카드종류
		param.put("cmclass", "CARDCOMPANY");
		List<SOMap> cardlist = commonCodeMapper.selectCodeList(param);
		
		//첫주문여부
		int orderCnt = orderMapper.selectOrderCnt(param);
		
		//첫주문일경우 첫구매할일적용여부 상품이 있을경우 첫주문처리
		String isFirstOrder = "F";
		if(orderCnt == 0) {
			int cnt = 0 ;
			for (SOMap order : orderlist) {
				cnt += Util.flag2Bool(order.getDbStr("isfrstsale")) ? 1 : 0; 
			}
			if(cnt > 0) {
				isFirstOrder = "T";
			}
		}
		
		//비로그인시=> 일반회원의 브론즈
		if (param.getInt("userno")  == -1) {
			param.put("memlvtype", "NONMEMBER"); //일반회원
			param.put("membertype", "NONMEMBER");  //브론즈
		}else {
			param.put("memlvtype", cs.getStr("authmemlvtype"));
			param.put("membertype", cs.getStr("authmembertype"));
		}
		
		//쿠폰목록 조회
		param.put("isdownload", "T");
		param.put("isoption", "T");
		List<SOMap> couponList = couponMemissueMapper.selectCouponListByGoods(param);
		
		//EPONT 조회
		SOMap epoint = new SOMap();
		param.put("isuse", "T");
		List<SOMap> epointList = epointPayMapper.selectEpointPayListByUser(param);
		if(epointList != null && epointList.size() > 0) {
			epoint = epointList.get(0); 
		}
		
		//구매확정 적립금
		SOMap reserveInfo = reserveConfigMapper.selectReserveConfigInfoByMemberType(param);
		
		SOMap result = new SOMap();
		result.put("orderinfo", calResult);
		result.put("addr", addr);
		result.put("reqlist", reqlist);
		result.put("paywaylist", paywaylist);
		result.put("cardlist", cardlist);
		result.put("couponlist", couponList);
		result.put("downcouponlist", couponList);
		result.put("isfrstorder", isFirstOrder);
		result.put("epoint", epoint);
		result.put("reserve", reserveInfo);
		
		return result;
	}
	
	/**
	 * 주문결제 계산처리
	 * @param param
	 * @param doCalDelivAmt
	 * @return
	 * @throws Exception
	 */
	public SOMap calOrderAmt(SOMap param) throws Exception {
		//주문/결제 목록조회
		//List<SOMap> orderlist = orderMapper.selectOrderList(param);
		//param.put("items", orderlist);
		param.put("memlvtype", cs.getStr("authmemlvtype"));
		param.put("membertype", cs.getStr("authmembertype"));
		param.put("platform", cs.getStr("platform"));
		
		SOMap result = commonOrderService.calOrderAmt(param);
		
        SOMap totAmt = result.getSOMap("totamt");
        SOMap usePoint = result.getSOMap("usepoint");
        
        int reservetotamt = usePoint.getDbInt("reservetotamt");
        int epointtotamt = usePoint.getDbInt("epointtotamt");
        int empreservetotamt = usePoint.getDbInt("empreservetotamt");
        int totreserve = reservetotamt + epointtotamt + empreservetotamt;
        
        if(totreserve > totAmt.getDbInt("paytotprice")) {
        	int overpoint = totreserve - totAmt.getDbInt("paytotprice");
        	if(empreservetotamt - overpoint >= 0) {
        		empreservetotamt = empreservetotamt - overpoint;
        		overpoint = 0;
        	} else {
        		overpoint = overpoint - empreservetotamt;
        		empreservetotamt = 0;
        	}
        	if(reservetotamt - overpoint >= 0) {
        		reservetotamt = reservetotamt - overpoint;
        		overpoint = 0;
        	} else {
        		overpoint = overpoint - reservetotamt;
        		reservetotamt = 0;
        	}
        	if(epointtotamt - overpoint >= 0) {
        		epointtotamt = epointtotamt - overpoint;
        		overpoint = 0;
        	} else {
        		overpoint = overpoint - epointtotamt;
        		epointtotamt = 0;
        	}
        	
        	totAmt.put("rpaytotprice", totAmt.getDbInt("paytotprice") - reservetotamt - epointtotamt - empreservetotamt);
        }
        usePoint.put("reservetotamt", reservetotamt);
        usePoint.put("epointtotamt", epointtotamt);
        usePoint.put("empreservetotamt", empreservetotamt);
        
        int basketcpnamt = totAmt.getDbInt("basketcpnamt");
        
        int idx = 1;
        BigDecimal bTotPrcie = new BigDecimal(totAmt.getDbInt("reservecalamt"));
        BigDecimal basketTotPrice = new BigDecimal(totAmt.getDbInt("ordtotprice"));
        List<SOMap> items = result.getArrayList("items");
        for (SOMap item : items) {
        	//적립금 배율계산
			int price = item.getDbInt("price") * item.getDbInt("ordcnt");
			int saleAmt = price + item.getDbInt("delivamt") - item.getDbInt("goodscpnamt");
			BigDecimal bPrice = new BigDecimal(saleAmt);
			double rate = bPrice.divide(bTotPrcie, 10, RoundingMode.HALF_UP).doubleValue();
			BigDecimal bskPrice = new BigDecimal(price);
			double basketRate = bskPrice.divide(basketTotPrice, 10, RoundingMode.HALF_UP).doubleValue();
			if(idx == items.size()) {
				item.put("reserveamt", reservetotamt);
				item.put("epointamt", epointtotamt);
				item.put("empreserveamt", empreservetotamt);
				item.put("basketdivamt", basketcpnamt);
			} else {
				item.put("reserveamt", Math.round(usePoint.getDbInt("reservetotamt") * rate));
				item.put("epointamt", Math.round(usePoint.getDbInt("epointtotamt") * rate));
				item.put("empreserveamt", Math.round(usePoint.getDbInt("empreservetotamt") * rate));
				item.put("basketdivamt", Math.round(totAmt.getDbInt("basketcpnamt") * basketRate));
				reservetotamt = reservetotamt - item.getDbInt("reserveamt");
				epointtotamt = epointtotamt - item.getDbInt("epointamt");
				empreservetotamt = empreservetotamt - item.getDbInt("empreserveamt");
				basketcpnamt = basketcpnamt - item.getDbInt("basketdivamt");
			}
			idx++;
		}
        
        //사은품목록 조회
		param.put("ordtotprice", totAmt.getDbInt("ordtotprice"));
		param.put("rpaytotprice", totAmt.getDbInt("rpaytotprice"));
		param.put("imgtype", Util.flag2Bool(cs.getStr("ismobile")) ? CMConst.IMG_TYPE_GIFT_IMG_MO_B : CMConst.IMG_TYPE_GIFT_IMG_PC_B);
		param.put("isoption", "T");
		List<SOMap> giftlist = giftMapper.selectGiftListByGoods(param);
      		
		result.put("giftlist", giftlist);
        result.put("usepoint", usePoint);
        result.put("totAmt", totAmt);
        
		return result;
	}
	
	/**
	 * 주문정보 체크
	 * @param param
	 * @return
	 * @throws Exception
	 */
	private SOMap checkOrderList(SOMap param) throws Exception {
		param.put("siteid", cs.getStr("siteid"));
		param.put("userno", cs.getInt("authmemberno") == 0 ? -1 : cs.getInt("authmemberno"));
		
		
		List<SOMap> items = orderMapper.selectCheckOrderList(param);
		SOMap dbparams = new SOMap();
		dbparams.putAll(param);
		dbparams.put("isfirst", param.getDbDateStr("isfrstorder"));
		dbparams.put("memlvtype", cs.getStr("authmemlvtype"));
		dbparams.put("membertype", cs.getStr("authmembertype"));
		dbparams.put("platform", cs.getStr("platform"));
		
		dbparams.put("items", items);
		
		return commonOrderService.calOrderAmt(dbparams).getSOMap("totamt");
	}
	
	@Transactional(propagation = Propagation.REQUIRED, rollbackFor = {Exception.class})
	@Override
	public SOMap saveOrder(SOMap param) throws Exception {
		SOMap result = new SOMap();
		
		//주문정보 검증
		SOMap checkOrder = this.checkOrderList(param);
		if(checkOrder.getDbInt("rpaytotprice") != param.getDbInt("rpaytotprice")) {
			throw new BizException("결제금액이 일치하지 않습니다. 다시 시도해 주세요.");
		}
		
		//공통파라미터(주문자정보)
		SOMap dbparams = new SOMap();
		dbparams.put("siteid", cs.getStr("siteid"));
		dbparams.put("userno", cs.getInt("authmemberno"));
		dbparams.put("userid", getMemberId());
		dbparams.put("dadamembertype", cs.getStr("authmembertype"));
		dbparams.put("memlvtype", cs.getStr("authmemlvtype"));
		dbparams.put("ordpathtype", cs.getStr("platform"));
		dbparams.put("orderdate", DateTimeUtil.getNowFormatStr(DateTimeUtil.MALL_DATE_FORMAT_VARCHAR14));
		
		//주문정보
		param.putAll(dbparams);
		param.put("isnonmember", "T"); //비회원주문여부
		param.put("isgiftorder", "F"); //선물주문여부
		
		//기본배송지 조회
		if(cs.getInt("authmemberno") > 0){
			SOMap member = memberMapper.selectMember(param);
			param.put("ordname", member.getDbStr("name"));
			param.put("ordtel", member.getDbStr("mobile"));
			param.put("ordemail", member.getDbStr("email"));
			param.put("ordpost",member.getDbStr("post"));
			param.put("ordaddr",member.getDbStr("addr"));
			param.put("ordaddrdetail",member.getDbStr("addrdetail"));
			param.put("ordaddrroad",member.getDbStr("addrroad"));
			param.put("ordaddrdetailroad",member.getDbStr("addrdetailroad"));
			param.put("ordsigungucode",member.getDbStr("sigungucode"));
			param.put("ordbuildingcode",member.getDbStr("buildingcode"));
			param.put("ordroadnamecode",member.getDbStr("roadnamecode"));
			
			param.put("isnonmember", "F"); //비회원주문여부
		}
		

		//주문 저장
		comOrderMapper.insertComOrder(param);
		
		//주문 상품저장
		List<Map<String, Object>> orderList = param.getArrayList("orderlist");
		
		SOMap goodsMap = new SOMap();
		goodsMap.putAll(dbparams);
		goodsMap.put("orderidx", param.get("orderidx"));
		
		//배송비 쿠폰
		SOMap delivCoupon = param.getSOMap("delivcoupon");
		
		int idx = 1;
		String orderName = "";
		for (Map<String, Object> goods : orderList) {
			//주문상품
			goodsMap.putAll(goods);
			goodsMap.put("goodsturn", String.format("%03d", idx));
			
			if(idx == 1) {
				orderName = goodsMap.getDbStr("goodsname");
			}
			
			//자사제품 재고확인
			if(Util.flag2Bool(goodsMap.getDbStr("ispbgoods"))) {
				//TODO.  ERP재고 체크
//				goodsMap.put("isgift", "F");
//				SOMap stockMap = erpService.erpGetGoodsAndGiftStock(dbparams);
//				if(stockMap.getDbInt("avail_qty") < goodsMap.getDbInt("ordcnt")) {
//					throw new BizException("[" + goodsMap.getDbStr("goodsname") + "] 상품 재고가 부족합니다.");
//				}
			} else {
				//파트너사 재고확인 및 차감
				SOMap optionDetail = goodsOptionDetailMapper.selectDetailOptionCode(goodsMap);
				if(optionDetail.getDbInt("stockcnt") - goodsMap.getDbInt("ordcnt") < 0) {
					throw new BizException("[" + goodsMap.getDbStr("goodsname") + "] 상품 재고가 부족합니다.");
				}
				optionDetail.put("stockcnt", optionDetail.getDbInt("stockcnt") - goodsMap.getDbInt("ordcnt"));
				goodsOptionDetailMapper.updateGoodsOptionDetailStockCnt(optionDetail);
			}
			
			//주문상품 저장
			comOrderGoodsMapper.insertComOrderGoods(goodsMap);
			
			//주문상품배송 저장
			goodsMap.put("ordstatus", CMConst.ORDER_PREPARING_GOODS); //입급대기
			if(CMConst.PAYWAY_TYPE_VIRACCOUNT.equals(param.getDbStr("paywaytype"))){
				goodsMap.put("ordstatus", CMConst.ORDER_WAITING_DEPOSIT); //입급대기
			}
			comOrderGoodsDelivMapper.insertComOrderGoodsDeliv(goodsMap);
			
			//주문상태이력 저장
			goodsMap.put("aftval", goodsMap.get("ordstatus"));
			comOrderGoodsHisMapper.insertComOrderGoodsHis(goodsMap);
			
			// 배송비 쿠폰저장
			if(delivCoupon != null 
					&& delivCoupon.getDbInt("goodsno") == goodsMap.getDbInt("goodsno") 
					&& delivCoupon.getDbStr("optioncode").equals(goodsMap.get("optioncode"))){
				SOMap couponMap = new SOMap();
				couponMap.putAll(dbparams);
				couponMap.put("orderidx", param.get("orderidx"));
				couponMap.put("ordno", param.get("ordno"));
				couponMap.put("ordgdidx", goodsMap.getDbInt("ordgdidx"));
				couponMap.put("cpnmisidx", delivCoupon.getDbInt("cpnmisidx"));
				couponMap.put("comcpntype", delivCoupon.getDbStr("comcpntype"));
				this.saveComOrderCoupon(couponMap);
			}
			
			// 상품할인 쿠폰저장
			SOMap coupon = goodsMap.getSOMap("coupon");
			if(coupon != null && coupon.getDbInt("comcpnidx") > 0) {
				SOMap couponMap = new SOMap();
				couponMap.putAll(dbparams);
				couponMap.put("orderidx", param.get("orderidx"));
				couponMap.put("ordgdidx", goodsMap.getDbInt("ordgdidx"));
				
				//상품쿠폰, 즉시할인, 즉시지급 쿠폰
				if(Util.flag2Bool(coupon.getDbStr("isdirectcoupon"))){
					couponMap.put("cpnmisidx", coupon.getDbInt("cpnmisidx"));
					couponMap.put("comcpntype", coupon.getDbStr("comcpntype"));
					comOrderCouponMapper.insertComOrderCoupon(couponMap);
				} else {
					//그외 상품할인쿠폰
					if(coupon.getDbInt("usecnt") > 1) {
						coupon.put("userno", goodsMap.get("userno"));
						List<SOMap> couponList = couponMemissueMapper.selectCouponListByCpnidx(coupon);
						for(int i = 0 ; i < coupon.getDbInt("usecnt") ; i++){
							if(couponList.get(i) == null) {
								throw new BizException("쿠폰사용수량과 잔여수량이 일치하지 않습니다.");
							}
							couponMap.put("ordno", param.get("ordno"));
							couponMap.put("cpnmisidx", couponList.get(i).getDbInt("cpnmisidx"));
							couponMap.put("comcpntype", couponList.get(i).getDbStr("comcpntype"));
							this.saveComOrderCoupon(couponMap);
						}
					} else {
						couponMap.put("ordno", param.get("ordno"));
						couponMap.put("cpnmisidx", coupon.getDbInt("cpnmisidx"));
						couponMap.put("comcpntype", coupon.getDbStr("comcpntype"));
						this.saveComOrderCoupon(couponMap);
					}
				}
			}
			//장바구니에서 삭제
			if(goodsMap.getDbInt("cartidx") > 0) {
				comCartMapper.deleteCartByCartIdx(goodsMap);
			}
			
			idx++;
		}
		
		//장바구니쿠폰 저장
		SOMap cartCoupon = param.getSOMap("cartcoupon");
		if(cartCoupon != null) {
			SOMap couponMap = new SOMap();
			couponMap.putAll(dbparams);
			couponMap.put("orderidx", param.get("orderidx"));
			couponMap.put("ordno", param.get("ordno"));
			couponMap.put("cpnmisidx", cartCoupon.getDbInt("cpnmisidx"));
			couponMap.put("comcpntype", cartCoupon.getDbStr("comcpntype"));
			this.saveComOrderCoupon(couponMap);
		}
		
		//주문사은품 저장
		List<Map<String, Object>> giftList = param.getArrayList("giftlist");
		if(giftList.size() > 0) {
			SOMap giftMap = new SOMap();
			giftMap.putAll(dbparams);
			giftMap.put("orderidx", param.get("orderidx"));
			giftMap.put("isgift", "T");
			for (Map<String, Object> gift : giftList) {
				//TODO.  ERP재고 체크
//				giftMap.put("isgift", "F");
//				SOMap stockMap = erpService.erpGetGoodsAndGiftStock(dbparams);
//				if(stockMap.getDbInt("avail_qty") < giftMap.getDbInt("rcvamt")) {
//					throw new BizException("[" + giftMap.getDbStr("giftname") + "] 사은품 재고가 부족합니다.");
//				}
				giftMap.putAll(gift);
				comOrderGoodsGiftMapper.insertComOrderGoodsGift(giftMap);
			}
		}
		
		if(cs.getInt("authmemberno") > 0){
			//적립금 처리
			SOMap reserveParam = new SOMap();
			reserveParam.put("isuse", "T");
			reserveParam.put("reservetotamt", param.getDbInt("reservetotamt"));
			reserveParam.put("epointtotamt", param.getDbInt("epointtotamt"));
			reserveParam.put("empreservetotamt", param.getDbInt("empreservetotamt"));
			reserveParam.put("usememlvtype", param.getDbInt("memlvtype"));
			reserveParam.put("usemembertype", param.getDbInt("dadamembertype"));
			reserveParam.put("userno", param.getDbInt("userno"));
			reserveParam.put("userid", getMemberId());
			reserveParam.put("ordercode", param.getDbStr("ordno"));
			
			commonService.procUseReserveEPoint(reserveParam);
		}
		
		SOMap paymentInfo = null;
		if(param.getSOMap("payinfo") != null) {
			SOMap payinfo = param.getSOMap("payinfo");
			
			if(checkOrder.getDbInt("rpaytotprice") != payinfo.getDbInt("amount")) {
				throw new BizException("실결제금액과 결제금액이 일치하지 않습니다.");
			}
			
			if(CMConst.PAYWAY_TYPE_NAVER.equals(param.getDbStr("paywaytype"))) {
				paymentInfo = naverService.naverPayment(payinfo);
			} else {
				paymentInfo = tossService.tossPayment(payinfo);
			}
			
			//주문정보 결제후 결제금액 검증
			if(checkOrder.getDbInt("rpaytotprice") != paymentInfo.getDbInt("totalpayamount")) {
				SOMap paymentParam = new SOMap();
				paymentParam.put("paymentkey", paymentInfo.getDbStr("paymentkey"));
				paymentParam.put("amount", paymentInfo.getDbInt("totalpayamount"));
				paymentParam.put("requester", isMember() ? "1" : "2");
				paymentParam.put("reason", "결제금액 불일치");
				
				if(CMConst.PAYWAY_TYPE_NAVER.equals(param.getDbStr("paywaytype"))) {
					naverService.naverPaymentCancel(paymentParam);
				} else {
					tossService.tossPaymentCancel(paymentParam);
				}
				throw new BizException("결제금액이 일치하지 않습니다. 다시 시도해 주세요.");
			}
			
			paymentInfo.put("orderidx", param.getDbInt("orderidx"));
			paymentInfo.put("userid", getMemberId());
			//결제정보 저장
			tossreceiptMapper.insertTossreceipt(paymentInfo);
			
			//결제정보 수정
			comOrderMapper.updateOrderPayment(paymentInfo);
		} else {
			//결제정보 수정
			SOMap payment = new SOMap();
			payment.put("orderidx", param.getDbInt("orderidx"));
			payment.put("paymentdate", DateTimeUtil.getNowFullShortStr());
			comOrderMapper.updateOrderPayment(payment);
		}
		
		//현금영수증 발행(가상계좌는 입금처리에서 영수증 발행)
		if(!Util.isEmpty(param.getDbStr("cashreceipttype"))
				&& !"미발행".equals(param.getDbStr("cashreceipttype"))) {
			if(param.getDbInt("empreservetotamt") > 0 
					|| CMConst.PAYWAY_TYPE_ACCOUNTTRANS.equals(param.getDbStr("paywaytype"))
					|| CMConst.PAYWAY_TYPE_NAVER.equals(param.getDbStr("paywaytype"))){
			
				int amount = param.getDbInt("empreservetotamt");
				if(CMConst.PAYWAY_TYPE_ACCOUNTTRANS.equals(param.getDbStr("paywaytype"))
						|| CMConst.PAYWAY_TYPE_VIRACCOUNT.equals(param.getDbStr("paywaytype"))) {
					//가상계좌/계좌이체일경우 실결제금액 현금영수증
					amount = amount + param.getDbInt("rpaytotprice");
				} else if (CMConst.PAYWAY_TYPE_NAVER.equals(param.getDbStr("paywaytype"))) {
					//네이버페이일경우
					SOMap payment = new SOMap();
					payment.put("orderidx", param.getDbInt("orderidx"));
					payment.put("paymentkey", paymentInfo.getDbStr("paymentkey"));
					try {
						SOMap cashReceiptInfo = naverService.naverPaymentCashReceipts(payment);
						amount = amount + cashReceiptInfo.getDbInt("totalcashamount");
					} catch (Exception e) {
						//주결제수단이 계좌이체일경우
						if("BANK".equals(paymentInfo.getDbStr("primarypaymeans"))) {
							amount = amount + paymentInfo.getDbInt("primarypayamount");
						}
						//네이버페이 포인트 사용
						if(paymentInfo.getDbInt("npointpayamount") > 0) {
							amount = amount + paymentInfo.getDbInt("npointpayamount");
						}
						//기프트카드 사용
						if(paymentInfo.getDbInt("giftcardamount") > 0) {
							amount = amount + paymentInfo.getDbInt("giftcardamount");
						}
					}
				}
				
				if(amount > 0) {
					if(orderList.size() > 1) {
						orderName = orderName + " 외 " + (orderList.size() - 1) + "건";
					}
					
					SOMap payinfo = new SOMap();
					payinfo.put("cashreceipttype", param.getDbStr("cashreceipttype"));
					payinfo.put("registrationnumber", param.getDbStr("registrationnumber"));
					payinfo.put("orderid", param.getDbStr("ordno"));
					payinfo.put("ordername",  orderName);
					payinfo.put("amount", amount);
					try {
						SOMap tossInfo = tossService.tossCashReceipts(payinfo);
						tossInfo.put("orderidx", param.getDbInt("orderidx"));
						
						//결제정보 수정
						comOrderMapper.updateCashReceipts(tossInfo);
					} catch (Exception e) {
						logger.error("", e);
						result.put("message", "현금영수증 발급이 실패하였습니다.");
					}
				}
			}
		}
		
		SOMap messageParam = new SOMap();
		messageParam.put("orderidx", param.getDbInt("orderidx"));
		
		if(CMConst.PAYWAY_TYPE_VIRACCOUNT.equals(param.getDbStr("paywaytype"))){
			//가상계좌(무통장입금) 안내메지시
			SOMap payInfo = tossreceiptMapper.selectTossreceipt(param);
			
			messageParam.put("ordno", param.getDbStr("ordno"));
			messageParam.put("orderdate", DateTimeUtil.getDateKrFormat(param.getDbStr("orderdate")));
			messageParam.put("goodsname", orderName);
			messageParam.put("ordcnt", orderList.size() - 1);
			messageParam.put("number", param.getDbStr("ordtel"));
			messageParam.put("ordamt", param.getDbStr("rpaytotprice"));
			messageParam.put("bankname", payInfo.getDbStr("virbank") + "은행");
			messageParam.put("accoutno", payInfo.getDbStr("accntnumber"));
			messageParam.put("accountholder", payInfo.getDbStr("vircusname"));
			messageParam.put("depositdate", DateTimeUtil.getDateKrFormat(payInfo.getDbStr("virdueday")));
			messageParam.put("url", prop.getProperty("front.domain") + "");
			try {
				commonService.sendMessageOrderComplete2(messageParam);
			} catch (Exception e) {
				logger.error("", e);
			}
		} else {
			SOMap log = new SOMap();
			log.put("siteid", cs.getStr("siteid"));
			log.put("orgno", param.get("orderidx"));
			erpService.insertOrderERPData(log);
			//주문완료 메시지전송

			try {
				commonService.sendMessageOrderComplete(messageParam);
			} catch (Exception e) {
				logger.error("", e);
			}
		}
		
		result.put("ordno", param.getDbStr("ordno"));
		
		return result;
	}
	
	
	private void saveComOrderCoupon(SOMap coupon) throws Exception {
		comOrderCouponMapper.insertComOrderCoupon(coupon);
		couponMemissueMapper.updateCouponUsed(coupon);
	}

	public SOMap selectOrderNo(SOMap param) throws Exception {
		SOMap result = new SOMap();
		if("local".equals(prop.getProperty("Globals.Profile"))) {
			result.put("orderno", orderMapper.selectOrderNo(param).replace("2022", "3022"));
		}else {
			result.put("orderno", orderMapper.selectOrderNo(param));
		}

		return result;
	}
	
	/**
	 * 주문내역 상세
	 */
	public SOMap selectOrderDetail(SOMap param) throws Exception {
		SOMap result = new SOMap();
		param.put("siteid", cs.getStr("siteid"));
		if(!isMember() && Util.isEmpty(getOrdno())) {
			throw new BizException("권한이 없습니다.");
		}
		
		if(isMember()) {
			param.put("isuser", "T");
			param.put("userno", cs.getInt("authmemberno"));
		} else {
			param.put("ordno", getOrdno());
		}
		
		SOMap orderInfo = comOrderMapper.selectComOrderInfo(param);
		if(orderInfo == null) {
			throw new BizException("주문내역이 없습니다.");
		}
		
		List<SOMap> orderGoods = comOrderGoodsMapper.selectComOrderGoodsList(orderInfo);
		
		SOMap payInfo = tossreceiptMapper.selectTossreceipt(orderInfo);
		if(payInfo != null) {
			payInfo.remove("virsecret");
		} else {
			payInfo = new SOMap();
		}
		
		result.put("orderinfo", orderInfo);
		result.put("ordergoods", orderGoods);
		result.put("payinfo", payInfo);
		
		return result;
	}
	
	
	@Override
	@Transactional(propagation = Propagation.REQUIRED, rollbackFor = { Throwable.class })
	public SOMap sendAuth(SOMap param) throws Exception {

		if (Util.isEmpty(param.getDbStr("emailhp"))) {
			throw new BizException("연락처를 입력해주세요.");
		}

		// 인증시간 문자 3분
		int timeout = 180;
		Calendar cal = Calendar.getInstance();
		cal.setTime(new Date());
		cal.add(Calendar.SECOND, timeout);

		// Date -> DB Date로 변환
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String aulimitdateStr = sdf.format(cal.getTime());
		param.put("aulimitdate", aulimitdateStr);

		// 인증번호
		String authnum = RandomStringUtils.randomNumeric(6);
		param.put("authnum", authnum);
		
		// 인증번호 저장
		param.put("isemail", "F");
		param.put("certno", authnum);
		certMapper.insertCert(param);
		
		// 문자인증
		SOMap messageParam = new SOMap();
		messageParam.put("msg", String.format("[D.PLOT]인증번호는 %s입니다.", authnum));
		messageParam.put("msg_type", "SMS");
        messageParam.put("receiver_number", param.get("emailhp"));
		cjMessageService.sendMessage(messageParam);
		
		SOMap result = new SOMap();
		result.put("timeout", timeout);
		result.put("aulimitdate", aulimitdateStr);

		return result;
	}

	@Override
	public void confirmAuth(SOMap param) throws Exception {
		if (Util.isEmpty(param.getDbStr("emailhp"))) {
			throw new BizException("연락처를 입력해주세요.");
		}
		if (Util.isEmpty(param.getDbStr("authnum"))) {
			throw new BizException("인증번호를 입력해주세요.");
		}
		
		// 인증번호 조회
		String autnNum = certMapper.selectCert(param);
		
		// 인증번호 비교
		if (!autnNum.equals(param.getDbStr("authnum"))) {
			throw new BizException("인증번호가 일치하지 않습니다.");
		}
	}
	
	@Override
	public SOMap cardPromotion(SOMap param) throws Exception {
		
		SOMap result = tossService.tossCardPromotion(param);
		result.put("cardbenefit", cardBenefitMapper.selectCardBenefitList(param));
		
		return result;
	}
	
	
	
}
