package com.dplot.admin.service.common;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.dplot.common.CMConst;
import com.dplot.common.Response;
import com.dplot.common.SOMap;
import com.dplot.common.service.util.MallBaseService;
import com.dplot.exception.BizException;
import com.dplot.exception.CustomException;
import com.dplot.mapper.AdminMapper;
import com.dplot.mapper.AdminMenuMapper;
import com.dplot.mapper.AdminPermissionMapper;
import com.dplot.mapper.ComOrderGoodsMapper;
import com.dplot.mapper.CouponMapper;
import com.dplot.mapper.GiftMapper;
import com.dplot.mapper.GoodsMapper;
import com.dplot.mapper.MemberHistoryMapper;
import com.dplot.mapper.MemberMapper;
import com.dplot.util.Util;

/**
 * @discription	: 관리자 공통 ServiceImpl
 * @fileName	: AdminCommonServiceImpl.java
 * @author		: JSK
 * @date		: 2021.11.09
 * =================================================================
 * DATE			AUTHOR		NOTE
 * -----------------------------------------------------------------
 * 2021.11.09	JSK			최초생성
 * -----------------------------------------------------------------
 */
@Service
public class AdminCommonServiceImpl extends MallBaseService implements AdminCommonService {

	@Autowired
	private AdminMenuMapper adminMenuMapper;
	@Autowired
	private CouponMapper couponMapper;
	@Autowired
	private MemberMapper memberMapper;
	@Autowired
	private GoodsMapper goodsMapper;
	@Autowired
	private GiftMapper giftMapper;
	@Autowired
	private ComOrderGoodsMapper comOrderGoodsMapper;
	@Autowired
	private MemberHistoryMapper memberHistoryMapper;
    @Autowired
    private AdminPermissionMapper adminPermissionMapper;
	@Autowired
	private AdminMapper adminMapper;

	/**
	 * 상단메뉴 조회
	 * @param params
	 * @return List<SOMap>
	 * @throws Exception
	 */
	@Override
	public List<SOMap> selectAdminMenu(SOMap params) throws Exception{
		params.put("authadminno", cs.getInt("authadminno"));
		params.put("siteid", cs.getStr("siteid"));

		List<SOMap> topMenuList = adminMenuMapper.selectAdminMenu(params);

		return topMenuList.stream().peek(a -> {
			if (a.get("url").equals(params.get("path"))) {
				a.put("isActive", true);
			} else {
				a.put("isActive", false);
			}
		}).collect(Collectors.toList());
	}

	/**
	 * 서브메뉴(2뎁스 이상) 조회
	 * @param params
	 * @return List<SOMap>
	 * @throws Exception
	 */
	@Override
	public List<SOMap> selectAdminSubMenu(SOMap params) throws Exception{
		params.put("authadminno", cs.getInt("authadminno"));

		// 1.   depth 2 이상의 전체 노출메뉴 목록 조회
		List<SOMap> sideMenuList = adminMenuMapper.selectAdminSubMenu(params);

		// 2.   메뉴 parent-child 구조로 세팅
		// 2-1. depth 2 메뉴만 추출
		List<SOMap> resultList = sideMenuList.stream()
				.filter(parentMenu -> "2".equals(parentMenu.get("depth").toString()))
		        .collect(Collectors.toList());

		// 2-2. depth 2 메뉴에 해당하는 하위메뉴(depth 3) 목록 세팅
		if (resultList.size() > 0) {
			for (SOMap parentMenu : resultList) {
				List<SOMap> childMenuList = sideMenuList.stream()
						.peek(menu-> {
							// 상위코드 세팅
							String code = menu.get("code").toString();
							String upperCode = code.substring(0, code.lastIndexOf("-"));
							String url = (menu.get("url") == null) ? "" : menu.get("url").toString();
							menu.put("uppercode", upperCode);
							if(url.equals(params.get("path"))){
								menu.put("isactive", true);
							} else {
								menu.put("isactive", false);
							}
						})
						.filter(menu -> parentMenu.get("code").equals(menu.get("uppercode")))
						.collect(Collectors.toList());
				parentMenu.put("childmenulist", childMenuList);
			}

			// 하위메뉴 isActive일때 상위메뉴 isActive 적용
			for (SOMap parentMenu : resultList) {
				List<SOMap> childMenuList = (List<SOMap>) parentMenu.get("childmenulist");
				for (SOMap childMenu : childMenuList) {
					if ((boolean) childMenu.get("isactive")) {
						parentMenu.put("isactive", true);
						break;
					}
				}
			}
		}

		return resultList;
	}

	/**
	 * 네비게이터에 노출할 메뉴 조회
	 * @param params
	 * @return SOMap
	 * @throws Exception
	 */
	@Override
	public SOMap selectAdminMenuNav(SOMap params) throws Exception {
		if(params.get("code") == null
				|| "".equals(params.get("code").toString())
				|| "undefined".equals(params.get("code").toString())){

			SOMap map = adminMenuMapper.selectAdminMenuInfoByUrl(params);
			params.put("code", map.get("code"));
			params.put("depth", map.get("depth"));
		}
		String parentCode = params.get("code").toString().substring(0, 1);
		params.put("parentcode", parentCode);

		return adminMenuMapper.selectAdminMenuNav(params);
	}

	/**
	 * 관리자 페이지 읽기/쓰기 권한 데이터 리턴
	 * @param params
	 * @return SOMap
	 * @throws Exception
	 */
	@Override
	public SOMap selectAdminPageAuth(SOMap params) throws Exception {
		params.put("authadminno", cs.getInt("authadminno"));
		SOMap soMap = adminMenuMapper.selectAdminPageAuth(params);

		if(soMap == null){
			soMap = new SOMap();
			soMap.put("isread", "F");
			soMap.put("iswrite", "F");
		}
		if (!Util.isEmpty(params.get("iscomponentauth")) && (boolean) params.get("iscomponentauth")) {
			List<SOMap> componentAtuhList = adminMenuMapper.selectAdminComponentAuth(params);
			soMap.put("componentauth", componentAtuhList);
		}

		return soMap;
	}

	/**
	 * 다다픽 사용자 조회
	 * @param params
	 * @return SOMap
	 * @throws Exception
	 */
	@Override
	public SOMap selectMemberList(SOMap params) throws Exception {
		SOMap result = new SOMap();

        params.put("siteid", cs.getStr("siteid"));
        int page = Integer.parseInt(params.get("page").toString());
        int pageCount = Integer.parseInt(params.get("pagecount").toString());
        int startPage = (page > 1) ? ((page-1) * pageCount) : 0;
        params.put("startpage", startPage);
        params.put("endpage", pageCount);

        List<SOMap> memberList = memberMapper.selectAdminMemberList(params);
        SOMap count = memberMapper.selectAdminMemberListCount(params);
        result.put("list", memberList);
        result.put("count", count);
		return result;
	}

	/**
	 * 상품목록 조회
	 * @param params
	 * @return SOMap
	 * @throws Exception
	 */
	@Override
	public SOMap selectGoodsList(SOMap params) throws Exception {
		SOMap result = new SOMap();

        params.put("siteid", cs.getStr("siteid"));
		params.put("imgtype", CMConst.IMG_TYPE_GOODS_IMG_PC_S); 	//이미지구분_상품_PC이미지_소
        List<SOMap> goodsList = goodsMapper.selectCommonGoodsList(params);

        int listcount = 0;
        if (goodsList != null && goodsList.size() > 0) {
        	listcount = goodsList.get(0).getInt("totalcnt");
        }
        result.put("list", goodsList);
        result.put("listcount", listcount);
		return result;
	}

	/**
	 * 사은품목록 조회
	 * @param params
	 * @return SOMap
	 * @throws Exception
	 */
	@Override
	public SOMap selectGiftList(SOMap params) throws Exception {
		SOMap result = new SOMap();

        List<SOMap> giftList = giftMapper.selectGiftList(params);
        SOMap count = giftMapper.selectGiftState(params);
        result.put("list", giftList);
        result.put("count", count);
		return result;
	}

	/**
	 * 주문내역 조회
	 * @param params
	 * @return SOMap
	 * @throws Exception
	 */
	@Override
	public SOMap selectOrderList(SOMap params) throws Exception {
		SOMap result = new SOMap();

        params.put("siteid", cs.getStr("siteid"));
        List<SOMap> resultList = comOrderGoodsMapper.selectAdminCommonOrderGoodsList(params);
        result.put("list", resultList);
		return result;
	}

	@Override
	public SOMap selectMemberInfoHistoryList(SOMap params) throws Exception {
		SOMap result = new SOMap();
		result.put("list", memberHistoryMapper.selectMemberHistoryList(params));
		return result;
	}

	/**
	 * 사용가능한 쿠폰 목록 조회
	 *
	 * @param params
	 * @return
	 * @throws Exception
	 */
	@Override
	public SOMap selectUseCouponList(SOMap params) throws Exception {
		SOMap result = new SOMap();
        params.put("siteid", cs.getStr("siteid"));
		result.put("list", couponMapper.selectPromotionCouponList(params));
		return result;
	}

	@Override
	public List<SOMap> selectAdminFavoriteAllMenuList(SOMap params) throws Exception {
		params.put("authadminno", cs.getInt("authadminno"));

		// 1.   전체 보유한 권한 노출메뉴 목록 조회
		List<SOMap> menuList = adminMenuMapper.selectAdminAllMenu(params);

		// 2.   메뉴 parent-child 구조로 세팅
		// 2-1. depth 1 메뉴만 추출
		List<SOMap> resultList = menuList.stream()
				.filter(parentMenu -> "1".equals(parentMenu.get("depth").toString()))
		        .collect(Collectors.toList());

		// 2-2. depth 2 메뉴만 추출
		List<SOMap> depth2List = menuList.stream()
				.filter(parentMenu -> "2".equals(parentMenu.get("depth").toString()))
		        .collect(Collectors.toList());

		// 2-3. depth 3메뉴만 추출
		List<SOMap> depth3List = menuList.stream()
				.filter(parentMenu -> "3".equals(parentMenu.get("depth").toString()))
		        .collect(Collectors.toList());

		// 2-4. depth 2 메뉴에 해당하는 하위메뉴(depth 3) 목록 세팅
		if (depth2List.size() > 0) {
			for (SOMap parentMenu : depth2List) {
				List<SOMap> childMenuList = depth3List.stream()
						.peek(menu-> {
							// 상위코드 세팅
							String code = menu.get("code").toString();
							String upperCode = code.substring(0, code.lastIndexOf("-"));
							menu.put("uppercode", upperCode);
						})
						.filter(menu -> parentMenu.get("code").equals(menu.get("uppercode")))
						.collect(Collectors.toList());
				parentMenu.put("childmenulist", childMenuList);
			}
		}

		// 2-5. child가 있는 depth2는 depth3을 없는 경우 depth2를 depth1 자식으로 넣을 수 있도록 세팅
		List<SOMap> addList = new ArrayList<>();
		if(depth2List.size() > 0) {
			depth2List.forEach(menu -> {
				List<SOMap> childMenuList = menu.getArrayList("childmenulist");
				if(childMenuList.size() > 0) {
					childMenuList.forEach(child -> {
						// 상위코드 세팅
						String code = child.get("code").toString();
						String upperCode = code.substring(0, code.indexOf("-"));
						child.put("uppercode", upperCode);
						addList.add(child);
					});
				} else {
					// 상위코드 세팅
					String code = menu.get("code").toString();
					String upperCode = code.substring(0, code.lastIndexOf("-"));
					menu.put("uppercode", upperCode);
					addList.add(menu);
				}
			});
		}

		// 3. depth 1 메뉴에 하위메뉴가 없는 depth2와 depth3를 child로 세팅
		if(resultList.size() > 0) {
			for(SOMap parentMenu : resultList) {
				List<SOMap> childMenuList = addList.stream()
						.filter(menu -> parentMenu.get("code").equals(menu.get("uppercode")))
						.collect(Collectors.toList());
				parentMenu.put("childmenulist", childMenuList);
			}
		}

		return resultList;
	}

	@Override
	public SOMap saveFavoriteMenu(SOMap params) throws Exception {
		params.put("userno", cs.getStr("authuserno"));
		SOMap result = new SOMap();

		try{
			result.put("resCnt", adminPermissionMapper.updateBookMark(params));
		} catch(Exception e){
			throw new CustomException("즐겨찾기 메뉴 저장시 오류가 발생하였습니다. 관리자에게 문의해주세요.");
		}

		return result;
	}

	@Override
	public List<SOMap> selectAdminFavoriteMenuList(SOMap params) throws Exception {
		params.put("authadminno", cs.getInt("authadminno"));

		List<SOMap> favoriteMenuList = adminMenuMapper.selectAdminFavoriteMenu(params);

		for(SOMap menu : favoriteMenuList) {
			menu.put("childmenulist", new ArrayList<>());
		}

		return favoriteMenuList;
	}

	/**
	 * KMC 본인인증 복호화 처리
	 */
	@Override
	public Response adminKmcCertDecry(SOMap param, HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		Response results = new Response();
		results.setErrorShow(false);

		/**************************************************
		 * 변수 선언
		 **************************************************/
		String rec_cert = ""; // 결과수신DATA

		String k_certNum = ""; // 파라미터로 수신한 요청번호
		String certNum = ""; // 요청번호
		String date = ""; // 요청일시
		String CI = ""; // 연계정보(CI)
		String enCryCI = ""; // 연계정보암호화(CI)
		String DI = ""; // 중복가입확인정보(DI)
		String phoneNo = ""; // 휴대폰번호
		String phoneCorp = ""; // 이동통신사
		String birthDay = ""; // 생년월일
		String gender = ""; // 성별
		String nation = ""; // 내국인
		String name = ""; // 성명
		String M_name = ""; // 미성년자 성명
		String M_birthDay = ""; // 미성년자 생년월일
		String M_Gender = ""; // 미성년자 성별
		String M_nation = ""; // 미성년자 내외국인
		String result = ""; // 결과값
		String certMet = ""; // 인증방법
		String ip = ""; // ip주소
		String plusInfo = "";
		String encPara = "";
		String encMsg1 = "";
		String encMsg2 = "";
		String msgChk = "";
		/******************************************************
		 * 복호화 처리
		 ******************************************************/
		rec_cert = param.getStr("rec_cert");
		k_certNum = param.getStr("certnum");

		// [01. 암호화 모듈 (jar) Loading]
		com.icert.comm.secu.IcertSecuManager seed = new com.icert.comm.secu.IcertSecuManager();

		// [02. 1차 복호화]
		// 수신된 certNum를 이용하여 복호화
		rec_cert = seed.getDec(rec_cert, k_certNum);

		// [03. 1차 파싱]
		int inf1 = rec_cert.indexOf("/", 0);
		int inf2 = rec_cert.indexOf("/", inf1 + 1);
		encPara = rec_cert.substring(0, inf1); // 암호화된 통합 파라미터
		encMsg1 = rec_cert.substring(inf1 + 1, inf2); // 암호화된 통합 파라미터의 Hash값

		// [04. 위변조 검증]
		encMsg2 = seed.getMsg(encPara);
		if (encMsg2.equals(encMsg1)) {
			msgChk = "Y";
		}
		if (msgChk.equals("N")) {
			throw new BizException("비정상적인 접근입니다.!!(" + msgChk + ")");
		}

		// [05. 2차 복호화]
		rec_cert = seed.getDec(encPara, k_certNum);

		// [06. 2차 파싱]
		int info1 = rec_cert.indexOf("/", 0);
		int info2 = rec_cert.indexOf("/", info1 + 1);
		int info3 = rec_cert.indexOf("/", info2 + 1);
		int info4 = rec_cert.indexOf("/", info3 + 1);
		int info5 = rec_cert.indexOf("/", info4 + 1);
		int info6 = rec_cert.indexOf("/", info5 + 1);
		int info7 = rec_cert.indexOf("/", info6 + 1);
		int info8 = rec_cert.indexOf("/", info7 + 1);
		int info9 = rec_cert.indexOf("/", info8 + 1);
		int info10 = rec_cert.indexOf("/", info9 + 1);
		int info11 = rec_cert.indexOf("/", info10 + 1);
		int info12 = rec_cert.indexOf("/", info11 + 1);
		int info13 = rec_cert.indexOf("/", info12 + 1);
		int info14 = rec_cert.indexOf("/", info13 + 1);
		int info15 = rec_cert.indexOf("/", info14 + 1);
		int info16 = rec_cert.indexOf("/", info15 + 1);
		int info17 = rec_cert.indexOf("/", info16 + 1);
		int info18 = rec_cert.indexOf("/", info17 + 1);

		certNum = rec_cert.substring(0, info1);
		date = rec_cert.substring(info1 + 1, info2);
		enCryCI = rec_cert.substring(info2 + 1, info3);
		phoneNo = rec_cert.substring(info3 + 1, info4);
		phoneCorp = rec_cert.substring(info4 + 1, info5);
		birthDay = rec_cert.substring(info5 + 1, info6);
		gender = rec_cert.substring(info6 + 1, info7);
		nation = rec_cert.substring(info7 + 1, info8);
		name = rec_cert.substring(info8 + 1, info9);
		result = rec_cert.substring(info9 + 1, info10);
		certMet = rec_cert.substring(info10 + 1, info11);
		ip = rec_cert.substring(info11 + 1, info12);
		M_name = rec_cert.substring(info12 + 1, info13);
		M_birthDay = rec_cert.substring(info13 + 1, info14);
		M_Gender = rec_cert.substring(info14 + 1, info15);
		M_nation = rec_cert.substring(info15 + 1, info16);
		plusInfo = rec_cert.substring(info16 + 1, info17);
		DI = rec_cert.substring(info17 + 1, info18);

		// [07. CI, DI 복호화]
		CI = seed.getDec(enCryCI, k_certNum);
		DI = seed.getDec(DI, k_certNum);
		/******************************************************
		 * 파라미터 유효성 검증
		 ******************************************************/

		String regex = "";
		String regex1 = "";

		if (certNum.length() == 0 || certNum.length() > 40) {
			throw new BizException("요청번호 비정상.");
		}

		regex = "[0-9]*";
		if (date.length() != 14 || !Util.paramChk(regex, date)) {
			throw new BizException("요청일시 비정상.");
		}

		regex = "[A-Z]*";
		if (certMet.length() != 1 || !Util.paramChk(regex, certMet)) {
			throw new BizException("본인인증방법 비정상" + certMet);
		}

		regex = "[0-9]*";
		if ((phoneNo.length() != 10 && phoneNo.length() != 11) || !Util.paramChk(regex, phoneNo)) {
			throw new BizException("휴대폰번호 비정상");
		}

		regex = "[A-Z]*";
		if (phoneCorp.length() != 3 || !Util.paramChk(regex, phoneCorp)) {
			throw new BizException("이동통신사 비정상");
		}

		regex = "[0-9]*";
		if (birthDay.length() != 8 || !Util.paramChk(regex, birthDay)) {
			throw new BizException("생년월일 비정상");
		}

		regex = "[0-9]*";
		if (gender.length() != 1 || !Util.paramChk(regex, gender)) {
			throw new BizException("성별 비정상");
		}

		regex = "[0-9]*";
		if (nation.length() != 1 || !Util.paramChk(regex, nation)) {
			throw new BizException("내/외국인 비정상");
		}

		regex = "[A-Z]*";
		if (result.length() != 1 || !Util.paramChk(regex, result)) {
			throw new BizException("결과값 비정상");
		}

		regex = "[\\sA-Za-z가-?.,-]*";
		if (M_name.length() != 0) {
			if (M_name.length() > 60 || !Util.paramChk(regex, M_name)) {
				throw new BizException("미성년자 성명 비정상");
			}
		}

		regex = "[0-9]*";
		if (M_birthDay.length() != 0) {
			if (M_birthDay.length() != 8 || !Util.paramChk(regex, M_birthDay)) {
				throw new BizException("미성년자 생년월일 비정상");
			}
		}

		regex = "[0-9]*";
		if (M_Gender.length() != 0) {
			if (M_Gender.length() != 1 || !Util.paramChk(regex, M_Gender)) {
				throw new BizException("미성년자 성별 비정상");
			}
		}

		regex = "[0-9]*";
		if (M_nation.length() != 0) {
			if (M_nation.length() != 1 || !Util.paramChk(regex, M_nation)) {
				throw new BizException("미성년자 내/외국인 비정상");
			}
		}
		/**********************************
		 * 복호화된 데이터
		 **********************************/
		// kmc 결과 정보
		SOMap kmcinfo = new SOMap();
		kmcinfo.put("certnum", certNum);
		kmcinfo.put("date", date);
		kmcinfo.put("ci", CI);
		kmcinfo.put("phoneno", phoneNo);
		kmcinfo.put("phonecorp", phoneCorp);
		kmcinfo.put("birthday", birthDay);
		kmcinfo.put("gender", gender);
		kmcinfo.put("nation", nation);
		kmcinfo.put("name", name);
		kmcinfo.put("result", result);
		kmcinfo.put("certmet", certMet);
		kmcinfo.put("ip", ip);
		kmcinfo.put("m_name", M_name);
		kmcinfo.put("m_birthday", M_birthDay);
		kmcinfo.put("m_gender", M_Gender);
		kmcinfo.put("m_nation", M_nation);
		kmcinfo.put("plusinfo", plusInfo);
		kmcinfo.put("di", DI);

		// 회원정보
		SOMap dbparam = new SOMap();
		dbparam.put("ci", CI);
		dbparam.put("di", DI);
		dbparam.put("mobile", phoneNo);
		dbparam.put("name", name);
		dbparam.put("siteid", cs.getStr("siteid"));
		dbparam.put("state", CMConst.CM_STATE_REAL);

		// 사용자 정보 조회
		// CI값비교
		SOMap memberInfo = adminMapper.selectAdminMemberInfo(dbparam);


		// 기가입 있을경우
		if (memberInfo != null) {
			if (Util.isEmpty(memberInfo.get("ci")) && Util.isEmpty(memberInfo.get("di"))) {
				memberInfo.put("ci", CI);
				memberInfo.put("di", DI);
				adminMapper.updateAdminMemberCiDiInfo(memberInfo);
			}
			memberInfo.remove("ci");
			memberInfo.remove("di");

			if (Util.isNotEmpty(memberInfo.get("userid"))) {
				String tempMemberId = memberInfo.get("userid").toString();
				tempMemberId = Util.asterisk(tempMemberId, 2, 0);
				memberInfo.put("useridaster", tempMemberId);
			}
			if (Util.isNotEmpty(memberInfo.get("email"))) {
				String emailAster = memberInfo.get("email").toString().trim();
				String[] emailArr = emailAster.split("@");
				if (emailArr.length > 1) {
					emailAster = emailArr[0].substring(0, 2) + "****@" + emailArr[1];
					memberInfo.put("emailaster", emailAster);
				}
			}
			if (Util.isNotEmpty(memberInfo.get("mobile"))) {
				String mobile = memberInfo.get("mobile").toString().trim();
				mobile = Util.phoneFormat(mobile);
				String[] mobileArr = Util.getTelPhoneSpliter(mobile);
				if (mobileArr.length > 2) {
					mobileArr[1] = Util.asterisk(mobileArr[1], 0, 0);
					memberInfo.put("mobileaster", mobileArr[0] + "-" + mobileArr[1] + "-" + mobileArr[2]);
				}
			}
		}

		SOMap resultMap = new SOMap();
		resultMap.put("kmcinfo", kmcinfo);
		resultMap.put("memberinfo", memberInfo);
		results.setData(resultMap);

		return results;
	}
}
