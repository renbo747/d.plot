package com.dplot.front.service;

import java.util.ArrayList;
import java.util.List;

import com.dplot.mapper.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.dplot.common.CMConst;
import com.dplot.common.SOMap;
import com.dplot.common.service.util.MallBaseService;
import com.dplot.exception.BizException;
import com.dplot.util.Util;

@Service
public class ShopServiceImpl extends MallBaseService implements ShopService{

	private static final Logger logger = LoggerFactory.getLogger(ShopServiceImpl.class);

	@Autowired
	private CategoryMapper categoryMapper;

	@Autowired
	private GoodsMapper goodsMapper;

	@Autowired
	private GoodsOptionDetailMapper goodsOptionDetailMapper;

	@Autowired
	private BannerMapper bannerMapper;

	@Autowired
	private CateSubsetMapper cateSubsetMapper;

	@Autowired
	private ShopExNameMapper shopExNameMapper;

	@Autowired
	private ShopEx12Mapper shopEx12Mapper;

	@Autowired
	private ShopEx3Mapper shopEx3Mapper;

	@Autowired
	private ShopEx45Mapper shopEx45Mapper;

	@Autowired
	private ShopEx45GoodsMapper shopEx45GoodsMapper;

	@Autowired
	private BestGoodsMapper bestGoodsMapper;

	@Autowired
	private MzTrendMapper mzTrendMapper;

	@Autowired
	private DadaEventMapper dadaEventMapper;

	@Autowired
	private BoardPostMapper boardPostMapper;

	@Autowired
	private DadaEventEnterMapper dadaEventEnterMapper;

	@Autowired
	private DadaEventGoodsMapper dadaEventGoodsMapper;

	@Autowired
	private DadaEventCommentMapper dadaEventCommentMapper;

	@Autowired
	private EvtCommentReportMapper evtCommentReportMapper;

	@Autowired
	private MemberMapper memberMapper;

	@Autowired
	private BannedMapper bannedMapper;

	@Autowired
	private BrandMapper brandMapper;

	@Autowired
	private PromotionMapper promotionMapper;

	@Override
	public SOMap selectShopList(SOMap param) throws Exception {
		SOMap result = new SOMap();
		param.put("siteid", cs.getStr("siteid"));
		param.put("platform", cs.getStr("platform"));
		param.put("muappchtype", cs.getStr("platform"));
		param.put("userno", cs.getInt("authmemberno"));
		param.put("isshopmain", "T");

		//비로그인시=> 일반회원의 브론즈
		if (param.getInt("userno")  == 0) {
			param.put("mumembertype", "DMT001"); //일반회원
			param.put("mumemlvtype", "MDL001");  //브론즈
		}else {
			param.put("mumembertype", cs.getStr("authmembertype"));
			param.put("mumemlvtype", cs.getStr("authmemlvtype"));
		}
		/**************************
		 * 메인배너  조회(최상단)
		 *************************/
		param.put("bntype", "BNT002");
		if (Util.flag2Bool(cs.getStr("ismobile"))) {
			param.put("imgtype", CMConst.IMG_TYPE_SHOPPING_MAIN_MO);
		} else {
			param.put("imgtype", CMConst.IMG_TYPE_SHOPPING_MAIN_PC);
		}
		param.put("limit", null);
		List<SOMap> mainbannerList = bannerMapper.selectFrontMainBanner(param);
		result.put("mainbannerlist", mainbannerList);
		/**************************
		 * shop 배너1 조회
		 *************************/
		param.put("limit", 1);
		param.put("bntype", "BNT004");
		param.put("exbntype", "EBN001");
		if (Util.flag2Bool(cs.getStr("ismobile"))) {
			param.put("imgtype", CMConst.IMG_TYPE_SHOPPING_EXBN_MO);
		} else {
			param.put("imgtype", CMConst.IMG_TYPE_SHOPPING_EXBN_PC);
		}
		List<SOMap> shopBanner1List = bannerMapper.selectFrontMainBanner(param);
		result.put("shopbanner1list", shopBanner1List);
		/**************************
		 * shop 배너2 조회
		 *************************/
		param.put("bntype", "BNT004");
		param.put("exbntype", "EBN002");
		List<SOMap> shopBanner2List = bannerMapper.selectFrontMainBanner(param);
		result.put("shopbanner2list", shopBanner2List);
		/***********************
		 * 카테고리 배너 조회
		 **********************/
		param.put("imgtype", Util.flag2Bool(cs.getStr("ismobile")) ? CMConst.IMG_TYPE_SHOPPING_CATE_MO : CMConst.IMG_TYPE_SHOPPING_CATE_PC);
		param.put("bntype", "BNT003");
		param.put("exbntype", null);
		param.put("limit", null);
		List<SOMap> cateList = bannerMapper.selectFrontMainBanner(param);
		result.put("catelist", cateList);
		/**************************
		 * 카테고리 배너 대용문구 조회
		 *************************/
		param.put("limit", 1);
		List<SOMap> cateSubsetList = cateSubsetMapper.selectFrontSubsetList(param);
		result.put("catesubsetlist", cateSubsetList);
		/**************************
		 * 전시영역 조회
		 *************************/
		List<SOMap> shopexnameList = shopExNameMapper.selectShopExNameList(param);
		result.put("shopexnamelist", shopexnameList);
		/**************************
		 * 전시영역1 조회 - NewIN
		 **************************/
		if (Util.flag2Bool(cs.getStr("ismobile"))) {
			param.put("imgtype", CMConst.IMG_TYPE_GOODS_IMG_MO_M);
		} else {
			param.put("imgtype", CMConst.IMG_TYPE_GOODS_IMG_PC_M);
		}
		param.put("extype", "EXN001");
		param.put("isnopaging", "T");
		param.put("userno", cs.getInt("authmemberno"));
//		param.put("limit", 8);
		param.put("isshopmain", "T");
		List<SOMap> shopex1List = shopEx12Mapper.selectFrontShopExList(param);
		result.put("shopex1list", shopex1List);
		/**************************
		 * 전시영역2 조회 - I'm Ready
		 **************************/
		param.put("extype", "EXN002");
		param.put("limit", 18);
		param.remove("isshopmain");
		List<SOMap> shopex2List = shopEx12Mapper.selectFrontShopExList(param);
		result.put("shopex2list", shopex2List);
		/**************************
		 * 전시영역3 조회 - 이달의 B&D
		 **************************/
		param.put("limit", 2);
		if (Util.flag2Bool(cs.getStr("ismobile"))) {
			param.put("imgtype", CMConst.IMG_TYPE_SHOPPING_EXTHREE_MO);
		} else {
			param.put("imgtype", CMConst.IMG_TYPE_SHOPPING_EXTHREE_PC);
		}
		List<SOMap> shopex3List = shopEx3Mapper.selectFrontShopExList(param);

		if (Util.flag2Bool(cs.getStr("ismobile"))) {
			param.put("imgtype", CMConst.IMG_TYPE_GOODS_IMG_MO_M);
		} else {
			param.put("imgtype", CMConst.IMG_TYPE_GOODS_IMG_PC_M);
		}
		for(SOMap shop : shopex3List) {
			List<SOMap> goodsList = new ArrayList<>();
			for (int i = 0; i < 2; i++) {
				param.put("goodsno", shop.getInt("goodsno"+(i+1)));
				if (param.getInt("goodsno") != 0) {
					goodsList.add(goodsMapper.selectFrontGoodsDetail(param));
				}
			}
			shop.put("goodslist", goodsList);
		}
		result.put("shopex3List", shopex3List);
		/**************************
		 * 전시영역4 조회 - Pre-order
		 **************************/
		param.put("extype", "EXN004");
		//param.put("limit", 1);	운영기획파트 요청으로 제한 갯수 해제 (2022-09-13, James)
		if (Util.flag2Bool(cs.getStr("ismobile"))) {
			param.put("imgtype", CMConst.IMG_TYPE_SHOPPING_EXFOUR_MO);
		} else {
			param.put("imgtype", CMConst.IMG_TYPE_SHOPPING_EXFOUR_PC);
		}
		List<SOMap> shopex4List = shopEx45Mapper.selectFrontShopExList(param);
		if (Util.flag2Bool(cs.getStr("ismobile"))) {
			param.put("imgtype", CMConst.IMG_TYPE_GOODS_IMG_MO_M);
		} else {
			param.put("imgtype", CMConst.IMG_TYPE_GOODS_IMG_PC_M);
		}
		for(SOMap shop : shopex4List) {
			param.put("ex45idx", shop.getInt("ex45idx"));
			if (param.getInt("ex45idx") != 0) {
				List<SOMap> goodsList = shopEx45GoodsMapper.selectFrontShopEx45GoodsList(param);
				shop.put("goodslist", goodsList);
			}
		}
		result.put("shopex4list", shopex4List);
		/**************************
		 * 전시영역5 조회 - 프로모션 & Sale
		 **************************/
		param.put("extype", "EXN005");
		param.put("limit", 2);
		if (Util.flag2Bool(cs.getStr("ismobile"))) {
			param.put("imgtype", CMConst.IMG_TYPE_SHOPPING_EXFIVE_MO);
		} else {
			param.put("imgtype", CMConst.IMG_TYPE_SHOPPING_EXFIVE_PC);
		}
		List<SOMap> shopex5List = shopEx45Mapper.selectFrontShopExList(param);
		if (Util.flag2Bool(cs.getStr("ismobile"))) {
			param.put("imgtype", CMConst.IMG_TYPE_GOODS_IMG_MO_M);
		} else {
			param.put("imgtype", CMConst.IMG_TYPE_GOODS_IMG_PC_M);
		}
		for(SOMap shop : shopex5List) {
			param.put("ex45idx", shop.getInt("ex45idx"));
			if (param.getInt("ex45idx") != 0) {
				List<SOMap> goodsList = shopEx45GoodsMapper.selectFrontShopEx45GoodsList(param);
				//키워드 추출
				for(SOMap item : goodsList) {
					item.put("keyword", "".equals(item.get("keyword"))? new ArrayList<>() : item.getStr("keyword").split(","));
				}
				shop.put("goodslist", goodsList);
			}
		}
		result.put("shopex5list", shopex5List);
		/**************************
		 * TREND 1DEPTH 카테고리 조회
		 **************************/
		param.put("idx", 0);
		List<SOMap> categoryList = categoryMapper.selectCategoryList(param);
		result.put("category1depthlist", categoryList);
		/**************************
		 * 전시7영역 조회- MD'S PICK CONTENTS
		 **************************/
		if (Util.flag2Bool(cs.getStr("ismobile"))) {
			param.put("imgtype", CMConst.IMG_TYPE_MAGAZINE_TRD_SHOP_MO);
		} else {
			param.put("imgtype", CMConst.IMG_TYPE_MAGAZINE_TRD_SHOP_PC);
		}
		List<SOMap> mzTrendList = mzTrendMapper.selectFrontMzTrendList(param);
		result.put("mztrendlist", mzTrendList);

		//키워드 추출
		for(SOMap shop : mzTrendList) {
			shop.put("keyword", "".equals(shop.getStr("keywords"))? new ArrayList<>() : ((String) shop.get("keywords")).split(","));
		}
		return result;
	}

	/**
	 * 베스트 상품 조회
	 */
	@Override
	public SOMap selectShopBestList(SOMap param) throws Exception {
		SOMap resultMap = new SOMap();
		param.put("siteid", cs.getStr("siteid"));
		param.put("userno", cs.getInt("authmemberno"));
		if (Util.flag2Bool(cs.getStr("ismobile"))) {
			param.put("imgtype", CMConst.IMG_TYPE_GOODS_IMG_MO_M);
		} else {
			param.put("imgtype", CMConst.IMG_TYPE_GOODS_IMG_PC_M);
		}

		List<SOMap> goodsList = bestGoodsMapper.selectBestGoodsList(param);
		resultMap.put("goodslist", goodsList);

		return resultMap;
	}



	/**
	 * FILTER 카테고리 목록 조회
	 */
	@Override
	public SOMap selectFilterCateList(SOMap param) throws Exception {
		logger.debug("selectFilterCateList()접근.....");
		SOMap resultMap = new SOMap();
		param.put("siteid", cs.getStr("siteid"));
		param.put("userno", cs.getInt("authmemberno"));
		/***********************
		 * 카테고리 조회
		 **********************/
		param.put("siteid", cs.getStr("siteid"));
		param.put("depth", 1);
		param.put("idx", 0);

		param.put("muappchtype", cs.getStr("platform"));

		if (param.getInt("userno")  == 0) {
			param.put("mumembertype", "DMT001"); //일반회원
			param.put("mumemlvtype", "MDL001");  //브론즈
		}else {
			param.put("mumembertype", cs.getStr("authmembertype"));
			param.put("mumemlvtype", cs.getStr("authmemlvtype"));
		}

		List<SOMap> cateList = categoryMapper.selectFrontCategoryList(param);

		resultMap.put("catelist", cateList);

		return resultMap;
	}

	/**
	 * Filter 관련 정보 조회
	 */
	@Override
	public SOMap selectFilterList(SOMap param) throws Exception {
		SOMap resultMap = new SOMap();

		param.put("siteid", cs.getStr("siteid"));
		param.put("userno", cs.getInt("authmemberno"));
		param.put("muappchtype", cs.getStr("platform"));

		if (param.getInt("userno") == 0) {
			param.put("mumembertype", "DMT001"); // 일반회원
			param.put("mumemlvtype", "MDL001"); // 브론즈
		} else {
			param.put("mumembertype", cs.getStr("authmembertype"));
			param.put("mumemlvtype", cs.getStr("authmemlvtype"));
		}
		/***********************
		 * 카테고리 목록 조회
		 **********************/
		SOMap parentInfo = categoryMapper.selectCategoryByIdx(param);
		if (parentInfo == null) {
			throw new BizException("카테고리 정보가 없습니다.");
		}
		SOMap catePram = new SOMap();
		catePram.putAll(param);
		if (parentInfo.getStr("ischild").equals("F")) {
			catePram.put("idx", parentInfo.getInt("parent"));
			catePram.put("depth", parentInfo.getInt("depth"));
			parentInfo.put("idx", parentInfo.getInt("parent"));
			parentInfo.put("name", parentInfo.getStr("parentname"));
		} else {
			catePram.put("idx", parentInfo.getInt("idx"));
			catePram.put("depth", parentInfo.getInt("depth") + 1);
		}

		List<SOMap> cateList = categoryMapper.selectFrontCategoryList(catePram);
		if (cateList.size() <= 0) {
			throw new BizException("해당 카테고리 상품이 없습니다.");
		}

		resultMap.put("parentinfo", parentInfo);
		resultMap.put("catelist", cateList);

		/***********************
		 * 선택된 카테고리의 노출 상품 BRAND 목록 조회
		 **********************/
		param.put("imgtype",
				Util.flag2Bool(cs.getStr("ismobile")) ? CMConst.IMG_TYPE_BRAND_IMG_MO : CMConst.IMG_TYPE_BRAND_IMG_PC);
		List<SOMap> brandList = goodsMapper.selectGoodsBrandListByCateIdx(param);
		for (SOMap item : brandList) {
			item.put("checked", false);
			item.put("show",false);
		}
		resultMap.put("brandlist", brandList);
		/***********************
		 * 선택된 카테고리의 노출 상품 COLOR 목록 조회
		 **********************/
		List<SOMap> colorList = goodsMapper.selectColorList(param);
		for (SOMap item : colorList) {
			item.put("checked", false);
		}
		resultMap.put("colorlist", colorList);
		/***********************
		 * 선택된 카테고리의 혜택 목록 조회
		 **********************/
		//SOMap benefitinfo = goodsMapper.selectBenefitList(param);
		SOMap benefitinfo = goodsMapper.selectBenefitList_tuning_view(param);
		List<SOMap> benefitList = new ArrayList<>();
		if (benefitinfo != null) {
			SOMap temp = new SOMap();
			if (benefitinfo.getStr("isdeli").equals("T")) {
				temp.put("id", "freeDeli");
				temp.put("name", "무료배송");
				temp.put("checked", false);
				benefitList.add(temp);
			}
			if (benefitinfo.getStr("iscounpon").equals("T")) {
				SOMap temp2 = new SOMap();
				temp2.put("id", "goodscoupon");
				temp2.put("name", "상품쿠폰");
				temp2.put("checked", false);
				benefitList.add(temp2);
			}
		}
		resultMap.put("benefitlist", benefitList);

		/***********************
		 * 선택된 카테고리의 추천 목록 조회
		 **********************/
		SOMap recominfo = goodsMapper.selectRecomList(param);
		List<SOMap> recomList = new ArrayList<>();
		if (recominfo != null) {
			SOMap temp = new SOMap();
			if (recominfo.getStr("isnewbadge").equals("T")) {
				temp.put("id", "isnewbadge");
				temp.put("name", "NEW");
				temp.put("checked", false);
				recomList.add(temp);
			}
			if (recominfo.getStr("isbestbadge").equals("T")) {
				SOMap temp2 = new SOMap();
				temp2.put("id", "isbestbadge");
				temp2.put("name", "BEST");
				temp2.put("checked", false);
				recomList.add(temp2);
			}
			if (recominfo.getStr("iscounpon").equals("T")) {
				SOMap temp2 = new SOMap();
				temp2.put("id", "iscounpon");
				temp2.put("name", "COUPON");
				temp2.put("checked", false);
				recomList.add(temp2);
			}
		}
		
		resultMap.put("recomlist", recomList);
		
		/***********************
		 * 선택된 카테고리의 아이콘설정 목록조회
		 **********************/
		SOMap giconInfo = goodsMapper.selectGiconList(param);
		List<SOMap> giconList = new ArrayList<>();
		if (giconInfo != null) {
			if (!"".equals(giconInfo.getStr("mugicontypenm"))) {
				String[] mugicontype = ((String) giconInfo.get("mugicontype")).split(",");
				int i = 0;
				String type[] = ((String) giconInfo.get("mugicontypenm")).split(",");
				if(type[0].equals("전체")) {
					for(int j=0; j<mugicontype.length; j++) {
						String mugicontypenm = "";
						SOMap temp2 = new SOMap();
						temp2.put("id", mugicontype[j]);
						if(mugicontype[j].equals("GCT001")) {
							mugicontypenm = "EXCLUSIVE";
						} else if(mugicontype[j].equals("GCT002")) {
							mugicontypenm = "LIMITED";
						} else if(mugicontype[j].equals("GCT003")) {
							mugicontypenm = "PRE-ORDER";
						}
						temp2.put("name", mugicontypenm);
						temp2.put("checked", false);
						giconList.add(temp2);
						i++;
					}
				} else {
					for(String mugicontypenm : ((String) giconInfo.get("mugicontypenm")).split(",")) {
						SOMap temp2 = new SOMap();
						temp2.put("id", mugicontype[i]);
						temp2.put("name", mugicontypenm);
						temp2.put("checked", false);
						giconList.add(temp2);
						i++;
					}
				}
			}
		}
		resultMap.put("giconlist", giconList);

		/***********************
		 * 선택된 카테고리의 노출 상품 평점 목록 조회
		 **********************/
		List<SOMap> ratingList = goodsMapper.selectRatingList(param);
		for (SOMap item : ratingList) {
			switch (item.getInt("rating")) {
			case 0:
				item.put("name", "☆☆☆☆☆");
				break;
			case 1:
				item.put("name", "★☆☆☆☆");
				break;
			case 2:
				item.put("name", "★★☆☆☆");
				break;
			case 3:
				item.put("name", "★★★☆☆");
				break;
			case 4:
				item.put("name", "★★★★☆");
				break;
			case 5:
				item.put("name", "★★★★★");
				break;
			default:
				break;
			}
			item.put("checked", false);
		}
		resultMap.put("ratinglist", ratingList);
		/***********************
		 * 선택된 카테고리의 노출 상품 최소, 최대가격 조회
		 **********************/
		//SOMap priceInfo = goodsMapper.selectGoodsPrice(param);
		SOMap priceInfo = goodsMapper.selectGoodsPrice_tuning_view(param);
		resultMap.put("priceinfo", priceInfo);
		return resultMap;
	}

	/**
	 * NEW 상품 목록 조회
	 */
	@Override
	public SOMap selectShopNewList(SOMap param) throws Exception {
		SOMap resultMap = new SOMap();
		param.put("siteid", cs.getStr("siteid"));
		param.put("userno", cs.getInt("authmemberno"));

		int page = param.getInt("currentpage");
		int startPage = (page > 1) ? ((page -1 ) * param.getInt("listcnt")) : 0;
		param.put("startpage", startPage);
		param.put("endpage", param.getInt("listcnt"));
		param.put("extype", "EXN001");

		if (Util.flag2Bool(cs.getStr("ismobile"))) {
			param.put("imgtype", CMConst.IMG_TYPE_GOODS_IMG_MO_M);
		} else {
			param.put("imgtype", CMConst.IMG_TYPE_GOODS_IMG_PC_M);
		}

		List<SOMap> shopNewList = shopEx12Mapper.selectFrontShopExList(param);
		resultMap.put("shopnewlist", shopNewList);
		int listTotal = shopEx12Mapper.selectFrontShopExListCnt(param);
		resultMap.put("listtotal", listTotal);

		return resultMap;
	}

	/**
	 * 전시 영역 이름 조회
	 */
	@Override
	public SOMap selectShopName(SOMap param) throws Exception {
		SOMap resultMap = new SOMap();
		param.put("siteid", cs.getStr("siteid"));
		SOMap shopname =  shopExNameMapper.selectShopExName(param);
		resultMap.put("shopname", shopname.getStr("exhibitname"));
		return resultMap;
	}

	/**
	 * 프로모션 목록 조회(전체, 이벤트, 기획전)
	 */
	@Override
	public List<SOMap> selectEventList(SOMap param) throws Exception {
		param.put("siteid", cs.getStr("siteid"));
		param.put("platform", cs.getStr("platform"));
		param.put("membertype", cs.getInt("authmemberno") == 0 ? CMConst.MEMBERTYPE_BASIC : cs.getStr("authmembertype"));
		param.put("memlvtype", cs.getInt("authmemberno") == 0 ? CMConst.MEMLVTYPE_BRONZE : cs.getStr("authmemlvtype"));
		param.put("imgtype",Util.flag2Bool(cs.getStr("ismobile")) ? CMConst.IMG_TYPE_EVENT_IMG_MAIN_MO : CMConst.IMG_TYPE_EVENT_IMG_MAIN_PC);

		int page = param.getInt("currentpage");
		int startPage = (page > 1) ? ((page -1 ) * param.getInt("listcnt")) : 0;
		param.put("startpage", startPage);
		param.put("endpage", param.getInt("listcnt"));

		if(Util.flag2Bool(param.getDbStr("init")) && !cs.getStr("platform").equals("MAC001")) {
			param.put("startpage", 0);
			param.put("endpage", startPage + param.getInt("listcnt"));
		}

		return dadaEventMapper.selectEventList(param);
	}

	@Override
	public int selectEventListCount(SOMap param) throws Exception {
		param.put("siteid", cs.getStr("siteid"));
		param.put("platform", cs.getStr("platform"));
		param.put("membertype", cs.getInt("authmemberno") == 0 ? CMConst.MEMBERTYPE_BASIC : cs.getStr("authmembertype"));
		param.put("memlvtype", cs.getInt("authmemberno") == 0 ? CMConst.MEMLVTYPE_BRONZE : cs.getStr("authmemlvtype"));
		param.put("imgtype",Util.flag2Bool(cs.getStr("ismobile")) ? CMConst.IMG_TYPE_EVENT_IMG_MAIN_MO : CMConst.IMG_TYPE_EVENT_IMG_MAIN_PC);

		return dadaEventMapper.selectEventListCount(param);
	}

	@Override
	public SOMap winnerAnnouncement(SOMap param) throws Exception {
		param.put("siteid", cs.getStr("siteid"));
		return boardPostMapper.selectEventFront(param);
	}

	@Override
	public List<SOMap> winnerList(SOMap param) throws Exception {
		return dadaEventEnterMapper.selectAdminDadaEventEnterByUserInfoList(param);
	}

	@Override
	public SOMap promotionDetail(SOMap param) throws Exception {
		param.put("siteid", cs.getStr("siteid"));
		param.put("platform", cs.getStr("platform"));
		param.put("membertype", cs.getInt("authmemberno") == 0 ? CMConst.MEMBERTYPE_BASIC : cs.getStr("authmembertype"));
		param.put("memlvtype", cs.getInt("authmemberno") == 0 ? CMConst.MEMLVTYPE_BRONZE : cs.getStr("authmemlvtype"));
		param.put("imgtype", CMConst.IMG_TYPE_BRAND_LOGO);

		dadaEventMapper.updateReadCnt(param.getStr("eventidx"));

		SOMap result = new SOMap();
		param.put("imgtype2",Util.flag2Bool(cs.getStr("ismobile")) ? CMConst.IMG_TYPE_EVENT_IMG_MAIN_MO : CMConst.IMG_TYPE_EVENT_IMG_MAIN_PC);
		result.put("list", dadaEventMapper.selectEventDetail(param));

		param.put("userno", cs.getInt("authmemberno"));
		param.put("imgtype",Util.flag2Bool(cs.getStr("ismobile")) ? CMConst.IMG_TYPE_GOODS_IMG_MO_B : CMConst.IMG_TYPE_GOODS_IMG_PC_B);
		//result.put("goodslist", dadaEventGoodsMapper.selectEventDtlGoodsList(param));
		result.put("goodslist", dadaEventGoodsMapper.selectEventDtlGoodsList_tuning_view(param));

		return result;
	}

	@Override
	@Transactional(propagation = Propagation.REQUIRED, rollbackFor = {Exception.class})
	public int insertComment(SOMap param) throws Exception {
		if (cs.getInt("authmemberno") == 0) {
			throw new BizException("로그인 후 이용해주세요.");
		}

		param.put("siteid", cs.getStr("siteid"));
		param.put("userno", cs.getInt("authmemberno"));

		SOMap memberInfo = memberMapper.selectMember(param);
		param.put("userid", memberInfo.get("userid"));

		Util util = new Util();
		String badWordList = bannedMapper.badWordList();

		String filterText = util.filterText(badWordList, param.getStr("comment"));
		if(!filterText.equals("")){
			throw new BizException("금칙어가 포함되어 있습니다. " + filterText);
		}

		return dadaEventCommentMapper.insertEventComment(param);
	}

	@Override
	public SOMap selectCommentList(SOMap param) throws Exception {
		param.put("userno", cs.getInt("authmemberno"));

		SOMap result = new SOMap();
		result.put("cmtlistcnt", dadaEventCommentMapper.selectCommentListDep0_Count(param));

		List<SOMap> cmtList = dadaEventCommentMapper.selectCommentListDep0(param);
		if(!cmtList.isEmpty()){
			for(SOMap list: cmtList){
				param.put("commentidx", list.get("commentidx"));
				list.put("reply", dadaEventCommentMapper.selectCommentListDep1(param));
			}
		}

		result.put("cmtlist", cmtList);

		return result;
	}

	@Override
	@Transactional(propagation = Propagation.REQUIRED, rollbackFor = {Exception.class})
	public int deleteComment(SOMap param) throws Exception {
		if (cs.getInt("authmemberno") == 0) {
			throw new BizException("로그인 후 이용해주세요.");
		}

		return dadaEventCommentMapper.deleteComment(param);
	}

	@Override
	@Transactional(propagation = Propagation.REQUIRED, rollbackFor = {Exception.class})
	public int updateComment(SOMap param) throws Exception {
		if (cs.getInt("authmemberno") == 0) {
			throw new BizException("로그인 후 이용해주세요.");
		}

		return dadaEventCommentMapper.updateComment(param);
	}

	@Override
	@Transactional(propagation = Propagation.REQUIRED, rollbackFor = {Exception.class})
	public int repReport(SOMap param) throws Exception {
		if (cs.getInt("authmemberno") == 0) {
			throw new BizException("로그인 후 이용해주세요.");
		}
		param.put("userno", cs.getInt("authmemberno"));

		if(evtCommentReportMapper.selectReportCommentCnt(param) > 0) {
			throw new BizException("이미 신고한 댓글입니다.");
		}

		return evtCommentReportMapper.insertReportComment(param);
	}

	/**
	 * 검색 필터 목록 조회
	 */
	@Override
	public SOMap selectSearchFilterList(SOMap param) throws Exception {
		SOMap resultMap = new SOMap();

		param.put("siteid", cs.getStr("siteid"));
		param.put("userno", cs.getInt("authmemberno"));
		param.put("muappchtype", cs.getStr("platform"));

		if (param.getInt("userno") == 0) {
			param.put("mumembertype", "DMT001"); // 일반회원
			param.put("mumemlvtype", "MDL001"); // 브론즈
		} else {
			param.put("mumembertype", cs.getStr("authmembertype"));
			param.put("mumemlvtype", cs.getStr("authmemlvtype"));
		}
		List<SOMap> cateList = new ArrayList<>();
		/***********************
		 * 카테고리 목록 조회
		 **********************/
		if (param.getArrayList("catelist").size() > 0) {
			cateList = categoryMapper.selectSearchCateList(param);
		}
		/***********************
		 * 선택된 카테고리의 노출 상품 BRAND 목록 조회
		 **********************/
		List<SOMap> brandList = new ArrayList<>();
		if (param.getArrayList("brandlist").size() > 0) {
			param.put("imgtype", Util.flag2Bool(cs.getStr("ismobile")) ? CMConst.IMG_TYPE_BRAND_IMG_MO
					: CMConst.IMG_TYPE_BRAND_IMG_PC);
			brandList = brandMapper.selectSearchBrand(param);
			int cnt =0;
			for (SOMap item : brandList) {
				if (cnt < 10) {
					item.put("show", true);
				}else {
					item.put("show", false);
				}
				cnt++;
			}
		}
		/***********************
		 * 선택된 카테고리의 노출 상품 COLOR 목록 조회
		 **********************/
		List<SOMap> colorList = new ArrayList<>();
		if (param.getArrayList("colorlist").size() > 0) {
			colorList = goodsOptionDetailMapper.selectFilterColorList(param);
		}
		resultMap.put("catelist", cateList);
		resultMap.put("brandlist", brandList);
		resultMap.put("colorlist", colorList);
		return resultMap;
	}

	@Override
	public SOMap simpleGoodsDetail(SOMap param) throws Exception {

		param.put("siteid", cs.getStr("siteid"));
		param.put("userno", cs.getInt("authmemberno"));
		param.put("platform", cs.getStr("platform"));
		if (Util.flag2Bool(cs.getStr("ismobile"))) {
			param.put("imgtype", CMConst.IMG_TYPE_GOODS_IMG_MO_B);
		} else {
			param.put("imgtype", CMConst.IMG_TYPE_GOODS_IMG_PC_B);
		}

		return goodsMapper.selectFrontGoodsDetail(param);
	}

	@Override
	public SOMap simpleBrandDetail(SOMap param) throws Exception {
		param.put("siteid", cs.getStr("siteid"));

		if (Util.flag2Bool(cs.getStr("ismobile"))) {
			param.put("imgtype", CMConst.IMG_TYPE_BRAND_IMG_MO);
		} else {
			param.put("imgtype", CMConst.IMG_TYPE_BRAND_IMG_PC);
		}

		return brandMapper.selectFrontBrandDetail(param);
	}

	@Override
	public SOMap simplePromotionDetail(SOMap param) throws Exception {
		param.put("siteid", cs.getStr("siteid"));

		if (Util.flag2Bool(cs.getStr("ismobile"))) {
			param.put("imgtype", CMConst.IMG_TYPE_EVENT_IMG_MAIN_MO);
		} else {
			param.put("imgtype", CMConst.IMG_TYPE_EVENT_IMG_MAIN_PC);
		}

		return dadaEventMapper.selectEventSimpleDetail(param);
	}

}
