package com.dplot.admin.service.promotion;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.dplot.common.CMConst;
import com.dplot.common.SOMap;
import com.dplot.common.service.util.MallBaseService;
import com.dplot.exception.CustomException;
import com.dplot.mapper.CouponCateMapper;
import com.dplot.mapper.CouponGoodsMapper;
import com.dplot.mapper.CouponInfoMapper;
import com.dplot.mapper.CouponIssueMapper;
import com.dplot.mapper.CouponMapper;
import com.dplot.mapper.CouponMemberMapper;
import com.dplot.mapper.CouponMemissueMapper;
import com.dplot.mapper.CouponOrdCateMapper;
import com.dplot.mapper.CouponOrdGoodsMapper;
import com.dplot.mapper.IFLogMapper;
import com.dplot.util.DateTimeUtil;
import com.dplot.util.Util;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

/**
 * @discription	:
 * @fileName	: AdminCouponServiceImpl.java
 * @author		: JSK
 * @date		: 2022.01.18
 * =================================================================
 * DATE			AUTHOR		NOTE
 * -----------------------------------------------------------------
 * 2022.01.18	JSK			최초생성
 * -----------------------------------------------------------------
 */
@Service
public class AdminCouponServiceImpl extends MallBaseService implements AdminCouponService {
    private static final Logger logger = LoggerFactory.getLogger(AdminCouponServiceImpl.class);

    @Autowired
    private CouponMapper couponMapper;
    @Autowired
    private CouponInfoMapper couponInfoMapper;
    @Autowired
    private CouponMemberMapper couponMemberMapper;
    @Autowired
    private CouponGoodsMapper couponGoodsMapper;
    @Autowired
    private CouponCateMapper couponCateMapper;
    @Autowired
    private CouponOrdGoodsMapper couponOrdGoodsMapper;
    @Autowired
    private CouponOrdCateMapper couponOrdCateMapper;
    @Autowired
    private CouponMemissueMapper couponMemissueMapper;
    @Autowired
    private CouponIssueMapper couponIssueMapper;
	@Autowired
	private IFLogMapper ifLogMapper;

    /**
     * 쿠폰 조회
     * @param params
     * @return SOMap
     * @throws Exception
     */
    @Override
    public SOMap selectCouponList(SOMap params) throws Exception {
        SOMap result = new SOMap();
        params.put("siteid", cs.getStr("siteid"));

        // 페이징 처리
        int page = Integer.parseInt(params.get("page").toString());
        int pageCount = Integer.parseInt(params.get("pagecount").toString());
        int startPage = (page > 1) ? ((page - 1) * pageCount) : 0;
        params.put("startpage", startPage);
        params.put("endpage", pageCount);

        result.put("list", couponMapper.selectCouponList(params));
        result.put("count", couponMapper.selectCouponStateList(params));
        return result;
    }

	/**
	 * 쿠폰목록 조회 (엑셀용)
	 * @param params
	 * @return List<Map<String, Object>>
     * @throws Exception
	 */
    @Override
    public List<Map<String, Object>> selectCouponListForExcel(HashMap<String, Object> params) throws Exception{
    	params.put("siteid", cs.getStr("siteid"));
    	return couponMapper.selectCouponListForExcel(params);
    }

    /**
     * 쿠폰 상세정보 조회
     * @param params
     * @return SOMap
     * @throws Exception
     */
    @Override
    public SOMap selectCouponInfo(SOMap params) throws Exception {
        SOMap result = new SOMap();
        params.put("siteid", cs.getStr("siteid"));

        // 쿠폰 정보조회
        SOMap couponMap = couponMapper.selectCouponDetail(params);
        result.put("info", couponMap);

        // 쿠폰 대상회원 목록조회
        params.put("filetype", CMConst.FILE_TYPE_IMG);			// 파일타입_이미지
        params.put("imgtype", CMConst.IMG_TYPE_GOODS_IMG_PC_S);	// 이미지구분_상품_PC이미지_소
        result.put("issuetargetmemberlist", couponMemberMapper.selectCouponMemberList(params));
        // 쿠폰 대상카테고리 목록조회
        result.put("cpncatelist", couponCateMapper.selectCouponCateList(params));
        // 쿠폰 대상상품 목록조회
        result.put("cpngoodslist", couponGoodsMapper.selectCouponGoodsList(params));
        // 구매확정 대상카테고리 목록조회
        result.put("cpnordcatelist", couponOrdCateMapper.selectCouponOrdCateList(params));
        // 구매확정 대상상품 목록조회
        result.put("cpnordgoodslist", couponOrdGoodsMapper.selectCouponOrdGoodsList(params));
        // 쿠폰 발급중지/재개이력 목록조회
        result.put("couponissueList", couponIssueMapper.selectCouponIssueList(params));

        return result;
    }

    /**
     * 쿠폰 저장
     * @param params
     * @return int
     * @throws Exception
     */
    @Override
    @Transactional(propagation = Propagation.REQUIRED, rollbackFor = {CustomException.class, Exception.class})
    public int saveCoupon(SOMap params) throws Exception {
    	int resultCnt = 0;

        try {
        	// 쿠폰 파라미터 세팅
        	params.put("siteid", cs.getStr("siteid"));
        	
        	/** 쿠폰 옵션 셋팅 함수 호출 */ 
        	params = setCouponParams(params);

			// 쿠폰 등록
        	resultCnt = couponMapper.insertCoupon(params);
        	// 쿠폰정보 등록
        	couponInfoMapper.insertCouponInfo(params);

        	// 쿠폰발급이력 저장
        	if (Util.equal(params.getStr("iscouponissue"), "T")) {
        		params.put("cpnistype", CMConst.CPN_IS_START);	// 발급시작
            	couponIssueMapper.insertCouponIssue(params);
        	}

        	// 특정회원인 경우 쿠폰대상사용자 저장
			if (Util.equal(params.getStr("ismemtype"), "F")) {
				List<Map<String, Object>> issueTargetMemberList = params.getArrayList("issuetargetmemberlist");
				if (issueTargetMemberList != null &&issueTargetMemberList.size() > 0) {
					couponMemberMapper.insertCouponMember(params);
				}
			}

        	// 쿠폰적용대상 특정카테고리인경우 쿠폰카테고리 저장
			if (Util.equal(params.getStr("istotcate"), "F")) {
				List<Map<String, Object>> cpncateList = params.getArrayList("cpncatelist");
				if (cpncateList != null && cpncateList.size() > 0) {
					couponCateMapper.insertCouponCate(params);
				}
			}

			// 쿠폰적용대상 특정상품 추가제외인 경우 쿠폰상품 저장
			if (!Util.equal(params.getStr("goodsrangetype"), CMConst.GOODS_RANGE_ALL)) {
				List<Map<String, Object>> cpngoodsList = params.getArrayList("cpngoodslist");
				if (cpngoodsList != null && cpngoodsList.size() > 0) {
					couponGoodsMapper.insertCouponGoods(params);
				}
			}

			// 구매확정보상, 재구매확정인 경우
			if (Util.equal(params.getStr("cpnissuetype"), CMConst.CPN_ISSUE_PURCH_CONFIRM) && Util.equal(params.getStr("isfirstord"), "F")) {
				// 구매확정대상 특정카테고리인경우 쿠폰카테고리 저장
				if (Util.equal(params.getStr("isordtotcate"), "F")) {
					List<Map<String, Object>> cpnordcateList = params.getArrayList("cpnordcatelist");
					if (cpnordcateList != null && cpnordcateList.size() > 0) {
						couponOrdCateMapper.insertCouponOrdCate(params);
					}
				}

				// 구매확정대상 특정상품 추가제외인 경우 쿠폰상품 저장
				if (!Util.equal(params.getStr("ordgdrangetype"), CMConst.GOODS_RANGE_ALL)) {
					List<Map<String, Object>> cpnordgoodsList = params.getArrayList("cpnordgoodslist");
					if (cpnordgoodsList != null && cpnordgoodsList.size() > 0) {
						couponOrdGoodsMapper.insertCouponOrdGoods(params);
					}
				}
			}

			// ERP 로그 INSERT
			SOMap ifLogMap = new SOMap();
			ifLogMap.put("siteid", params.get("siteid"));
			ifLogMap.put("type", CMConst.ERP_COUPON_TYPE);
			ifLogMap.put("aud", CMConst.IF_LOG_ADD);
			ifLogMap.put("orgno", params.get("comcpnidx"));
			ifLogMapper.insertIfLogERPData(ifLogMap);
        } catch(CustomException e){
            logger.error(e.getMessage());
            throw e;
        }  catch(Exception e){
            logger.error(e.getMessage());
            throw new CustomException("쿠폰 저장시 오류가 발생하였습니다. 관리자에게 문의해주세요.");
        }

        return resultCnt;
    }

    /**
     * 쿠폰 수정
     * @param params
     * @return int
     * @throws Exception
     */
    @Override
    @Transactional(propagation = Propagation.REQUIRED, rollbackFor = {CustomException.class, Exception.class})
    public int updateCoupon(SOMap params) throws CustomException {
    	int resultCnt = 0;

        try {
        	// 쿠폰 파라미터 세팅
        	params.put("siteid", cs.getStr("siteid"));
        	params = setCouponParams(params);


            // 정기발급 발급전 쿠폰이 하나이상이고 전체쿠폰수보다 발급전쿠폰수가 적을때 사용여부만 수정 가능, 그외 발급이력 없는 경우 전체 수정 가능
            if(!(Util.equal(params.getStr("cpnissuetype"), CMConst.CPN_ISSUE_REGULAR) && params.getInt("bfissuecnt") > 0 && params.getInt("totcpncnt") > params.getInt("bfissuecnt"))) {
            	// 발급이력이 있는 경우 수정 불가
            	int couponIssueCnt = couponIssueMapper.selectCouponIssueCnt(params);
            	if (couponIssueCnt > 0) {
            		//throw new CustomException("발급이력이 존재는 쿠폰은 수정이 불가능합니다.");

    				// 구매확정대상 특정상품 추가제외인 경우 쿠폰상품 저장
            		couponGoodsMapper.deleteCouponGoods(params);

    				if (!Util.equal(params.getStr("ordgdrangetype"), CMConst.GOODS_RANGE_ALL)) {
    					List<Map<String, Object>> cpnordgoodsList = params.getArrayList("cpnordgoodslist");
    					if (cpnordgoodsList != null && cpnordgoodsList.size() > 0) {
    						couponOrdGoodsMapper.insertCouponOrdGoods(params);
    					}
    				}
	    			if (!Util.equal(params.getStr("goodsrangetype"), CMConst.GOODS_RANGE_ALL)) {
	    				List<Map<String, Object>> cpngoodsList = params.getArrayList("cpngoodslist");
	    				if (cpngoodsList != null && cpngoodsList.size() > 0) {
	    					couponGoodsMapper.insertCouponGoods(params);
	    				}
	    			}
            	}
            	else {

	            	// 쿠폰 수정
	            	resultCnt = couponMapper.updateCoupon(params);


	            	// 쿠폰정보 수정 (정기발급 고려해서 삭제 후 재등록)
	        		couponInfoMapper.deleteCouponInfo(params);
	        		couponInfoMapper.insertCouponInfo(params);

	            	// 발급이력 저장
	            	if (Util.equal(params.getStr("iscouponissue"), "T")) {
	            		params.put("cpnistype", CMConst.CPN_IS_START);	// 발급시작
	                	couponIssueMapper.insertCouponIssue(params);
	            	}

	            	// 특정회원인 경우 쿠폰대상사용자 저장
	            	couponMemberMapper.deleteCouponMember(params);
	    			if (Util.equal(params.getStr("ismemtype"), "F")) {
	    				List<Map<String, Object>> issueTargetMemberList = params.getArrayList("issuetargetmemberlist");
	    				if (issueTargetMemberList != null &&issueTargetMemberList.size() > 0) {
	    					couponMemberMapper.insertCouponMember(params);
	    				}
	    			}

	            	// 쿠폰적용대상 특정카테고리인경우 쿠폰카테고리 저장
	    			couponCateMapper.deleteCouponCate(params);
	    			if (Util.equal(params.getStr("istotcate"), "F")) {
	    				List<Map<String, Object>> cpncateList = params.getArrayList("cpncatelist");
	    				if (cpncateList != null && cpncateList.size() > 0) {
	    					couponCateMapper.insertCouponCate(params);
	    				}
	    			}

	    			// 쿠폰적용대상 특정상품 추가제외인 경우 쿠폰상품 저장
	    			couponGoodsMapper.deleteCouponGoods(params);
	    			if (!Util.equal(params.getStr("goodsrangetype"), CMConst.GOODS_RANGE_ALL)) {
	    				List<Map<String, Object>> cpngoodsList = params.getArrayList("cpngoodslist");
	    				if (cpngoodsList != null && cpngoodsList.size() > 0) {
	    					couponGoodsMapper.insertCouponGoods(params);
	    				}
	    			}

	    			// 구매확정보상, 재구매확정인 경우
	    			couponOrdCateMapper.deleteCouponOrdCate(params);
	    			couponOrdGoodsMapper.deleteCouponOrdGoods(params);
	    			if (Util.equal(params.getStr("cpnissuetype"), CMConst.CPN_ISSUE_PURCH_CONFIRM) && Util.equal(params.getStr("isfirstord"), "F")) {
	    				// 구매확정대상 특정카테고리인경우 쿠폰카테고리 저장
	    				if (Util.equal(params.getStr("isordtotcate"), "F")) {
	    					List<Map<String, Object>> cpnordcateList = params.getArrayList("cpnordcatelist");
	    					if (cpnordcateList != null && cpnordcateList.size() > 0) {
	    						couponOrdCateMapper.insertCouponOrdCate(params);
	    					}
	    				}

	    				// 구매확정대상 특정상품 추가제외인 경우 쿠폰상품 저장
	    				if (!Util.equal(params.getStr("ordgdrangetype"), CMConst.GOODS_RANGE_ALL)) {
	    					List<Map<String, Object>> cpnordgoodsList = params.getArrayList("cpnordgoodslist");
	    					if (cpnordgoodsList != null && cpnordgoodsList.size() > 0) {
	    						couponOrdGoodsMapper.insertCouponOrdGoods(params);
	    					}
	    				}
	    			}
            	}
            }

			// ERP 로그 INSERT
			SOMap ifLogMap = new SOMap();
			ifLogMap.put("siteid", params.get("siteid"));
			ifLogMap.put("type", CMConst.ERP_COUPON_TYPE);
			ifLogMap.put("aud", CMConst.IF_LOG_UPDATE);
			ifLogMap.put("orgno", params.get("comcpnidx"));
			ifLogMapper.insertIfLogERPData(ifLogMap);
        } catch(CustomException e){
            logger.error(e.getMessage());
            throw e;
        } catch(Exception e){
            logger.error(e.getMessage());
            throw new CustomException("쿠폰 저장시 오류가 발생하였습니다. 관리자에게 문의해주세요.");
        }

        return resultCnt;
    }

    /**
     * 쿠폰 발급중지/재개 내역 조회
     * @param params
     * @return SOMap
     * @throws Exception
     */
    @Override
    public SOMap selectCouponIssueInfo(SOMap params) throws Exception {
        SOMap result = couponIssueMapper.selectLastCouponIssueDetail(params);
        return result;
    }

    /**
     * 쿠폰 발급중지/재개
     * @param params
     * @return int
     * @throws Exception
     */
    @Override
    @Transactional(propagation = Propagation.REQUIRED, rollbackFor = {CustomException.class, Exception.class})
    public int controllIssue(SOMap params) throws CustomException {
    	int resultCnt = 0;

        try {
			params.put("authuserid", cs.getStr("authuserid"));

			// 현재 쿠폰발급상태 조회
			SOMap cpnIssueStMap = couponInfoMapper.getCouponIssueSt(params);

			// 발급중지
			if(Util.equal(params.getStr("cpnistype"), CMConst.CPN_IS_STOP)) {
				// 발급중 상태의 쿠폰만 중단 가능
				if (!Util.equal(cpnIssueStMap.getStr("cpnissuest"), CMConst.CPN_ISSUE_ST_ISSUE)) {
		            throw new CustomException("발급중인 쿠폰만 중단이 가능합니다.");
				}
				// 즉시중지
				if (Util.equal(params.getStr("isnowstop"), "T")) {
					params.put("cpnissuest", CMConst.CPN_ISSUE_ST_STOP);
					params.put("cpnstopstday", DateTimeUtil.getNowFormatStr(DateTimeUtil.MALL_DATE_FORMAT_VARCHAR12));
					params.put("cpnstopedday", null);
					// 쿠폰발급상태 변경
		        	resultCnt = couponInfoMapper.updateCouponIssueSt(params);

					// ERP 로그 INSERT
					SOMap ifLogMap = new SOMap();
					ifLogMap.put("siteid", cs.getStr("siteid"));
					ifLogMap.put("type", CMConst.ERP_COUPON_TYPE);
					ifLogMap.put("aud", CMConst.IF_LOG_UPDATE);
					ifLogMap.put("orgno", params.get("comcpnidx"));
					ifLogMapper.insertIfLogERPData(ifLogMap);
				}
			}
			// 발급재개
			else if (Util.equal(params.getStr("cpnistype"), CMConst.CPN_IS_RESTART)) {
				// 발급중지 상태의 쿠폰만 발급재개 가능
				if (!Util.equal(cpnIssueStMap.getStr("cpnissuest"), CMConst.CPN_ISSUE_ST_STOP)) {
		            throw new CustomException("발급중지된 쿠폰만 발급재개 가능합니다.");
				}
				// 즉시재개
				if (Util.equal(params.getStr("isnowrestart"), "T")) {
					params.put("cpnissuest", CMConst.CPN_ISSUE_ST_ISSUE);
					params.put("cpnrestartday", DateTimeUtil.getNowFormatStr(DateTimeUtil.MALL_DATE_FORMAT_VARCHAR12));
					// 쿠폰발급상태 변경
		        	resultCnt = couponInfoMapper.updateCouponIssueSt(params);

					// ERP 로그 INSERT
					SOMap ifLogMap = new SOMap();
					ifLogMap.put("siteid", cs.getStr("siteid"));
					ifLogMap.put("type", CMConst.ERP_COUPON_TYPE);
					ifLogMap.put("aud", CMConst.IF_LOG_UPDATE);
					ifLogMap.put("orgno", params.get("comcpnidx"));
					ifLogMapper.insertIfLogERPData(ifLogMap);
				}
			}

        	// 쿠폰발급이력 저장
        	couponIssueMapper.insertCouponIssue(params);

        } catch(CustomException e){
            logger.error(e.getMessage());
            throw e;
        } catch(Exception e){
            logger.error(e.getMessage());
            throw new CustomException("쿠폰 발급상태 변경시 오류가 발생하였습니다. 관리자에게 문의해주세요.");
        }

        return resultCnt;
    }

    /**
     * 쿠폰 삭제
     * @param params
     * @return int
     * @throws Exception
     */
    @Override
    @Transactional(propagation = Propagation.REQUIRED, rollbackFor = {Exception.class, CustomException.class})
    public int removeCoupon(SOMap params) throws Exception{
    	int resultCnt = 0;

        try {
        	ObjectMapper mapper = new ObjectMapper();
			List<SOMap> targetlist = mapper.convertValue(params.getArrayList("targetlist"), new TypeReference<List<SOMap>>(){});
			if (targetlist != null && targetlist.size() > 0) {
	        	params.put("siteid", cs.getStr("siteid"));
				params.put("authuserid", cs.getStr("authuserid"));

				for (SOMap cpninfoMap : targetlist) {
					// 사용여부 미사용으로 변경
					cpninfoMap.put("istrash", "T");
					cpninfoMap.put("siteid", params.get("siteid"));
					cpninfoMap.put("authuserid", params.get("authuserid"));
					couponMapper.updateCouponUse(cpninfoMap);

					// 발급전, 발급중 쿠폰인 경우 발급중지로 변경
					if(Util.equal(cpninfoMap.getStr("cpnissuest"), CMConst.CPN_ISSUE_ST_BEFORE) || Util.equal(cpninfoMap.getStr("cpnissuest"), CMConst.CPN_ISSUE_ST_ISSUE)) {
						cpninfoMap.put("isnowstop", "T");
						cpninfoMap.put("cpnissuest", CMConst.CPN_ISSUE_ST_STOP);
						cpninfoMap.put("cpnistype", CMConst.CPN_IS_STOP);
						cpninfoMap.put("cpnstopstday", DateTimeUtil.getNowFormatStr(DateTimeUtil.MALL_DATE_FORMAT_VARCHAR12));
						cpninfoMap.put("cpnstopedday", null);
						cpninfoMap.put("authuserid", params.get("authuserid"));
						// 쿠폰발급상태 변경
			        	couponInfoMapper.updateCouponIssueSt(cpninfoMap);
			        	// 쿠폰발급이력 저장
			        	couponIssueMapper.insertCouponIssue(cpninfoMap);
					}
				}
		    	// 관리자 목록에서 삭제
				resultCnt = couponInfoMapper.updateCouponCpnDelType(params);

		    	// 완전삭제인 경우 사용자 목록에서도 삭제
		    	if(Util.equal(params.getStr("cpndeltype"), CMConst.COUPON_MEMBER_DELETE)) {
		        	couponMemissueMapper.updateCouponMemissueUse(params);
		    	}

				// ERP 로그 INSERT
		    	String comcpnidxStr = targetlist.stream().map(a-> a.getStr("comcpnidx")).distinct().collect(Collectors.joining(","));
				SOMap ifLogMap = new SOMap();
				ifLogMap.put("siteid", params.get("siteid"));
				ifLogMap.put("type", CMConst.ERP_COUPON_TYPE);
				ifLogMap.put("aud", CMConst.IF_LOG_UPDATE);
				ifLogMap.put("orgnolist", Arrays.asList(comcpnidxStr.split(",")));
				ifLogMapper.insertIfLogERPData(ifLogMap);
			}

        } catch(Exception e){
            logger.error(e.getMessage());
            throw new CustomException("쿠폰삭제시 오류가 발생하였습니다. 관리자에게 문의해주세요.");
        }

        return resultCnt;
    }

	/**
	 * 발급/사용내역 조회
	 * @param params
	 * @return SOMap
     * @throws Exception
	 */
    @Override
    public SOMap selectMemissueList(SOMap params) throws Exception{
    	SOMap result = new SOMap();
        params.put("siteid", cs.getStr("siteid"));

        // 페이징 처리
        int page = Integer.parseInt(params.get("page").toString());
        int pageCount = Integer.parseInt(params.get("pagecount").toString());
        int startPage = (page > 1) ? ((page - 1) * pageCount) : 0;
        params.put("startpage", startPage);
        params.put("endpage", pageCount);

        result.put("list", couponMemissueMapper.selectCouponMemissueList(params));
        result.put("count", couponMemissueMapper.selectCouponMemissueListCount(params));
        return result;
    }

	/**
	 * 발급/사용내역 조회(엑셀용)
	 * @param params
	 * @return List<Map<String, Object>>
     * @throws Exception
	 */
    @Override
    public List<Map<String, Object>> selectMemissueListForExcel(HashMap<String, Object> params) throws Exception{
    	params.put("siteid", cs.getStr("siteid"));
    	params.put("startpage", 0);
    	params.put("endpage", CMConst.EXCEL_LIMIT_ROWS);
    	return couponMemissueMapper.selectMemissueListForExcel(params);
    }

    /**
     * 쿠폰 저장시 파라미터 세팅
     * @param params
     * @return SOMap
     * @throws CustomException
     */
    public SOMap setCouponParams(SOMap params) throws CustomException {
		try {
			params.put("authuserid", cs.getStr("authuserid"));

			// 쿠폰발급상태
			// - 즉시할인 : 무조건 발급전, 배치실행여부에 따라 상태변경(배치 실행 완료시 발급완료)
			// - 정기발급 : 무조건 발급전, 배치실행여부에 따라 상태변경(마지막 정기발급 배치 실행 완료시 발급완료)
			params.put("iscouponissue", "F");
			if (Util.equal(params.getStr("cpnissuetype"), CMConst.CPN_ISSUE_NOW_DISCOUNT) || Util.equal(params.getStr("cpnissuetype"), CMConst.CPN_ISSUE_REGULAR)) {
				params.put("cpnissuest", CMConst.CPN_ISSUE_ST_BEFORE);
			} else {
				// - 나머지 쿠폰중 사용기간 설정 : 무조건 발급전(사용시작일이 지나 배치가 실행되면 발급이 진행되며 사용종료일이 지나면 발급완료)
				if (Util.equal(params.getStr("cpnusetype"), CMConst.CPN_USE_PERIOD)) {
					params.put("cpnissuest", CMConst.CPN_ISSUE_ST_BEFORE);
				}
				// - 나머지 쿠폰중 사용기간이 발급일 기준 : 등록과 동시에 발급중(발급완료 상태가 존재하지 않음)
				// - 쿠폰 등록 후 쿠폰발급이력 등록
				else {
					params.put("cpnissuest", CMConst.CPN_ISSUE_ST_ISSUE);
					params.put("iscouponissue", "T");
				}
			}

			// 대상범위에 따른 대상회원유형, 등급 null 세팅
			if (Util.equal(params.getStr("ismemtype"), "F")) {
				params.put("mumembertype", null);
				params.put("mumemlvtype", null);
				List<Map<String, Object>> issueTargetMemberList = params.getArrayList("issuetargetmemberlist");
				if (issueTargetMemberList == null || issueTargetMemberList.size() == 0) {
					params.put("goodsrangetype", null);
				}
			}

			// 사용기간, 발급일시, 발급일기준쿠폰사용일, 정기발급쿠폰사용기간 세팅
			String cpnusestday = params.getStr("cpnusestday");
			String cpnuseedday = params.getStr("cpnuseedday");
			String cpnissueday = params.getStr("cpnissueday");
			String issuedaycnt = params.getStr("issuedaycnt");
			List<SOMap> couponInfoList = new ArrayList<SOMap>();	// 정기발급시 사용
			String evrcpnusestday = params.getStr("evrcpnusestday");
			String evrcpnuseedday = params.getStr("evrcpnuseedday");
	    	int issueNum = 0;

			// - 즉시할인인 경우 사용기간(발급정보) 세팅
			if (Util.equal(params.getStr("cpnissuetype"), CMConst.CPN_ISSUE_NOW_DISCOUNT)) {
				// 즉시발급인 경우 발급일시 세팅
				if (Util.equal(params.getStr("isnowissue"), "T")) {
					cpnissueday = DateTimeUtil.getNowFormatStr(DateTimeUtil.MALL_DATE_FORMAT_VARCHAR12);
				}

				// 사용기간 종류에 따른 일자 세팅
				if (Util.equal(params.getStr("cpnusetype"), CMConst.CPN_USE_PERIOD)) {			// 기간설정
					issuedaycnt = null;
				} else if (Util.equal(params.getStr("cpnusetype"), CMConst.CPN_USE_DAY_CNT)) {	// 발급일기준
					cpnusestday = cpnissueday;
					//cpnuseedday = String.format("%s%s", DateTimeUtil.addDays(String.format("%s%s", cpnissueday, "00"), params.getInt("issuedaycnt"), DateTimeUtil.MALL_DATE_FORMAT_DATE_SHORT), "2359");
					cpnuseedday = "209912312359";		// 다운일 기준 쿠폰은 종료기간이 없어야 함. 없애지 못하므로 2099년말까지 셋팅. 고객이 다운받으면 다운일 기준으로 issuedaycnt를 더하야 다시 업데이트 함 (2022-11-01, James)
				} else if (Util.equal(params.getStr("cpnusetype"), CMConst.CPN_USE_LAST_DAY)) {	// 발급당월말일까지
					issuedaycnt = null;
					cpnusestday = cpnissueday;
					cpnuseedday = String.format("%s%s%s", cpnissueday.substring(0, 6), String.valueOf(DateTimeUtil.getLastMonthDay(String.format("%s%s", cpnissueday, "00"))), "2359");
				}
				evrcpnusestday = null;
				evrcpnuseedday = null;
			}
			// - 정기발급인 경우 사용기간(발급정보) 목록 세팅
			else if (Util.equal(params.getStr("cpnissuetype"), CMConst.CPN_ISSUE_REGULAR)) {
				SimpleDateFormat format = new SimpleDateFormat(DateTimeUtil.MALL_DATE_FORMAT_VARCHAR12);
				Date dateCpnissueday = new Date();
				Date dateEvrcpnusestday = format.parse(evrcpnusestday);
				Date dateEvrcpnuseedday = format.parse(evrcpnuseedday);
				// 즉시발급인 경우 발급일시 세팅
				if (Util.equal(params.getStr("isnowissue"), "T")) {
					cpnissueday = DateTimeUtil.getNowFormatStr(DateTimeUtil.MALL_DATE_FORMAT_VARCHAR12);
				}

				// 정기발급 매일발급인 경우만 정기발급 사용기간, 발급일시 체크
				if (Util.equal(params.getStr("iseveryday"), "T")) {
					dateCpnissueday = format.parse(cpnissueday);
					if (dateEvrcpnusestday.compareTo(dateCpnissueday) > 0 || dateCpnissueday.compareTo(dateEvrcpnuseedday) > 0) {
						throw new CustomException("발급일시는 정기발급 사용기간 내로 입력해야 합니다.");
					}
				}

		    	// 정기발급 쿠폰정보 세팅
				params.put("everyhhmm", String.format("%s%s", params.getStr("everyhh").substring(0,2), params.getStr("everymm").substring(0,2)));
				// 1. 발급일기준
				if (Util.equal(params.getStr("cpnusetype"), CMConst.CPN_USE_DAY_CNT)) {
					// 1-1. 발급후 O일마다 OO시 OO분 발급
					if (Util.equal(params.getStr("iseveryday"), "T")) {
						// 즉시발급인 경우 발급일시 세팅
						if (Util.equal(params.getStr("isnowissue"), "T")) {
							cpnissueday = DateTimeUtil.getNowFormatStr(DateTimeUtil.MALL_DATE_FORMAT_VARCHAR12);
						}

						// 첫번째 쿠폰정보 세팅
						SOMap frstCpnInfoMap = new SOMap();
						cpnusestday = cpnissueday;
						cpnuseedday = String.format("%s%s", DateTimeUtil.addDays(String.format("%s%s", cpnissueday, "00"), params.getInt("issuedaycnt"), DateTimeUtil.MALL_DATE_FORMAT_DATE_SHORT), "2359");
						frstCpnInfoMap.put("cpnissueday", cpnissueday);
						frstCpnInfoMap.put("cpnusestday", cpnusestday);
						frstCpnInfoMap.put("cpnuseedday", cpnuseedday);
						frstCpnInfoMap.put("issueNum", ++issueNum);
						couponInfoList.add(frstCpnInfoMap);

						// 재발급 쿠폰정보 세팅
						dateCpnissueday = format.parse(cpnissueday);
						while(dateCpnissueday.compareTo(dateEvrcpnuseedday) <= 0) {
							cpnissueday = DateTimeUtil.addDays(String.format("%s%s%s", cpnissueday.substring(0,8), params.getStr("everyhhmm"), "00"), params.getInt("everydayloop"), DateTimeUtil.MALL_DATE_FORMAT_VARCHAR12);
							dateCpnissueday = format.parse(cpnissueday);
							if (dateCpnissueday.compareTo(dateEvrcpnuseedday) > 0) {
								break;
							}
							cpnusestday = cpnissueday;
							cpnuseedday = String.format("%s%s", DateTimeUtil.addDays(String.format("%s%s", cpnissueday, "00"), params.getInt("issuedaycnt"), DateTimeUtil.MALL_DATE_FORMAT_DATE_SHORT), "2359");
							// 쿠폰정보 목록에 추가
							SOMap evrCpnInfoMap = new SOMap();
							evrCpnInfoMap.put("cpnissueday", cpnissueday);
							evrCpnInfoMap.put("cpnusestday", cpnusestday);
							evrCpnInfoMap.put("cpnuseedday", cpnuseedday);
							evrCpnInfoMap.put("issuenum", ++issueNum);
							couponInfoList.add(evrCpnInfoMap);
						}
					}
					// 1-2. 매월 O일마다 OO시 OO분 발급
					else if (Util.equal(params.getStr("iseveryday"), "F")) {
						// 첫번째 쿠폰정보 세팅
						SOMap frstCpnInfoMap = new SOMap();
						cpnissueday = String.format("%s%s%s", evrcpnusestday.substring(0,6), StringUtils.leftPad(params.getStr("everymonthloop"),2,"0"), params.getStr("everyhhmm"));
						dateCpnissueday = format.parse(cpnissueday);
						if (dateCpnissueday.compareTo(dateEvrcpnusestday) < 0) {
							cpnissueday = DateTimeUtil.addMonths(String.format("%s%s", cpnissueday, "00"), 1, DateTimeUtil.MALL_DATE_FORMAT_VARCHAR12);
						}
						cpnusestday = cpnissueday;
						cpnuseedday = String.format("%s%s", DateTimeUtil.addDays(String.format("%s%s", cpnissueday, "00"), params.getInt("issuedaycnt"), DateTimeUtil.MALL_DATE_FORMAT_DATE_SHORT), "2359");
						frstCpnInfoMap.put("cpnissueday", cpnissueday);
						frstCpnInfoMap.put("cpnusestday", cpnusestday);
						frstCpnInfoMap.put("cpnuseedday", cpnuseedday);
						frstCpnInfoMap.put("issueNum", ++issueNum);
						couponInfoList.add(frstCpnInfoMap);

						// 재발급 쿠폰정보 세팅
						dateCpnissueday = format.parse(cpnissueday);
						while(dateCpnissueday.compareTo(dateEvrcpnuseedday) <= 0) {
							cpnissueday = DateTimeUtil.addMonths(String.format("%s%s", cpnissueday, "00"), 1, DateTimeUtil.MALL_DATE_FORMAT_VARCHAR12);
							dateCpnissueday = format.parse(cpnissueday);
							if (dateCpnissueday.compareTo(dateEvrcpnuseedday) > 0) {
								break;
							}
							cpnusestday = cpnissueday;
							cpnuseedday = String.format("%s%s", DateTimeUtil.addDays(String.format("%s%s", cpnissueday, "00"), params.getInt("issuedaycnt"), DateTimeUtil.MALL_DATE_FORMAT_DATE_SHORT), "2359");
							// 쿠폰정보 목록에 추가
							SOMap evrCpnInfoMap = new SOMap();
							evrCpnInfoMap.put("cpnissueday", cpnissueday);
							evrCpnInfoMap.put("cpnusestday", cpnusestday);
							evrCpnInfoMap.put("cpnuseedday", cpnuseedday);
							evrCpnInfoMap.put("issuenum", ++issueNum);
							couponInfoList.add(evrCpnInfoMap);
						}
					}
				}
				// 2. 발급당월말일까지
				else if (Util.equal(params.getStr("cpnusetype"), CMConst.CPN_USE_LAST_DAY)) {
					issuedaycnt = null;

					// 2-1. 발급후 O일마다 OO시 OO분 발급
					if (Util.equal(params.getStr("iseveryday"), "T")) {
						// 즉시발급인 경우 발급일시 세팅
						if (Util.equal(params.getStr("isnowissue"), "T")) {
							cpnissueday = DateTimeUtil.getNowFormatStr(DateTimeUtil.MALL_DATE_FORMAT_VARCHAR12);
						}

						// 첫번째 쿠폰정보 세팅
						SOMap frstCpnInfoMap = new SOMap();
						cpnusestday = cpnissueday;
						cpnuseedday = String.format("%s%s%s", cpnissueday.substring(0,6), String.valueOf(DateTimeUtil.getLastMonthDay(String.format("%s%s", cpnissueday, "00"))), "2359");
						frstCpnInfoMap.put("cpnissueday", cpnissueday);
						frstCpnInfoMap.put("cpnusestday", cpnusestday);
						frstCpnInfoMap.put("cpnuseedday", cpnuseedday);
						frstCpnInfoMap.put("issueNum", ++issueNum);
						couponInfoList.add(frstCpnInfoMap);

						// 재발급 쿠폰정보 세팅
						dateCpnissueday = format.parse(cpnissueday);
						while(dateCpnissueday.compareTo(dateEvrcpnuseedday) <= 0) {
							cpnissueday = DateTimeUtil.addDays(String.format("%s%s%s", cpnissueday.substring(0,8), params.getStr("everyhhmm"), "00"), params.getInt("everydayloop"), DateTimeUtil.MALL_DATE_FORMAT_VARCHAR12);
							dateCpnissueday = format.parse(cpnissueday);
							if (dateCpnissueday.compareTo(dateEvrcpnuseedday) > 0) {
								break;
							}
							cpnusestday = cpnissueday;
							cpnuseedday = String.format("%s%s%s", cpnissueday.substring(0,6), String.valueOf(DateTimeUtil.getLastMonthDay(String.format("%s%s", cpnissueday, "00"))), "2359");
							// 쿠폰정보 목록에 추가
							SOMap evrCpnInfoMap = new SOMap();
							evrCpnInfoMap.put("cpnissueday", cpnissueday);
							evrCpnInfoMap.put("cpnusestday", cpnusestday);
							evrCpnInfoMap.put("cpnuseedday", cpnuseedday);
							evrCpnInfoMap.put("issuenum", ++issueNum);
							couponInfoList.add(evrCpnInfoMap);
						}
					}
					// 2-2. 매월 O일마다 OO시 OO분 발급
					else if (Util.equal(params.getStr("iseveryday"), "F")) {
						// 첫번째 쿠폰정보 세팅
						SOMap frstCpnInfoMap = new SOMap();
						cpnissueday = String.format("%s%s%s", evrcpnusestday.substring(0,6), StringUtils.leftPad(params.getStr("everymonthloop"),2,"0"), params.getStr("everyhhmm"));
						dateCpnissueday = format.parse(cpnissueday);
						if (dateCpnissueday.compareTo(dateEvrcpnusestday) < 0) {
							cpnissueday = DateTimeUtil.addMonths(String.format("%s%s", cpnissueday, "00"), 1, DateTimeUtil.MALL_DATE_FORMAT_VARCHAR12);
						}
						cpnusestday = cpnissueday;
						cpnuseedday = String.format("%s%s", DateTimeUtil.addDays(String.format("%s%s", cpnissueday, "00"), params.getInt("issuedaycnt"), DateTimeUtil.MALL_DATE_FORMAT_DATE_SHORT), "2359");
						frstCpnInfoMap.put("cpnissueday", cpnissueday);
						frstCpnInfoMap.put("cpnusestday", cpnusestday);
						frstCpnInfoMap.put("cpnuseedday", cpnuseedday);
						frstCpnInfoMap.put("issueNum", ++issueNum);
						couponInfoList.add(frstCpnInfoMap);

						// 재발급 쿠폰정보 세팅
						dateCpnissueday = format.parse(cpnissueday);
						while(dateCpnissueday.compareTo(dateEvrcpnuseedday) <= 0) {
							cpnissueday = DateTimeUtil.addMonths(String.format("%s%s", cpnissueday, "00"), 1, DateTimeUtil.MALL_DATE_FORMAT_VARCHAR12);
							dateCpnissueday = format.parse(cpnissueday);
							if (dateCpnissueday.compareTo(dateEvrcpnuseedday) > 0) {
								break;
							}
							cpnusestday = cpnissueday;
							cpnuseedday = String.format("%s%s%s", cpnissueday.substring(0,6), String.valueOf(DateTimeUtil.getLastMonthDay(String.format("%s%s", cpnissueday, "00"))), "2359");
							// 쿠폰정보 목록에 추가
							SOMap evrCpnInfoMap = new SOMap();
							evrCpnInfoMap.put("cpnissueday", cpnissueday);
							evrCpnInfoMap.put("cpnusestday", cpnusestday);
							evrCpnInfoMap.put("cpnuseedday", cpnuseedday);
							evrCpnInfoMap.put("issuenum", ++issueNum);
							couponInfoList.add(evrCpnInfoMap);
						}
					}
				}
				if (couponInfoList != null && couponInfoList.size() > 0) {
					cpnissueday = couponInfoList.get(0).getStr("cpnissueday");
				}
			}
			// - 즉시할인, 정기발급 아닌경우 사용기간 종류에 따른 일자(발급정보) 세팅
			else {
				if (Util.equal(params.getStr("cpnusetype"), CMConst.CPN_USE_PERIOD)) {			// 기간설정
					issuedaycnt = null;
				} else if (Util.equal(params.getStr("cpnusetype"), CMConst.CPN_USE_DAY_CNT)) {	// 발급일기준
					cpnusestday = null;
					cpnuseedday = null;
				} else if (Util.equal(params.getStr("cpnusetype"), CMConst.CPN_USE_LAST_DAY)) {	// 발급당월말일까지
					issuedaycnt = null;
					cpnusestday = null;
					cpnuseedday = null;
				}
				cpnissueday = null;
				evrcpnusestday = null;
				evrcpnuseedday = null;
			}
			params.put("issuedaycnt", issuedaycnt);
			params.put("cpnissueday", cpnissueday);
			params.put("cpnusestday", cpnusestday);
			params.put("cpnuseedday", cpnuseedday);
			params.put("evrcpnusestday", evrcpnusestday);
			params.put("evrcpnuseedday", evrcpnuseedday);
			params.put("totalissuecnt", couponInfoList.size());
			params.put("couponinfolist", couponInfoList);

			// 쿠폰종류, 정률여부에 따른 사용가능금액적용여부, 할인액, 할인율, 최대할인금액 세팅
			if (Util.equal(params.getStr("comcpntype"), CMConst.COM_CPN_DELIV)) {
				params.put("isorderlimit", "T");
				params.put("ispercent", null);
				params.put("disprice", null);
				params.put("dispercent", null);
			} else {
				if (Util.equal(params.getStr("isorderlimit"), "F")) {
					params.put("orlimitamt", null);
				}
				if (Util.equal(params.getStr("ispercent"), "T")) {
					params.put("disprice", null);
				} else if (Util.equal(params.getStr("ispercent"), "F")) {
					params.put("dispercent", null);
					params.put("maxdisamt", null);
				}
			}

			// 상품쿠폰이 아닌 경우 파트너사분담비율, 역마진체크여부 null
			if (!Util.equal(params.getStr("comcpntype"), CMConst.COM_CPN_GOODS)) {
				params.put("dadaratio", null);
				params.put("isrvmargin", null);
			}
			// 장바구니쿠폰이 아닌 경우 중복사용범위 null 세팅
			if (!Util.equal(params.getStr("comcpntype"), CMConst.COM_CPN_CART)) {
				params.put("mucpnduptype", null);
			}
			// 자동발급인 경우 쿠폰수량제한여부, 동일인재발급여부 세팅
			if (Util.equal(params.getStr("isautopay"), "T")) {
				params.put("iscntlimt", "F");
				params.put("isdupperson", "F");
			}
			// 쿠폰수량제한이 없는경우 쿠폰수량제한 null 세팅
			if (Util.equal(params.getStr("iscntlimt"), "F")) {
				params.put("cpnlimtcnt", null);
			}
			// 동일인재발급이 불가능한 경우 동일인재발급수량 null 세팅
			if (Util.equal(params.getStr("isdupperson"), "F")) {
				params.put("dupcnt", null);
			}
			// 생일쿠폰이 아닌 경우 생일당일여부 null 세팅
			if (!Util.equal(params.getStr("cpnissuetype"), CMConst.CPN_ISSUE_BIRTHDAY)) {
				params.put("isbirththeday", null);
			}
			// 생일당일이 아닌 경우 생일쿠폰생일전발급일수 null 세팅
			if (!Util.equal(params.getStr("isbirththeday"), "F")) {
				params.put("birthbfdaycnt", null);
			}
			// 정기발급이 아닌 경우 정기발급주기 null 세팅
			if (!Util.equal(params.getStr("cpnissuetype"), CMConst.CPN_ISSUE_REGULAR)) {
				params.put("iseveryday", null);
				params.put("everydayloop", null);
				params.put("everymonthloop", null);
				params.put("everyhhmm", null);
			}
			// 구매확정보상이 아닌 경우 구매확정정보 null 세팅
			if (!Util.equal(params.getStr("cpnissuetype"), CMConst.CPN_ISSUE_PURCH_CONFIRM)) {
				params.put("isfirstord", null);
				params.put("isordtotcate", null);
				params.put("ordgdrangetype", null);
			}
		} catch (CustomException e) {
            logger.error(e.getMessage());
            throw e;
		} catch (Exception e) {
            logger.error(e.getMessage());
            throw new CustomException("쿠폰 저장시 오류가 발생하였습니다. 관리자에게 문의해주세요.");
		}

    	return params;
    }
}
