package com.dplot.front.service;



import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.dplot.common.SOMap;
import com.dplot.common.service.util.MallBaseService;
import com.dplot.mapper.DadaEventMapper;
import com.dplot.mapper.FileMapper;

/**
 * 
 * @FileName : FrontEventServiceImpl.java
 * @Project : datapick_api
 * @Date : 2021. 11. 12. 
 * @Author : YIY
 * ============================================================
 *  DATE					AUTHOR			NOTE
 * ============================================================
 *  2021. 11. 12.			YIY			        최초작성
 * ------------------------------------------------------------
 *
 */
@Service
public class FrontEventServiceImpl extends MallBaseService implements FrontEventService {
	/** The Constant logger. */
	private static final Logger logger = LoggerFactory.getLogger(FrontEventServiceImpl.class);
	/** The BannerMapper. */
	@Autowired
	private DadaEventMapper dadaEventMapper;
	
	@Autowired
	private FileMapper fileMapper;

	/**
	 * 이벤트 리스트 전체조회
	 */
	@Override
	public SOMap selectEventFrontListSQL(SOMap param) throws Exception{
		SOMap resultMap = new SOMap();
		List<SOMap> eventList = dadaEventMapper.selectEventFrontListSQL(param);
		
		for(SOMap comment : eventList){
			comment.put("file", getFile(comment.get("eventidx"), new String[]{"IGT062"}));
		}
		resultMap.put("eventList", eventList);
		return resultMap;
	}


	/**
	 * 이벤트 상세조회
	 */
	@Override
	public SOMap selectEventFrontDetailSQL(SOMap param) throws Exception{
		SOMap resultMap = new SOMap();
		List<SOMap> eventDetails = dadaEventMapper.selectEventFrontDetailSQL(param);

		if(eventDetails.isEmpty()){// 항목이 존재하는지 여부
			resultMap.put("eventItem", new SOMap());
		}else{
			SOMap eventDetail = eventDetails.get(0);// 첫번째 항목
			eventDetail.put("file", getFile(eventDetail.get("eventidx"), new String[]{"IGT062"}));
			resultMap.put("eventItem",eventDetail);
		}
		return resultMap;
	}

	/**
	 * 이벤트 리스트 덧글 목록 조회
	 */
	@Override
	public SOMap selectEventFrontCommentSQL(SOMap param) throws Exception{
		SOMap resultMap = new SOMap();
		List<SOMap> eventCommantList = dadaEventMapper.selectEventFrontDetailCommetSQL(param);
		List<SOMap> eventState = dadaEventMapper.selectEventFrontDetailCommetLenthSQL(param);
		List<SOMap> eventPage = dadaEventMapper.selectEventFrontDetailCommetPage(param);
		resultMap.put("length",eventState.get(0).get("length"));
		resultMap.put("page",eventPage.get(0).get("page"));

		for(SOMap comment : eventCommantList){
			SOMap query = new SOMap();
			query.put("idx", comment.get("commentidx"));
			comment.put("file", getFile(comment.get("commentidx"), new String[]{"IGT023", "IGT024"}));

			List<SOMap> eventSubCommantList = dadaEventMapper.selectEventFrontDetailCommentSubSQL(query);
			comment.put("subcomment", eventSubCommantList);
		}
		
		resultMap.put("comments", eventCommantList);
		return resultMap;
	}

	SOMap getFile(Object orgidx, String[] types) throws Exception{
		SOMap fparam = new SOMap();
		fparam.put("imgtypes", types);
		fparam.put("orgidx", orgidx);
		List<SOMap> files = fileMapper.selectFileList(fparam);
		if(files.isEmpty()){
			return new SOMap();
		}else{
			return files.get(0);
		}
	}
}
