<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.dplot.mapper.ComOrderMapper">
<!--
    *****************************************************************
    *
	*  프론트 영역
	*
	*****************************************************************
-->
	<!-- 공통주문 목록 조회 -->
	<select id="selectComOrderList" parameterType="somap" resultType="somap">
		SELECT /* -- ComOrderMapper.xml selectComorderList(공통주문 조회) -- */
		ORDERIDX -- 주문IDX,
		, SITEID -- 사이트ID,
		, ORDNO -- 주문번호 숫자 14자리 (년월일 8자리 + 순번 6자리),
		, USERNO -- 주문회원일련번호,
		, ISNONMEMBER -- 비회원주문여부,
		, ORDPATHTYPE -- 주문경로로 MAC001:PC MAC002:모바일 MAC003:모바일APP ,
		, DATE_FORMAT(ORDERDATE, '%Y-%m-%d %H:%i:%s') AS ORDERDAY /* 주문일시 */
		, DATE_FORMAT(ORDERDATE, '%Y-%m-%d') AS ORDERDATE /* 주문일자 */
		, DATE_FORMAT(ORDERDATE, '%H:%i:%s') AS ORDERTIME /* 주문시간 */
		, DATE_FORMAT(PAYMENTDATE, '%Y-%m-%d %H:%i:%s') AS PAYMENTDAY /* 결제일시 */
		, DATE_FORMAT(PAYMENTDATE, '%Y-%m-%d') AS PAYMENTDATE /* 결제일자 */
		, DATE_FORMAT(PAYMENTDATE, '%H:%i:%s') AS PAYMENTTIME /* 결제시간 */
		, ORDTOTPRICE -- 주문총금액,
		, DADADELIVAMT -- 자사배송비,
		, PTNDELIVAMT -- 파트너배송비,
		, BASKETCPNAMT -- 장바구니쿠폰할인금액,
		, TOTSALEPROMOAMT -- 총프로모션 할인금액,
		, TOTGOODSCPNAMT -- 총상품쿠폰할인금액,
		, TOTDELIVCPNAMT -- 총배송비쿠폰할인금액,
		, BASKETCPNAMT -- 장바구니쿠폰할인금액,
		, PAYWAYTYPE -- 결제수단타입 PWT001:신용카드 PWT002:가상계좌 PWT003:계좌이체 PWT004:휴대폰 PWT005:네이버페이 ,
		, FN_GET_CODENAME(a.SITEID, 'PAYWAYTYPE', a.PAYWAYTYPE) as PAYWAYTYPENAME
		, PAYTOTPRICE -- 결제총금액,
		, RPAYTOTPRICE -- 실결제총금액,
		, ISGIFTORDER -- 선물주문여부,
		, ISFRSTORDER -- 첫구매여부,
		, MEMLVTYPE -- 회원등급
		, DADAMEMBERTYPE -- DMT001다다픽회원유형 DMT001:일반회원 DMT002:평생회원 DMT003:임직원1 DMT004:임직원2 DMT005:임원 DMT006:B2B(대량) DMT007:B2B(특판)
		, ORDTEL -- 주문자연락처,
		, ORDPOST -- 주문자우편번호,
		, ORDADDR -- 주문자주소,
		, ORDADDRDETAIL -- 주문자주소상세,
		, ORDADDRROAD -- 주문자주소도로명,
		, ORDADDRDETAILROAD -- 주문자주소상세도로명,
		, RCVNAME -- 수령인명,
		, RCVTEL1 -- 수령인연락처1,
		, RCVTEL2 -- 수령인연락처2,
		, RCVADDR -- 수령인주소,
		, RCVADDRDETAIL -- 수령인주소상세,
		, RCVADDRROAD -- 수령인주소도로명,
		, RCVADDRDETAILROAD -- 수령인주소상세도로명,
		, RCVREQTYPE -- 배송요청타입 RVT001:경비실 RVT002:문앞 RVT003:직접받고 부재시경비실 RVT004:직접받고 부재시 문앞 RVT005:택배함 RVT006:직접입력 ,
		, RCVREQDETAIL -- 배송요청사항,
		, ISTRASH -- 삭제여부
		FROM t_comorder a
		WHERE 1 = 1
		AND SITEID = #{siteid}
		AND ISTRASH = #{istrash}
		<if test='idx !=null and idx !="" '>/* -- 주문 idx -- */
			AND ORDERIDX = #{idx}
		</if>
		<if test='ordno !=null and ordno !="" '>/* -- 주문번호 -- */
			AND ORDNO = #{ordno}
		</if>
		<if test='orderidx !=null and orderidx !="" '>/* -- 주문번호 -- */
			AND ORDERIDX = #{orderidx}
		</if>
		<if test='userno !=null and userno !="" '>/* -- userid -- */
			AND USERNO = #{userno}
		</if>
	</select>

	<select id="selectComOrderNoneMember" parameterType="somap" resultType="somap">
		SELECT /* -- ComOrderMapper.xml selectComOrderNoneMember 비회원 주문조회 -- */
			  ORDERIDX -- 주문IDX
			, ORDNO -- 주문번호 숫자 14자리 (년월일 8자리 + 순번 6자리)
			, ORDNAME -- 주문자이름
		FROM T_COMORDER tc
		WHERE tc.SITEID = #{siteid}
		AND tc.ISNONMEMBER = 'T'
		AND tc.ORDNO = #{ordno}
		AND tc.ORDNAME = #{ordname}
	</select>

	<!-- 공통주문 상세 조회 -->
	<select id="selectComOrderInfo" parameterType="somap" resultType="somap">
	 SELECT /* -- ComOrderMapper.xml selectComOrderInfo(공통주문 조회) -- */
		  tc.ORDERIDX -- 주문IDX
		 ,(
        	SELECT group_concat(tcg.ORDGDIDX SEPARATOR ',')
        	FROM t_comorder_goods tcg
       		 WHERE tcg.ORDERIDX  = tc.ORDERIDX
     	  )  AS goodslist
	    , (
	    	SELECT GOODSNAME FROM T_COMORDER_GOODS A INNER JOIN T_GOODS B ON A.GOODSNO = B.GOODSNO
	        WHERE A.ORDERIDX = tc.ORDERIDX
	        ORDER BY B.GOODSNO
	        LIMIT 1
		) AS GOODSNAME
		, ORDNO -- 주문번호 숫자 14자리 (년월일 8자리 + 순번 6자리)
		, USERNO -- 주문회원일련번호
		, ISNONMEMBER -- 비회원주문여부
		, ORDPATHTYPE -- 주문경로로 MAC001:PC MAC002:모바일 MAC003:모바일APP
		, DATE_FORMAT(ORDERDATE, '%Y%m%d%H%i%s') AS ORDERDATE
		, DATE_FORMAT(ORDERDATE, '%Y-%m-%d %H:%i:%s') AS ORDERDAY 	-- 주문일시
		, DATE_FORMAT(ORDERDATE, '%Y-%m-%d') AS ORDERDT 			-- 주문일자
		, DATE_FORMAT(ORDERDATE, '%H:%i:%s') AS ORDERTIME 			-- 주문시간
		, DATE_FORMAT(PAYMENTDATE, '%Y%m%d%H%i%s') AS PAYMENTDATE
		, DATE_FORMAT(PAYMENTDATE, '%Y-%m-%d %H:%i:%s') AS PAYMENTDAY -- 결제일시
		, DATE_FORMAT(PAYMENTDATE, '%Y-%m-%d') AS PAYMENTDT 		-- 결제일자
		, DATE_FORMAT(PAYMENTDATE, '%H:%i:%s') AS PAYMENTTIME 		-- 결제시간
		, ORDTOTPRICE -- 주문총금액
		, DADADELIVAMT -- 자사배송비
		, PTNDELIVAMT -- 파트너배송비
		, BASKETCPNAMT -- 장바구니쿠폰할인금액
		, TOTSALEPROMOAMT -- 총프로모션 할인금액
		, TOTGOODSCPNAMT -- 총상품쿠폰할인금액
		, TOTDELIVCPNAMT -- 총배송비쿠폰할인금액
		, BASKETCPNAMT -- 장바구니쿠폰할인금액
		, PAYWAYTYPE -- 결제수단타입 PWT001:신용카드 PWT002:가상계좌 PWT003:계좌이체 PWT004:휴대폰 PWT005:네이버페이
		, FN_GET_CODENAME(SITEID, 'PAYWAYTYPE', PAYWAYTYPE) as PAYWAYTYPENAME
		, PAYTOTPRICE -- 결제총금액
		, RPAYTOTPRICE -- 실결제총금액
		, ISGIFTORDER -- 선물주문여부
		, ISFRSTORDER -- 첫구매여부
		, MEMLVTYPE -- 회원등급
		, DADAMEMBERTYPE -- DMT001다다픽회원유형 DMT001:일반회원 DMT002:평생회원 DMT003:임직원1 DMT004:임직원2 DMT005:임원 DMT006:B2B(대량) DMT007:B2B(특판)
		, ORDNAME -- 주문자이름
		, ORDTEL -- 주문자연락처
		, ORDEMAIL -- 주문자이메일
		, ORDPOST -- 주문자우편번호
		, ORDADDR -- 주문자주소
		, ORDADDRDETAIL -- 주문자주소상세
		, ORDADDRROAD -- 주문자주소도로명
		, ORDADDRDETAILROAD -- 주문자주소상세도로명
		, ORDSIGUNGUCODE -- 주문자시군구코드
		, ORDBUILDINGCODE -- 주문자빌딩코드
		, ORDROADNAMECODE -- 주문자도로명코드
		, RCVNAME -- 수령인명
		, RCVTEL1 -- 수령인연락처1
		, RCVTEL2 -- 수령인연락처2
		, RCVADDR -- 수령인주소
		, RCVADDRDETAIL -- 수령인주소상세
		, RCVADDRROAD -- 수령인주소도로명
		, RCVADDRDETAILROAD -- 수령인주소상세도로명
		, RCVPOST -- 수령인우편번호
		, RCVSIGUNGUCODE -- 수령인시군구코드
		, RCVBUILDINGCODE -- 수령인빌딩코드
		, RCVROADNAMECODE -- 수령인도로명코드
		, RCVREQTYPE -- 배송요청타입 RVT001:경비실 RVT002:문앞 RVT003:직접받고 부재시경비실 RVT004:직접받고 부재시 문앞 RVT005:택배함 RVT006:직접입력
		, FN_GET_CODENAME(#{siteid}, 'RCVREQTYPE', tc.RCVREQTYPE) AS  RCVREQTYPENM
		, RCVREQDETAIL -- 배송요청사항
		, RESERVETOTAMT -- 적립금총사용금액
		, EPOINTTOTAMT -- EPOINT총사용금액
		, EMPRESERVETOTAMT -- 임직원적립금총사용금액
		, IFNULL((SELECT IF(ischuju = 'T', 'J', IF(isios = 'T', 'I', 'N')) FROM T_ISOLATION_FARE WHERE POST =  tc.RCVPOST  LIMIT 1), 'N') AS ISOLATETYPE /* 제주,도서산간구분(N : 일반, J :제주, I:도서산간) */
		, PAYMENTKEY
		, CARDCOMPANY
		, PLANMONTH
		, tc.CASHRECEIPTTYPE
		, tc.CASHRECEIPTURL
        , tc.CASHRECEIPTKEY
        , tc.REGISTRATIONNUMBER
	 	, tt.VIRBANK
		, tt.ACCOUNTTYPE
	    , tt.ACCNTNUMBER
		, tt.VIRCUSNAME
		, tt.VIRDUEDAY
		FROM T_COMORDER tc
		LEFT OUTER JOIN T_TOSSRECEIPT tt
        ON tc.ORDERIDX = tt.ORDERIDX
		WHERE 1 = 1
		<choose>
			<when test='ordno != null and ordno != ""'>
			AND tc.ORDNO = #{ordno}
			</when>
			<otherwise>
			AND tc.ORDERIDX = #{orderidx}
			</otherwise>
		</choose>
		<if test='isuser == "T"'>
		AND tc.USERNO = #{userno}
		</if>
	</select>

	<update id="updateOrderPayment" parameterType="somap">
		UPDATE	/*ComOrderMemoMapper - updateOrderPaymentDate:: 주문결재일 수정*/
			 t_comorder
		SET  PAYMENTDATE = #{paymentdate}
		WHERE ORDERIDX = #{orderidx}
	</update>

	<update id="updateCashReceipts" parameterType="somap">
		UPDATE	/*ComOrderMemoMapper - updateOrderPaymentDate:: 주문결재일 수정*/
			 t_comorder
		SET  CASHRECEIPTTYPE = #{type}
			, CASHRECEIPTURL = #{receipturl}
			, CASHRECEIPTKEY = #{receiptkey}
		WHERE ORDERIDX = #{orderidx}
	</update>

	<update id="updateOrderIsTrash" parameterType="somap">
		UPDATE	/*ComOrderMemoMapper - updateOrderPaymentDate:: 주문삭제여부 수정*/
			 t_comorder
		SET  ISTRASH =  #{istrash}
		WHERE ORDERIDX = #{orderidx}
	</update>

	<select id="selectUserOrderInfo" parameterType="somap" resultType="somap">
		/* -- ComOrderMapper.xml selectUserOrderInfo(사용자 6개월간 구매 금액 및 건수 조회) -- */
		SELECT SUM(tcg.PRICE) AS ordamt      -- 구매확정 총금액
		     , count(tcg.ORDGDIDX) AS ordcnt   -- 구매확정 건수
		FROM t_comorder tc
		INNER JOIN t_comorder_goods tcg ON tc.ORDERIDX  = tcg.ORDERIDX
			AND tcg.ISTRASH  = 'F'
		INNER JOIN t_comorder_goods_deliv tcgd  ON tcg.ORDGDIDX  = tcgd.ORDGDIDX
			AND tcgd.ISTRASH = 'F'
			AND tcgd.ORDSTATUS  = 'ODS009'
		WHERE  1 = 1
		AND tc.USERNO = #{userno}
		AND tc.ORDERDATE BETWEEN  STR_TO_DATE(concat(LAST_DAY(NOW() - interval 7 month) + interval 1 DAY, ' 000000'), '%Y-%m-%d%H%i%s') AND STR_TO_DATE(concat(LAST_DAY(NOW()), ' 235959'), '%Y-%m-%d%H%i%s')
	</select>

	<select id="selectConfirmOrderCnt" parameterType="somap" resultType="int">
		/* -- ComOrderMapper.xml selectConfirmOrderCnt 구매확정건수 건수 조회) -- */
		SELECT count(tcg.ORDGDIDX) AS ordcnt   -- 구매확정 건수
		FROM t_comorder tc
		INNER JOIN t_comorder_goods tcg ON tc.ORDERIDX  = tcg.ORDERIDX
			AND tcg.ISTRASH  = 'F'
		INNER JOIN t_comorder_goods_deliv tcgd  ON tcg.ORDGDIDX  = tcgd.ORDGDIDX
			AND tcgd.ISTRASH = 'F'
			AND tcgd.ORDSTATUS  = 'ODS009'
		WHERE  1 = 1
		AND tc.USERNO = #{userno}
	</select>

	<!-- 마이페이지 주문/배송 목록 조회 (페이징 처리) -->
	<select id="selectMyOrderList" parameterType="somap" resultType="somap">
		SELECT /* -- ComOrderMapper.xml selectMyOrderList 마이페이지 주문/배송조회 -- */
		    t.*
            , (SELECT DETAIL FROM T_COMMON_CODE WHERE CMCLASS = 'ORDSTATUS' AND CMCODE = t.ordstatus) AS ordstatusnm
            , COUNT(*) OVER() as totcnt
		FROM (
		    SELECT
		          a.orderidx
                , a.ordno
                , d.goodscode
                , date_format(a.orderdate, '%Y%m%d%H%i%s') as orderdate
                , date_format(a.orderdate, '%Y.%m.%d') as regdate
                , b.ordgdidx
                , b.goodsturn
                , b.dealerno
                , case
                    when b.dealerno is null or b.dealerno = 0 then 'D.PLOT'
                    else
                     (select name
                     from t_dealer
                     where userno = b.dealerno)
                  end as dealernm
                , b.goodsno
                , b.optioncode
                , b.frstordcnt as origincnt
                , b.frstordcnt - ifnull(f.cncclmcnt, 0) as ordcnt
                <if test='asinquiry == "T"'>
                , b.frstordcnt - ifnull(f.cncclmcnt, 0) -
                	ifnull((
                	select
                		sum(ascnt)
               		from t_asinquiry
               		where userno = #{userno}
               		and ordno = a.ordno
               		and goodsno = b.goodsno
               		and optioncode = b.optioncode
               		and ISTRASH = 'F'
               		),0) as asordcnt
            	</if>
                , b.delivfaretype
                , b.realgoodsamt as orgrealgoodsamt
                , b.realgoodsamt - ifnull(f.realgoodsamt, 0) as realgoodsamt
                , b.istrash
                , b.isaddgoods
                , b.orggoodsno
                , b.delivtype
                , b.basedelivamt
				, b.isodelivamt
                , b.iscombdeliv 		/* 묶음배송여부 */
	            , b.delivfare           /* 배송비 */
	            , b.chejufare           /* 제주배송비 */
	            , b.isolfare            /* 도서산간배송비 */
	            , b.delivfreefare   	/* 조건부주문금액 */
                , d.goodsname
                , FN_GET_OPTION_CONCAT(b.goodsno, b.optioncode, ' | ') as optionname
                , e.enname as brandname
                , FN_GET_ORDER_STATUS(b.ordgdidx) as ordstatus
                , FN_GET_FILE_URL(b.goodsno, 'FLT001', #{imgtype}) as fullpath
                , ifnull(f.cncclmcnt, 0) as cncclmcnt
                , ifnull(f.excclmcnt, 0) as excclmcnt
                , FN_GET_CLAIM_CNT(b.ordgdidx) as clmingcnt
                , IF((
                     SELECT count(*)
		             FROM t_goods_review
		             WHERE ISTRASH  = 'F'
		             AND ORDERIDX  = b.ORDERIDX
		             AND ORDGDIDX = b.ORDGDIDX
                   )> 0 , 'T', 'F') AS isreview
		    FROM t_comorder a
		    INNER JOIN t_comorder_goods b
		    on a.orderidx = b.orderidx
		    INNER JOIN t_goods d
		    ON b.goodsno = d.goodsno
		    LEFT OUTER JOIN t_brand e
		    ON d.brandidx = e.idx
		    LEFT JOIN (
                SELECT
                      ordgdidx
                    , sum(if(t1.clmtype='CLM003', 0, t2.clmcnt)) as cncclmcnt
                    , sum(if(t1.clmtype='CLM003' and t3.bfclmidx = 0, t2.clmcnt, 0)) - sum(if(t1.clmtype='CLM002' and t3.bfclmidx <![CDATA[<>]]> 0, t2.clmcnt, 0)) as excclmcnt
                    , sum(if(t1.clmtype='CLM003', 0, t2.realgoodsamt)) as realgoodsamt
                FROM T_CLAIM t1
                INNER JOIN t_claim_goods t2
                ON t1.CLMIDX = t2.CLMIDX
                AND t2.ISCLMOPTION = 'T'
                LEFT JOIN t_exchange_hist t3
				ON t1.clmidx = t3.afclmidx
                WHERE t1.ISTRASH = 'F'
                AND t2.ISTRASH = 'F'
                AND (t2.CNCSTATUS NOT IN ('CNS003','CNS004') OR t1.RTNSTATUS NOT IN ('RTS004','RTS005','RTS009') OR t1.EXCSTATUS NOT IN ('EXS004','EXS005','EXS011','EXS012')) -- 반려, 철회, 반송
                GROUP BY ordgdidx
            ) f
            ON b.ordgdidx = f.ordgdidx
            WHERE a.istrash = 'F'
            AND b.istrash  = 'F'
		    <choose>
		    	<when test='ordno != null and ordno !=""'>
		    	AND a.ordno = #{ordno}
		    	</when>
		    	<otherwise>
		    	AND a.userno = #{userno}
		    	</otherwise>
		    </choose>
		    <choose>
				<when test='date == "m1"'>
				AND date_format(a.orderdate, '%Y-%m-%d') <![CDATA[>=]]> DATE_FORMAT(date_add(now(), interval -1 month),'%Y-%m-%d')
				</when>
				<when test='date == "m3"'>
				AND date_format(a.orderdate, '%Y-%m-%d') <![CDATA[>=]]> DATE_FORMAT(date_add(now(), interval -3 month),'%Y-%m-%d')
				</when>
				<when test='date == "m6"'>
				AND date_format(a.orderdate, '%Y-%m-%d') <![CDATA[>=]]> DATE_FORMAT(date_add(now(), interval -6 month),'%Y-%m-%d')
				</when>
				<when test='date == "y1"'>
				AND date_format(a.orderdate, '%Y-%m-%d') <![CDATA[>=]]> DATE_FORMAT(date_add(now(), interval -1 year),'%Y-%m-%d')
				</when>
				<when test='date == "y"'>
				AND date_format(a.orderdate, '%Y-%m-%d') <![CDATA[<]]> DATE_FORMAT(date_add(now(), interval -1 year),'%Y-%m-%d')
				</when>
				<otherwise>
				</otherwise>
			</choose>
		) t
		WHERE ordcnt > 0
		<if test='state != null and state != ""'>
	 	AND ordstatus  = #{state}
	 	</if>
	 	<if test='asinquiry == "T"'>
	 	AND asordcnt > 0
	 	</if>
		order by orderdate desc, goodsno, optioncode
		<if test='startpage != null and endpage != null'>
		LIMIT #{startpage}, #{endpage}
		</if>
	</select>

	<insert id="insertComOrder" parameterType="somap" useGeneratedKeys="true" keyProperty="orderidx">
		INSERT  /* ComOrderMapper - insertComOrder 주문내역 저장*/
			INTO t_comorder (
			  siteid
			, ordno
			, userno
			, isnonmember
			, ordpathtype
			, orderdate
			, paymentdate
			, ordtotprice
			, dadadelivamt
			, ptndelivamt
			, totsalepromoamt
			, totgoodscpnamt
			, totdelivcpnamt
			, basketcpnamt
			, paywaytype
			, paytotprice
			, rpaytotprice
			, isgiftorder
			, isfrstorder
			, memlvtype
			, dadamembertype
			, ordname
			, ordemail
			, ordtel
			, ordpost
			, ordaddr
			, ordaddrdetail
			, ordaddrroad
			, ordaddrdetailroad
			, ordsigungucode
			, ordbuildingcode
			, ordroadnamecode
			, rcvname
			, rcvtel1
			, rcvtel2
			, rcvpost
			, rcvaddr
			, rcvaddrdetail
			, rcvaddrroad
			, rcvaddrdetailroad
			, rcvreqtype
			, rcvreqdetail
			, rcvsigungucode
			, rcvbuildingcode
			, rcvroadnamecode
			, istrash
			, reguserid
			, regdate
			, reservetotamt
			, epointtotamt
			, empreservetotamt
			, cashreceipttype
			, registrationnumber
		) VALUES (
			  #{siteid}
			, #{ordno}
			, #{userno}
			, #{isnonmember}
			, #{ordpathtype}
			, #{orderdate}
			, str_to_date(#{paymentdate}, '%Y%m%d%H%i%s')
			, #{ordtotprice}
			, #{dadadelivamt}
			, #{ptndelivamt}
			, #{totsalepromoamt}
			, #{totgoodscpnamt}
			, #{totdelivcpnamt}
			, #{basketcpnamt}
			, #{paywaytype}
			, #{paytotprice}
			, #{rpaytotprice}
			, #{isgiftorder}
			, #{isfrstorder}
			, #{memlvtype}
			, #{dadamembertype}
			, #{ordname}
			, #{ordemail}
			, #{ordtel}
			, #{ordpost}
			, #{ordaddr}
			, #{ordaddrdetail}
			, #{ordaddrroad}
			, #{ordaddrdetailroad}
			, #{ordsigungucode}
			, #{ordbuildingcode}
			, #{ordroadnamecode}
			, #{rcvname}
			, #{rcvtel1}
			, #{rcvtel2}
			, #{rcvpost}
			, #{rcvaddr}
			, #{rcvaddrdetail}
			, #{rcvaddrroad}
			, #{rcvaddrdetailroad}
			, #{rcvreqtype}
			, #{rcvreqdetail}
			, #{rcvsigungucode}
			, #{rcvbuildingcode}
			, #{rcvroadnamecode}
			, ifnull(#{istrash}, 'F')
			, #{userid}
			, sysdate()
			, #{reservetotamt}
			, #{epointtotamt}
			, #{empreservetotamt}
			, #{cashreceipttype}
			, #{registrationnumber}
		)
	</insert>

<!--
    *****************************************************************
    *
	*  공통 영역
	*
	*****************************************************************
-->


<!--
    *****************************************************************
    *
	*  관리자 영역
	*
	*****************************************************************
-->
	<select id="selectAdminOrderClaimList" parameterType="somap" resultType="somap">
		/* ComOrderMapper - selectAdminOrderClaimList 전체 주문, 클레임 목록 조회 */
		<include refid="selectAdminOrderClaimSQL"/>
		<include refid="adminOrderSortSQL"/>
		<if test="startpage != null and !startpage.equals('') and endpage != null and !endpage.equals('')">
		LIMIT #{startpage}, #{endpage}
		</if>
	</select>

	<select id="selectAdminOrderClaimListCount" parameterType="somap" resultType="somap">
		/* ComOrderMapper - selectAdminOrderClaimListCount 전체 주문, 클레임 목록건수 조회*/
		SELECT COUNT(*) AS totalcnt /* 전체건수 */
		FROM (<include refid="selectAdminOrderClaimSQL"/>) t
	</select>

	<select id="selectAdminOrderClaimListForExcel" parameterType="somap" resultType="somap">
		/* ComOrderMapper - selectAdminOrderClaimListForExcel 전체 주문, 클레임 목록 조회(엑셀용) */
		<include refid="selectAdminOrderClaimSQL"/>
		<include refid="adminOrderSortSQL"/>
	</select>

	<select id="selectAdminOrderClaimListForExcelNew" parameterType="somap" resultType="somap">
		/* ComOrderMapper - selectAdminOrderClaimListForExcelNew 전체 주문, 클레임 목록 조회(엑셀용) */
		SELECT
			  tb.*
			, CAST((saleamt - proratioamt - partproratioamt - cpnratioamt -partcpnrratioamt - basketdivamt - empreserveamt - reserveamt + delivamt - delivcpnamt) AS SIGNED INTEGER) AS realgoodsamt			/* 상품 결제액 */
		FROM (
			<include refid="selectAdminOrderClaimSQLNew"/>
			<include refid="adminOrderSortSQL"/>
		) tb
	</select>

	<select id="selectAdminOrderList" parameterType="somap" resultType="somap">
		/* ComOrderMapper - selectAdminOrderList 상태별 주문목록 조회 */
		<include refid="selectAdminOrderSQL"/>
		<include refid="adminOrderSortSQL"/>
		<if test="startpage != null and !startpage.equals('') and endpage != null and !endpage.equals('')">
		LIMIT #{startpage}, #{endpage}
		</if>
	</select>

	<select id="selectAdminOrderListCount" parameterType="somap" resultType="somap">
		/* ComOrderMapper - selectAdminOrderListCount 상태별 주문목록 건수 조회*/
		SELECT
			  COUNT(*) AS totalcnt
			, IFNULL(SUM(tt.waitingcnt), 0) AS waitingcnt
			, IFNULL(SUM(tt.cancelcnt), 0) AS cancelcnt
			, IFNULL(SUM(tt.prepgoodscnt), 0) AS prepgoodscnt
			, IFNULL(SUM(tt.prepdelivcnt), 0) AS prepdelivcnt
			, IFNULL(SUM(tt.indelivcnt), 0) AS indelivcnt
			, IFNULL(SUM(tt.compdelivcnt), 0) AS compdelivcnt
			, IFNULL(SUM(tt.confirmcnt), 0) AS confirmcnt
			, IFNULL(SUM(tt.invoicecnt), 0) AS invoicecnt
			, IFNULL(SUM(tt.noninvoicecnt), 0) AS noninvoicecnt
		FROM (	SELECT
					  (CASE WHEN t.ordstatus = 'ODS001' THEN 1 ELSE 0 END) AS waitingcnt	/* 주문상태-입금대기 */
					, (CASE WHEN t.ordstatus = 'ODS002' THEN 1 ELSE 0 END) AS cancelcnt		/* 주문상태-입금전취소 */
					, (CASE WHEN t.ordstatus = 'ODS004' THEN 1 ELSE 0 END) AS prepgoodscnt	/* 주문상태-상품준비중 */
					, (CASE WHEN t.ordstatus = 'ODS006' THEN 1 ELSE 0 END) AS prepdelivcnt	/* 주문상태-배송준비중 */
					, (CASE WHEN t.ordstatus = 'ODS007' THEN 1 ELSE 0 END) AS indelivcnt	/* 주문상태-배송중 */
					, (CASE WHEN t.ordstatus = 'ODS008' THEN 1 ELSE 0 END) AS compdelivcnt	/* 주문상태-배송완료 */
					, (CASE WHEN t.ordstatus = 'ODS009' THEN 1 ELSE 0 END) AS confirmcnt	/* 주문상태-구매확정 */
					, (CASE WHEN t.invoiceno IS NOT NULL OR t.invoiceno != '' THEN 1 ELSE 0 END) AS invoicecnt		/* 송장등록건수 */
					, (CASE WHEN t.invoiceno IS NOT NULL OR t.invoiceno != '' THEN 0 ELSE 1 END) AS noninvoicecnt	/* 송장미등록건수 */
				FROM (<include refid="selectAdminOrderSQL"/>) t
		) tt
	</select>

	<select id="selectAdminOrderListForExcel" parameterType="somap" resultType="somap">
		/* ComOrderMapper - selectAdminOrderListForExcel 관리자용 주문목록 조회(엑셀용) */
		<include refid="selectAdminOrderSQL"/>
		<include refid="adminOrderSortSQL"/>
	</select>

	<sql id="selectAdminOrderSQL">
		SELECT /* ComOrderMapper - selectAdminOrderSQL 관리자용 주문 조회 */
			  ta.ordgdidx /* 주문상품IDX */
			, ta.orderidx /* 주문IDX */
			, ta.ordno /* 주문번호 */
			, ta.orgdelividx /* 주문배송IDX */
			, ROW_NUMBER() OVER(PARTITION BY ta.orderidx, ta.ordgdidx ORDER BY ta.orderidx, ta.ordgdidx, ta.orgdelividx) AS orgdelivsort
			, ta.ordpathtype /* 주문경로 */
			, ta.ordpathtypename /* 주문경로명 */
			, DATE_FORMAT(ta.orderdate, '%Y-%m-%d %H:%i:%s') AS orderday /* 주문일시 */
			, DATE_FORMAT(ta.orderdate, '%Y-%m-%d') AS orderdate /* 주문일자 */
			, DATE_FORMAT(ta.orderdate, '%H:%i:%s') AS ordertime /* 주문시간 */
			, DATE_FORMAT(ta.paymentdate, '%Y-%m-%d %H:%i:%s') AS paymentday /* 결제일시 */
			, DATE_FORMAT(ta.paymentdate, '%Y-%m-%d') AS paymentdate /* 결제일자 */
			, DATE_FORMAT(ta.paymentdate, '%H:%i:%s') AS paymenttime /* 결제시간 */
			, ta.isfrstorder /* 첫구매여부 */
			, ta.isnonmember
			, ta.isnonmembername /* 비회원여부 */
			, ta.orduserno /* 주문자번호 */
			, ta.ordid /* 주문자id */
			, ta.dadamembertype /* 회원유형 */
			, ta.membertypename /* 회원유형명 */
			, ta.memlvtype /* 회원등급 */
			, ta.memlvtypename /* 회원등급명 */
			, (SELECT logistype FROM t_deliv_template WHERE idx = delividx) AS delivtypetmp /* 배송템플릿 배송방법 */
		<choose>
			<when test='ispartner != null and ispartner == true'>
			, IF(ta.ispass90days='T', FN_GET_MASK_DATA('NAME', ta.vircusname), ta.vircusname) AS vircusname /* 입금자명 */
			, IF(ta.ispass90days='T', FN_GET_MASK_DATA('NAME', ta.ordname), ta.ordname) AS ordname /* 주문자명 */
			, IF(ta.ispass90days='T', FN_GET_MASK_DATA('TEL', ta.ordtel), ta.ordtel) AS ordtel /* 주문자연락처 */
			, IF(ta.ispass90days='T', FN_GET_MASK_DATA('NAME', ta.rcvname), ta.rcvname) AS rcvname /* 수령인명 */
			, IF(ta.ispass90days='T', FN_GET_MASK_DATA('TEL', ta.rcvtel), ta.rcvtel) AS rcvtel /* 수령인연락처 */
			, IF(ta.ispass90days='T', FN_GET_MASK_DATA('ADDR', ta.rcvaddrdetail), ta.rcvaddrdetail) AS rcvaddrdetail /* 수령인상세주소 */
			</when>
			<otherwise>
			, ta.vircusname /* 입금자명 */
			, ta.ordname /* 주문자명 */
			, ta.ordtel /* 주문자연락처 */
			, ta.rcvname /* 수령인명 */
			, ta.rcvtel /* 수령인연락처 */
			, ta.rcvaddrdetail /* 수령인상세주소 */
			</otherwise>
		</choose>
			, ta.rcvaddr /* 수령인주소 */
			, concat(ta.rcvaddr,' ',ta.rcvaddrdetail) AS rcvfulladdr  /* 수령인주소 */
			, IF(ta.rcvreqdetail IS NULL OR ta.rcvreqdetail='', ta.rcvreqtypename, concat(ta.rcvreqtypename,'-',ta.rcvreqdetail)) AS rcvreqdetail /* 배송메시지 */
			, ta.ispbgoods /* 직매입여부 */
			, ta.ispbgoodsname /* 판매구분(직매입여부) */
			, ta.dealerno /* 입점업체번호 */
			, ta.dealername /* 입점업체명 */
			, ta.goodsno /* 상품일련번호 */
			, ta.goodscode /* 상품코드 */
			, ta.optioncode /* 단품코드 */
			, ta.goodsturn /* 상품순번 */
			, ta.goodsname /* 상품명 */
			, ta.fullpath /* 상품 이미지 경로 */
			, ta.optionconts /* 옵션 */
			, ta.ordcnt /* 주문수량 */
			, ta.price /* 판매단가 */
			, ta.totprice /* 판매금액 */
			, ta.paywaytype /* 결제수단 */
			, ta.paywaytypename /* 결제수단명 */
			, ta.isaddgoods /* 추가상품여부 */
			, ta.iscombdelivname /* 묶음배송여부명 */
			, ta.delivfaretype /* 배송비종류 */
			, ta.delivfaretypename /* 배송비종류명 */
			, ta.delivamt /* 배송비 */
			, ta.ordstatus /* 주문상태 */
			, ta.ordstatusname /* 주문상태명 */
			, ta.invoiceno /* 운송장번호 */
			, ta.logistype /* 택배사 */
			, ta.logistypename /* 택배사명 */
			, ta.cfmconts /* 구매확정내역 */
			, ta.istracking /* 배송추적여부 */
			, ta.trckerrmsg /* 배송추적결과메시지 */
			, ta.delivtype /* 배송방법 */
			, ta.delivtypename /* 배송방법명 */
			, IF((
					SELECT COUNT(*)
					FROM T_CLAIM
					WHERE ORDERIDX = ta.orderidx
					AND ISTRASH = 'F'
					AND (CNCSTATUS IS NULL OR CNCSTATUS NOT IN ('CNS003', 'CNS004'))
					AND (RTNSTATUS IS NULL OR RTNSTATUS NOT IN ('RTS004', 'RTS005'))
					AND (EXCSTATUS IS NULL OR EXCSTATUS NOT IN ('EXS004', 'EXS005'))
				) = 0, 'N', 'Y') AS CLAIMYN
			, ta.delivcnt
			, ta.origincnt
			, ta.cncproccnt
			, ta.rtnproccnt
			, ta.excproccnt
			, ta.dirdelivmsg
		FROM (
				SELECT
					  a.ordgdidx
					, b.orderidx
					, b.ordno
					, c.orgdelividx
					, b.ordpathtype
					, FN_GET_CODENAME(null, 'MUAPPCHTYPE', b.ordpathtype) AS ordpathtypename
					, b.orderdate
					, b.paymentdate
					, IF(b.isfrstorder='T', 'Y', 'N') AS isfrstorder
					, b.isnonmember
					, IF(b.isnonmember = 'T', '비회원', '회원') AS isnonmembername
					, b.userno AS orduserno
					, b.ordname
					, g.userid AS ordid
					, b.ordtel
					, b.dadamembertype
					, FN_GET_CODENAME(null, 'DADAMEMBERTYPE', b.dadamembertype) AS membertypename
					, b.memlvtype
					, FN_GET_CODENAME(null, 'MEMLVTYPE', b.memlvtype) AS memlvtypename
					, d.ispbgoods
					, IF(d.ispbgoods='T', '자사', '파트너사') AS ispbgoodsname
					, a.dealerno
					, (CASE WHEN a.dealerno is not null and a.dealerno != 0
							THEN (select name from t_dealer where userno = a.dealerno)
							ELSE ''
					   END) AS dealername
					, a.goodsno
					, d.goodscode
					, a.optioncode
					, a.goodsturn
					, d.goodsname
					, FN_GET_FILE_URL(a.goodsno, 'FLT001', 'IGT003') AS fullpath
					, FN_GET_OPTION_DETAIL(a.goodsno, a.optioncode, '\n') AS optionconts
					, a.frstordcnt - ifnull(h.cnccompcnt, 0) - ifnull(h.rtncompcnt, 0) AS ordcnt
					, e.vircusname
					, b.paywaytype
					, FN_GET_CODENAME(null, 'PAYWAYTYPE', b.paywaytype) AS paywaytypename
					, IF(a.isaddgoods='T', 'Y', 'N') AS isaddgoods
					, IF(a.iscombdeliv='T', '묶음', '개별') AS iscombdelivname
					, a.delivfaretype
					, FN_GET_CODENAME(null, 'DELIVFARETYPE', a.delivfaretype) AS delivfaretypename
					, a.delivamt
					, c.ordstatus
					, FN_GET_CODENAME(null, 'ORDSTATUS', c.ordstatus) AS ordstatusname
					, b.rcvname
					, b.rcvtel1 AS rcvtel
					, ifnull(b.rcvaddrroad, b.rcvaddr) AS rcvaddr
					, ifnull(b.rcvaddrdetailroad, b.rcvaddrdetail) AS rcvaddrdetail
					, c.invoiceday
					, f.delivdate
					, b.paytotprice
					, c.invoiceno
					, c.logistype
					, FN_GET_CODENAME(null, 'LOGISTYPE', c.logistype) AS logistypename
					, (CASE WHEN f.ordcfmdate IS NULL OR f.ordcfmdate = ''
							THEN '미확정'
							ELSE CONCAT(DATE_FORMAT(f.ordcfmdate, '%Y-%m-%d %H:%i:%s'), ' (', FN_GET_CODENAME(null, 'ORDCFMTYPE',
							c.ordcfmtype), ')')
					   END) AS cfmconts
					, c.istracking
					, c.trckerrmsg
					, a.delivtype
					, FN_GET_CODENAME(null, 'DELIVTYPE', a.delivtype) AS delivtypename
					, IF(datediff(now(), b.ORDERDATE)<![CDATA[>=]]>90, 'T', 'F') AS ispass90days
					, a.frstordcnt - ifnull(h.clmcnt, 0) AS delivcnt
					, a.frstordcnt - ifnull(h.clmcnt, 0) AS origincnt
					, a.price
					, (a.price * (a.frstordcnt - ifnull(h.clmcnt, 0))) AS totprice
					, h.cncproccnt
					, h.rtnproccnt
					, h.excproccnt
					, c.dirdelivmsg
					, d.delividx
					, FN_GET_CODENAME(NULL, 'RCVREQTYPE', b.rcvreqtype) rcvreqtypename
					, b.rcvreqdetail
				FROM t_comorder_goods a
				INNER JOIN t_comorder b ON a.orderidx = b.orderidx AND b.istrash = 'F'
				INNER JOIN t_comorder_goods_deliv c ON a.ordgdidx = c.ordgdidx AND c.istrash = 'F'
				INNER JOIN t_goods d ON a.goodsno = d.goodsno
				LEFT OUTER JOIN t_tossreceipt e ON b.orderidx = e.orderidx
				LEFT OUTER JOIN (
					SELECT t.orgdelividx
						 , MAX(t.delivdate) AS delivdate
						 , MAX(t.ordcfmdate) AS ordcfmdate
					FROM (	SELECT cgh.orgdelividx
								 , IF(cgh.aftval = 'ODS008', cgh.regdate, '') AS delivdate /* 배송완료 */
								 , IF(cgh.aftval = 'ODS009', cgh.regdate, '') AS ordcfmdate /* 구매확정 */
							FROM t_comorder_goods_his cgh
						 ) t
					GROUP BY t.orgdelividx
					ORDER BY t.orgdelividx
				) f ON c.orgdelividx = f.orgdelividx
				LEFT OUTER JOIN t_user g ON b.userno = g.no
				LEFT JOIN (
		            SELECT
		            	  ta.orderidx, tb.ordgdidx
		            	, SUM(CASE WHEN ta.clmtype='CLM003' THEN 0 ELSE tb.clmcnt END) AS clmcnt
			            , SUM(CASE WHEN ta.clmtype='CLM001' AND ta.cncstatus NOT IN ('CNS003', 'CNS004', 'CNS005') THEN tb.clmcnt ELSE 0 END) AS cncproccnt
			            , SUM(CASE WHEN ta.clmtype='CLM002' AND ta.rtnstatus NOT IN ('RTS004', 'RTS005', 'RTS009', 'RTS010') THEN tb.clmcnt ELSE 0 END) AS rtnproccnt
			            , SUM(CASE WHEN ta.clmtype='CLM003' AND ta.excstatus NOT IN ('EXS004', 'EXS005', 'EXS011', 'EXS012') THEN tb.clmcnt ELSE 0 END) AS excproccnt
		                , SUM(CASE WHEN ta.clmtype='CLM001' AND tb.cncstatus = 'CNS005' THEN tb.clmcnt ELSE 0 END) AS cnccompcnt
		                , SUM(CASE WHEN ta.clmtype='CLM002' AND ta.rtnstatus = 'RTS010' THEN tb.clmcnt ELSE 0 END) AS rtncompcnt
		            FROM t_claim ta
		            INNER JOIN t_claim_goods tb ON ta.clmidx = tb.clmidx and tb.isclmoption = 'T'
	            	WHERE (tb.CNCSTATUS NOT IN ('CNS003','CNS004') OR ta.RTNSTATUS NOT IN ('RTS004','RTS005','RTS009') OR ta.EXCSTATUS NOT IN ('EXS004','EXS005','EXS011')) -- 반려, 철회, 반송
	            	AND ta.istrash = 'F'
					GROUP BY ta.orderidx, tb.ordgdidx
		        ) h ON a.orderidx = h.orderidx AND a.ordgdidx = h.ordgdidx
				WHERE b.siteid = #{siteid}
				<if test="userno !=null and userno != ''">
				AND b.userno = #{userno}
				</if>
				<if test="ordstatus != null and ordstatus != '' ">
				AND c.ordstatus = #{ordstatus}
				</if>
				<if test='ordstatusarr != null and ordstatusarr.size > 0'>
				AND
					<foreach index="index" collection="ordstatusarr" item="_item" open="(" close=")" separator="OR" >
						c.ordstatus = #{_item}
					</foreach>
				</if>
				<if test="ispbgoods != null and ispbgoods != '' ">
				AND d.ispbgoods = #{ispbgoods}
				</if>
				<if test="dealerno != null and dealerno != '' ">
				AND a.dealerno = #{dealerno}
				</if>
				<if test='isallchannel != null and isallchannel != "T" and muappchtypearr != null and muappchtypearr.size > 0'>
				AND
					<foreach index="index" collection="muappchtypearr" item="_item" open="(" close=")" separator="OR" >
						b.ordpathtype = #{_item}
					</foreach>
				</if>
				<if test="isnonmember != null and isnonmember != '' ">
				AND b.isnonmember = #{isnonmember}
				</if>
				<if test="isfrstorder != null and isfrstorder != '' ">
				AND b.isfrstorder = #{isfrstorder}
				</if>
				<if test='isallmember != null and isallmember != "T" and mumembertypearr != null and mumembertypearr.size > 0'>
				AND
					<foreach index="index" collection="mumembertypearr" item="_item" open="(" close=")" separator="OR" >
						b.dadamembertype = #{_item}
					</foreach>
				</if>
				<if test='isallmemlv != null and isallmemlv != "T" and mumemlvtypearr != null and mumemlvtypearr.size > 0'>
				AND
					<foreach index="index" collection="mumemlvtypearr" item="_item" open="(" close=")" separator="OR" >
						b.memlvtype = #{_item}
					</foreach>
				</if>
				<if test='isallpayway != null and isallpayway != "T" and paywaytypearr != null and paywaytypearr.size > 0'>
				AND
					<foreach index="index" collection="paywaytypearr" item="_item" open="(" close=")" separator="OR" >
						b.paywaytype = #{_item}
					</foreach>
				</if>
				<if test="isinvoicereg != null and isinvoicereg != ''">
					<choose>
						<when test='isinvoicereg == "T"'>
						AND c.invoiceno IS NOT NULL AND c.invoiceno != ''
						</when>
						<when test='isinvoicereg == "F"'>
						AND (c.invoiceno IS NULL OR c.invoiceno = '')
						</when>
						<otherwise></otherwise>
					</choose>
				</if>
				<if test='isallordcfm != null and isallordcfm != "T" and ordcfmtypearr != null and ordcfmtypearr.size > 0'>
				AND
					<foreach index="index" collection="ordcfmtypearr" item="_item" open="(" close=")" separator="OR" >
						IFNULL(c.ordcfmtype, '') = #{_item}
					</foreach>
				</if>
			 ) ta
		WHERE 1 = 1
		AND ta.origincnt <![CDATA[>]]> 0
		<if test="pricekey != null and pricekey != '' ">
	        <choose>
	            <when test="pricekey == 'goods'">
					<if test="minprice != null and minprice != ''">
					AND ta.totprice <![CDATA[>=]]> #{minprice}
					</if>
					<if test="maxprice != null and maxprice != ''">
					AND ta.totprice <![CDATA[<=]]> #{maxprice}
					</if>
	            </when>
	            <when test="pricekey == 'payment'">
					<if test="minprice != null and minprice != ''">
					AND ta.paytotprice <![CDATA[>=]]> #{minprice}
					</if>
					<if test="maxprice != null and maxprice != ''">
					AND ta.paytotprice <![CDATA[<=]]> #{maxprice}
					</if>
	            </when>
	            <otherwise>
					<if test="minprice != null and minprice != ''">
					AND ( ta.totprice <![CDATA[>=]]> #{minprice}
					   OR ta.paytotprice <![CDATA[>=]]> #{minprice} )
					</if>
					<if test="maxprice != null and maxprice != ''">
					AND ( ta.totprice <![CDATA[<=]]> #{maxprice}
					   OR ta.paytotprice <![CDATA[<=]]> #{maxprice} )
					</if>
	            </otherwise>
	        </choose>
	    </if>
	    <if test="sword == null or sword == '' ">
			<if test="dtkey != null and dtkey != '' ">
		        <choose>
		            <when test="dtkey == 'order'">
		            AND ta.orderdate BETWEEN STR_TO_DATE(CONCAT(#{startdate},'000000'), '%Y-%m-%d%H%i%s') AND STR_TO_DATE(CONCAT(#{enddate},'235959'), '%Y-%m-%d%H%i%s')
		            </when>
		            <when test="dtkey == 'payment'">
		            AND ta.paymentdate BETWEEN STR_TO_DATE(CONCAT(#{startdate},'000000'), '%Y-%m-%d%H%i%s') AND STR_TO_DATE(CONCAT(#{enddate},'235959'), '%Y-%m-%d%H%i%s')
		            </when>
		            <when test="dtkey == 'invoicereg'">
		            AND STR_TO_DATE(ta.invoiceday, '%Y%m%d') BETWEEN STR_TO_DATE(#{startdate}, '%Y-%m-%d') AND STR_TO_DATE(#{enddate}, '%Y-%m-%d')
		            </when>
		            <when test="dtkey == 'deliv'">
		            AND ta.delivdate BETWEEN STR_TO_DATE(CONCAT(#{startdate},'000000'), '%Y-%m-%d%H%i%s') AND STR_TO_DATE(CONCAT(#{enddate},'235959'), '%Y-%m-%d%H%i%s')
		            </when>
		            <otherwise>
		            AND ( ta.orderdate BETWEEN STR_TO_DATE(CONCAT(#{startdate},'000000'), '%Y-%m-%d%H%i%s') AND STR_TO_DATE(CONCAT(#{enddate},'235959'), '%Y-%m-%d%H%i%s')
					   OR ta.paymentdate BETWEEN STR_TO_DATE(CONCAT(#{startdate},'000000'), '%Y-%m-%d%H%i%s') AND STR_TO_DATE(CONCAT(#{enddate},'235959'), '%Y-%m-%d%H%i%s')
					   OR ta.invoiceregdate BETWEEN STR_TO_DATE(CONCAT(#{startdate},'000000'), '%Y-%m-%d%H%i%s') AND STR_TO_DATE(CONCAT(#{enddate},'235959'), '%Y-%m-%d%H%i%s')
					   OR ta.delivdate BETWEEN STR_TO_DATE(CONCAT(#{startdate},'000000'), '%Y-%m-%d%H%i%s') AND STR_TO_DATE(CONCAT(#{enddate},'235959'), '%Y-%m-%d%H%i%s') )
		            </otherwise>
		        </choose>
		    </if>
	    </if>
		<if test="sword != null and sword != '' ">
			<choose>
				<when test="skey == 'ordno'">
				AND ta.ordno LIKE CONCAT('%', #{sword}, '%')
				</when>
				<when test="skey == 'ordname'">
				AND ta.ordname LIKE CONCAT('%', #{sword}, '%')
				</when>
				<when test="skey == 'ordid'">
				AND ta.ordid LIKE CONCAT('%', #{sword}, '%')
				</when>
				<when test="skey == 'ordtel'">
				AND ta.ordtel LIKE CONCAT('%', #{sword}, '%')
				</when>
				<when test="skey == 'rcvname'">
				AND ta.rcvname LIKE CONCAT('%', #{sword}, '%')
				</when>
				<when test="skey == 'rcvtel'">
				AND ta.rcvtel LIKE CONCAT('%', #{sword}, '%')
				</when>
				<when test="skey == 'vircusname'">
				AND ta.vircusname LIKE CONCAT('%', #{sword}, '%')
				</when>
				<when test="skey == 'goodsname'">
				AND ta.goodsname LIKE CONCAT('%', #{sword}, '%')
				</when>
				<when test="skey == 'goodscode'">
				AND ta.goodscode LIKE CONCAT('%', #{sword}, '%')
				</when>
				<when test="skey == 'optioncode'">
				AND ta.optioncode LIKE CONCAT('%', #{sword}, '%')
				</when>
				<when test="skey == 'optionname'">
				AND ta.optionconts LIKE CONCAT('%', #{sword}, '%')
				</when>
				<otherwise>
					<if test="skeyarr != null and skeyarr.size > 0">
					AND
					<foreach index="index" collection="skeyarr" item="item" open="(" close=")" separator="OR" >
						<if test="item.key == 'ordno'">
						ta.ordno LIKE CONCAT('%', #{sword}, '%')
						</if>
						<if test="item.key == 'ordname'">
						ta.ordname LIKE CONCAT('%', #{sword}, '%')
						</if>
						<if test="item.key == 'ordid'">
						ta.ordid LIKE CONCAT('%', #{sword}, '%')
						</if>
						<if test="item.key == 'ordtel'">
						ta.ordtel LIKE CONCAT('%', #{sword}, '%')
						</if>
						<if test="item.key == 'rcvname'">
						ta.rcvname LIKE CONCAT('%', #{sword}, '%')
						</if>
						<if test="item.key == 'rcvtel'">
						ta.rcvtel LIKE CONCAT('%', #{sword}, '%')
						</if>
						<if test="item.key == 'vircusname'">
						ta.vircusname LIKE CONCAT('%', #{sword}, '%')
						</if>
						<if test="item.key == 'goodsname'">
						ta.goodsname LIKE CONCAT('%', #{sword}, '%')
						</if>
						<if test="item.key == 'goodscode'">
						ta.goodscode LIKE CONCAT('%', #{sword}, '%')
						</if>
						<if test="item.key == 'optioncode'">
						ta.optioncode LIKE CONCAT('%', #{sword}, '%')
						</if>
						<if test="item.key == 'optionname'">
						ta.optionconts LIKE CONCAT('%', #{sword}, '%')
						</if>
					</foreach>
					</if>
				</otherwise>
			</choose>
		</if>
		<if test="gdword != null and gdword != '' ">
			<choose>
				<when test="gdkey == 'goodsname'">
				AND ta.goodsname LIKE CONCAT('%', #{gdword}, '%')
				</when>
				<when test="gdkey == 'goodscode'">
				AND ta.goodscode LIKE CONCAT('%', #{gdword}, '%')
				</when>
				<when test="gdkey == 'optioncode'">
				AND ta.optioncode LIKE CONCAT('%', #{gdword}, '%')
				</when>
				<when test="gdkey == 'optionname'">
				AND ta.optionconts LIKE CONCAT('%', #{gdword}, '%')
				</when>
				<otherwise>
				AND ( ta.goodsname LIKE CONCAT('%', #{gdword}, '%')
				   OR ta.goodscode LIKE CONCAT('%', #{gdword}, '%')
				   OR ta.optioncode LIKE CONCAT('%', #{gdword}, '%')
				   OR ta.optionconts LIKE CONCAT('%', #{gdword}, '%') )
				</otherwise>
			</choose>
		</if>
	</sql>

	<sql id="selectAdminOrderClaimSQL">
		SELECT /* ComOrderMapper - selectAdminOrderClaimSQL 관리자용 전체 주문/클레임 조회 */
			  ta.orderidx			/* 주문IDX */
			, ta.ordpathtypename	/* 주문경로명 */
			, DATE_FORMAT(ta.orderdate, '%Y-%m-%d %H:%i:%s') as orderday		/* 주문일시 */
			, DATE_FORMAT(ta.orderdate, '%Y-%m-%d') as orderdate 				/* 주문일자 */
			, DATE_FORMAT(ta.orderdate, '%H:%i:%s') as ordertime				/* 주문시간 */
			, DATE_FORMAT(ta.paymentdate, '%Y-%m-%d %H:%i:%s') as paymentday 	/* 결제일시 */
			, DATE_FORMAT(ta.paymentdate, '%Y-%m-%d') as paymentdate 			/* 결제일자 */
			, DATE_FORMAT(ta.paymentdate, '%H:%i:%s') as paymenttime			/* 결제시간 */
			, ta.isnonmember
			, ta.isnonmembername	/* 비회원여부 */
			, ta.ordno				/* 주문번호 */
			, ta.isfrstorder		/* 첫구매여부 */
			, ta.orduserno			/* 주문자번호 */
			, ta.ordname			/* 주문자명 */
			, ta.ordid				/* 주문자ID */
			, ta.ordtel				/* 주문자연락처 */
			, ta.membertypename		/* 회원유형명 */
			, ta.memlvtypename		/* 회원등급명 */
			, ta.fullpath			/* 이미지경로 */
			, ta.goodsname			/* 상품명 */
			, ta.rpaytotprice		/* 실결제금액 */
			, ta.paywaytypename		/* 결제수단명 */
			, ta.undelivcnt			/* 미배송건수 */
			, ta.indelivcnt			/* 배송중건수 */
			, ta.compdelivcnt		/* 배송완료건수 */
			, ta.cfmcnt				/* 구매확정건수 */
			, ta.canclecnt			/* 취소건수 */
			, ta.returncnt			/* 반품건수 */
			, ta.exchangecnt		/* 교환건수 */
		FROM (
				SELECT
					  a.orderidx
					, a.ordno
					, a.ordpathtype
					, FN_GET_CODENAME(null, 'MUAPPCHTYPE', a.ordpathtype) AS ordpathtypename
					, a.orderdate
					, a.paymentdate
					, IF(a.isfrstorder = 'T', 'Y', 'N') AS isfrstorder
					, a.isnonmember
					, IF(a.isnonmember = 'T', '비회원', '회원') AS isnonmembername
					, a.userno AS orduserno
					, a.ordname
					, f.userid AS ordid
					, a.ordtel
					, a.dadamembertype
					, FN_GET_CODENAME(null, 'DADAMEMBERTYPE', a.dadamembertype) AS membertypename
					, a.memlvtype
					, FN_GET_CODENAME(null, 'MEMLVTYPE', a.memlvtype) AS memlvtypename
					, FN_GET_FILE_URL(c.goodsno, 'FLT001', 'IGT003') AS fullpath
					, c.goodscode
					, (CASE WHEN ifnull(b.goodscnt, 0) > 1
						   THEN concat(c.goodsname, ' 외(', b.goodscnt-1, '건)')
						   ELSE c.goodsname
					  END) goodsname
					, a.rpaytotprice - IFNULL(e.rtnpayamt, 0) AS rpaytotprice
					, a.paywaytype
					, FN_GET_CODENAME(null, 'PAYWAYTYPE', a.paywaytype) AS paywaytypename
					, d.undelivcnt
					, d.indelivcnt
					, d.compdelivcnt
					, d.cfmcnt
					, ifnull(e.canclecnt, 0) AS canclecnt
					, ifnull(e.returncnt, 0) AS returncnt
					, ifnull(e.exchangecnt, 0) AS exchangecnt
					, '' AS optioncode
					, '' AS ordgdidx
					, '' AS orgdelividx
				FROM t_comorder a
				INNER JOIN (
						SELECT
							  tcg.orderidx
							, count(*) AS goodscnt
							, min(tg.goodscode) AS goodscode
						FROM t_comorder_goods tcg
						INNER JOIN t_goods tg
						 	 ON tcg.goodsno = tg.goodsno
						WHERE 1 = 1
						<if test="dealerno != null and dealerno != '' ">
						AND tcg.dealerno = #{dealerno}
						</if>
						GROUP BY tcg.orderidx
				) b	ON a.orderidx = b.orderidx
				INNER JOIN t_goods c
					ON b.goodscode = c.goodscode
				INNER JOIN (
						SELECT
							  tc.orderidx
							, sum(tcgd.undelivcnt) AS undelivcnt
							, sum(tcgd.indelivcnt) AS indelivcnt
							, sum(tcgd.compdelivcnt) AS compdelivcnt
							, sum(tcgd.cfmcnt) AS cfmcnt
						FROM t_comorder tc
						INNER JOIN t_comorder_goods tcg
							 ON tc.orderidx = tcg.orderidx
						INNER JOIN (
							SELECT
								  ordgdidx
								, sum(CASE WHEN ordstatus NOT IN ('ODS007', 'ODS008', 'ODS009') THEN 1 ELSE 0 END) AS undelivcnt
								, sum(CASE WHEN ordstatus = 'ODS007' THEN 1 ELSE 0 END) AS indelivcnt
								, sum(CASE WHEN ordstatus = 'ODS008' THEN 1 ELSE 0 END) AS compdelivcnt
								, sum(CASE WHEN ordstatus = 'ODS009' THEN 1 ELSE 0 END) AS cfmcnt
							FROM t_comorder_goods_deliv
							WHERE istrash = 'F'
							GROUP BY ordgdidx
						) tcgd ON tcg.ordgdidx = tcgd.ordgdidx
						WHERE 1 = 1
						<if test="dealerno != null and dealerno != '' ">
						AND tcg.dealerno = #{dealerno}
						</if>
						GROUP BY tc.orderidx
				) d ON a.orderidx = d.orderidx
				LEFT OUTER JOIN (
					SELECT tc.orderidx
						, sum(CASE WHEN tc.clmtype='CLM001' THEN 1 ELSE 0 END) AS canclecnt
						, sum(CASE WHEN tc.clmtype='CLM002' THEN 1 ELSE 0 END) AS returncnt
						, sum(CASE WHEN tc.clmtype='CLM003' THEN 1 ELSE 0 END) AS exchangecnt
						, sum(CASE WHEN tc.cncstatus NOT IN ('CNS003','CNS004') OR RTNSTATUS NOT IN ('RTS004','RTS005', 'RTS009') OR EXCSTATUS NOT IN ('EXS004','EXS005','EXS011')
								   THEN tc.RTNPAYAMT ELSE 0 END) AS RTNPAYAMT
					FROM t_claim tc
					WHERE tc.ISTRASH = 'F'
					<if test="dealerno != null and dealerno != '' ">
					AND EXISTS (
						SELECT 1
						FROM t_claim_goods tcg
						INNER JOIN t_comorder_goods tog
						ON tcg.ordgdidx = tog.ordgdidx
						WHERE tcg.istrash = 'F'
						AND tcg.clmidx = tc.clmidx
						AND tog.dealerno = #{dealerno}
					)
					</if>
					GROUP BY tc.orderidx
				) e ON a.orderidx = e.orderidx
				LEFT OUTER JOIN t_user f ON a.userno = f.no
				LEFT OUTER JOIN t_tossreceipt g ON a.orderidx = g.orderidx
				WHERE a.siteid = #{siteid}
				AND a.istrash = 'F'
			<if test="sword != null and sword != '' ">
				<choose>
					<when test="skey == 'ordno'">
					AND a.ordno LIKE CONCAT('%', #{sword}, '%')
					</when>
					<when test="skey == 'ordname'">
					AND a.ordname LIKE CONCAT('%', #{sword}, '%')
					</when>
					<when test="skey == 'ordid'">
					AND f.userid LIKE CONCAT('%', #{sword}, '%')
					</when>
					<when test="skey == 'ordtel'">
					AND a.ordtel LIKE CONCAT('%', #{sword}, '%')
					</when>
					<when test="skey == 'rcvname'">
					AND a.rcvname LIKE CONCAT('%', #{sword}, '%')
					</when>
					<when test="skey == 'rcvtel'">
					AND a.rcvtel1 LIKE CONCAT('%', #{sword}, '%')
					</when>
					<when test="skey == 'vircusname'">
					AND g.vircusname LIKE CONCAT('%', #{sword}, '%')
					</when>
					<when test="skey == 'addr'">
					AND (
						   CONCAT(a.rcvaddr, a.rcvaddrdetail) LIKE CONCAT('%', #{sword}, '%')
						OR CONCAT(a.rcvaddrroad, a.rcvaddrdetailroad) LIKE CONCAT('%', #{sword}, '%')
					)
					</when>
					<otherwise>
						<if test="skeyarr != null and skeyarr.size > 0">
						AND
						<foreach index="index" collection="skeyarr" item="item" open="(" close=")" separator="OR" >
							<if test="item.key == 'ordno'">
							a.ordno LIKE CONCAT('%', #{sword}, '%')
							</if>
							<if test="item.key == 'ordname'">
							a.ordname LIKE CONCAT('%', #{sword}, '%')
							</if>
							<if test="item.key == 'ordid'">
							f.userid LIKE CONCAT('%', #{sword}, '%')
							</if>
							<if test="item.key == 'ordtel'">
							a.ordtel LIKE CONCAT('%', #{sword}, '%')
							</if>
							<if test="item.key == 'rcvname'">
							a.rcvname LIKE CONCAT('%', #{sword}, '%')
							</if>
							<if test="item.key == 'rcvtel'">
							a.rcvtel1 LIKE CONCAT('%', #{sword}, '%')
							</if>
							<if test="item.key == 'vircusname'">
							g.vircusname LIKE CONCAT('%', #{sword}, '%')
							</if>
							<if test="skey == 'addr'">
							(
								   CONCAT(a.rcvaddr, a.rcvaddrdetail) LIKE CONCAT('%', #{sword}, '%')
								OR CONCAT(a.rcvaddrroad, a.rcvaddrdetailroad) LIKE CONCAT('%', #{sword}, '%')
							)
							</if>
						</foreach>
						</if>
					</otherwise>
				</choose>
			</if>
			<if test="sword == null or sword == '' ">
			<if test="startdate != null and startdate != '' and enddate != null and enddate != '' ">
				AND a.orderdate BETWEEN STR_TO_DATE(CONCAT(#{startdate},'000000'), '%Y-%m-%d%H%i%s') AND STR_TO_DATE(CONCAT(#{enddate},'235959'), '%Y-%m-%d%H%i%s')
			</if>
			</if>
			<if test='isallchannel != null and isallchannel != "T" and muappchtypearr != null and muappchtypearr.size > 0'>
				AND
				<foreach index="index" collection="muappchtypearr" item="_item" open="(" close=")" separator="OR" >
					a.ordpathtype = #{_item}
				</foreach>
			</if>
			<if test="pricekey != null and pricekey != '' ">
		        <choose>
		            <when test="pricekey == 'payment'">
						<if test="minprice != null and minprice != ''">
						AND a.paytotprice <![CDATA[>=]]> #{minprice}
						</if>
						<if test="maxprice != null and maxprice != ''">
						AND a.paytotprice <![CDATA[<=]]> #{maxprice}
						</if>
		            </when>
		            <otherwise>
						<if test="minprice != null and minprice != ''">
						AND a.paytotprice <![CDATA[>=]]> #{minprice}
						</if>
						<if test="maxprice != null and maxprice != ''">
						AND a.paytotprice <![CDATA[<=]]> #{maxprice}
						</if>
		            </otherwise>
		        </choose>
		    </if>
			<if test="isnonmember != null and isnonmember != '' ">
			AND a.isnonmember = #{isnonmember}
			</if>
			<if test="isfrstorder != null and isfrstorder != '' ">
			AND a.isfrstorder = #{isfrstorder}
			</if>
			<if test='isallmember != null and isallmember != "T" and mumembertypearr != null and mumembertypearr.size > 0'>
			AND
				<foreach index="index" collection="mumembertypearr" item="_item" open="(" close=")" separator="OR" >
					a.dadamembertype = #{_item}
				</foreach>
			</if>
			<if test='isallmemlv != null and isallmemlv != "T" and mumemlvtypearr != null and mumemlvtypearr.size > 0'>
			AND
				<foreach index="index" collection="mumemlvtypearr" item="_item" open="(" close=")" separator="OR" >
					a.memlvtype = #{_item}
				</foreach>
			</if>
			<if test='isallpayway != null and isallpayway != "T" and paywaytypearr != null and paywaytypearr.size > 0'>
			AND
				<foreach index="index" collection="paywaytypearr" item="_item" open="(" close=")" separator="OR" >
					a.paywaytype = #{_item}
				</foreach>
			</if>
		) ta
	</sql>

	<sql id="selectAdminOrderClaimSQLNew">
		SELECT /* ComOrderMapper - selectAdminOrderClaimSQLNew 관리자용 전체 주문/클레임 조회 New */
			  ta.orderidx			/* 주문IDX */
			, ta.ordgdidx
			, ta.orgdelividx
			, ta.ordpathtypename	/* 주문경로명 */
			, DATE_FORMAT(ta.orderdate, '%Y-%m-%d %H:%i:%s') as orderday		/* 주문일시 */
			, DATE_FORMAT(ta.orderdate, '%Y-%m-%d') as orderdate 				/* 주문일자 */
			, DATE_FORMAT(ta.orderdate, '%H:%i:%s') as ordertime				/* 주문시간 */
			, DATE_FORMAT(ta.paymentdate, '%Y-%m-%d %H:%i:%s') as paymentday 	/* 결제일시 */
			, DATE_FORMAT(ta.paymentdate, '%Y-%m-%d') as paymentdate 			/* 결제일자 */
			, DATE_FORMAT(ta.paymentdate, '%H:%i:%s') as paymenttime			/* 결제시간 */
			, ta.ordno				/* 주문번호 */
			, ta.isfrstorder		/* 첫구매여부 */
			, ta.orduserno			/* 주문자회원번호 */
			, ta.ordname			/* 주문자명 */
			, ta.ordid				/* 주문자ID */
			, ta.ordtel				/* 주문자연락처 */
			, ta.isnonmember
			, ta.isnonmembername	/* 회원구분 */
			, ta.membertypename		/* 회원유형명 */
			, ta.memlvtypename		/* 회원등급명 */
			, ta.ispbgoodsname		/* 판매구분 */
			, ta.dealername			/* 파트너사명 */
			, ta.goodscode			/* 상품코드 */
			, ta.optioncode			/* 단품코드 */
			, ta.goodsturn			/* 상품순번 */
			, ta.goodsname			/* 상품명 */
			, ta.fulloptionnm		/* 옵션명 */
			, ta.ordcnt			/* 주문수량 */
			, IFNULL(ta.price, 0) AS price				/* 판매단가 */
			, IFNULL(ta.saleamt, 0) AS saleamt			/* 판매금액 */
			, ta.depth1name			/* 대카테고리 */
			, ta.commrate			/* 상품 수수로율 */
			, CAST(IFNULL(ta.commamt, 0) AS SIGNED INTEGER) AS commamt						/* 수수료 */
			, CAST(IF(ta.clmyn <![CDATA[<>]]> 'N', ta.clmproratioamt, ta.proratioamt) AS SIGNED INTEGER) AS proratioamt
			, CAST(IF(ta.clmyn <![CDATA[<>]]> 'N', ta.clmpartproratioamt, ta.partproratioamt) AS SIGNED INTEGER) AS partproratioamt
			, CAST(IF(ta.clmyn <![CDATA[<>]]> 'N', ta.clmcpnratioamt, ta.cpnratioamt) AS SIGNED INTEGER) AS cpnratioamt
			, CAST(IF(ta.clmyn <![CDATA[<>]]> 'N', ta.clmpartcpnrratioamt, ta.partcpnrratioamt) AS SIGNED INTEGER) AS partcpnrratioamt
			, CAST(IF(ta.clmyn <![CDATA[<>]]> 'N', ta.clmbasketdivamt, ta.basketdivamt) AS SIGNED INTEGER) AS basketdivamt
			, CAST(IF(ta.clmyn <![CDATA[<>]]> 'N', ta.clmempreserveamt, ta.empreserveamt) AS SIGNED INTEGER) AS empreserveamt			/* 임직원 적립금 */
			, CAST(IF(ta.clmyn <![CDATA[<>]]> 'N', ta.clmreserveamt, ta.reserveamt) AS SIGNED INTEGER) AS reserveamt			/* 일반 적립금 */
			, CAST(IF(ta.clmyn <![CDATA[<>]]> 'N', ta.clmdelivamt, ta.delivamt) AS SIGNED INTEGER) AS delivamt			/* 배송비 */
			, CAST(IF(ta.clmyn <![CDATA[<>]]> 'N', ta.clmDELIVCPNAMT, ta.DELIVCPNAMT) AS SIGNED INTEGER) AS DELIVCPNAMT			/* 배송비 쿠폰 */
			, ta.ordstatus			/* 주문상태 */
			, ta.ordstatusname		/* 주문상태명 */
			, ta.paywaytypename		/* 결제수단명 */
			, ta.isaddgoods			/* 추가상품여부 */
			, ta.iscombdelivname	/* 배송유형 */
			, (CASE WHEN ta.delivfaretype = 'DCT002'	/* 유료 */
					THEN CONCAT(ta.delivfaretypename, ' ', FORMAT(ta.delivfare, 0), '원')
					WHEN ta.delivfaretype = 'DCT003'	/* 조건부무료 */
					THEN CONCAT(ta.delivfaretypename, ' ', FORMAT(ta.delivfare, 0), '원 (', FORMAT(ta.delivfreefare, 0), '원 이상 무료)')
					ELSE ta.delivfaretypename
				END) AS delivfaretext		/* 배송조건 */
			, ta.rcvname			/* 수령인명 */
			, ta.rcvtel1			/* 수령인연락처 */
			, ta.rcvaddr			/* 수령인주소(상세주소포함) */
			, ta.delivcnt			/* 배송수량 */
			, ta.logistypename		/* 택배사 */
			, ta.invoiceno			/* 송장번호 */
			, ta.cfmconts
			FROM (
				SELECT
					  a.orderidx																/* 주문IDX */
					, b.ordgdidx																/* 주문상품IDX */
					, a.ordno																	/* 주문번호 */
					, c.orgdelividx																/* 주문배송IDX */
					, FN_GET_CODENAME('base', 'MUAPPCHTYPE', a.ordpathtype) AS ordpathtypename	/* 주문경로명 */
					, a.orderdate																/* 주문일 */
					, a.paymentdate																/* 결제일 */
					, IF(a.isfrstorder = 'T', 'Y', 'N') AS isfrstorder							/* 첫구매여부 */
					, a.ordname																	/* 주문자명 */
					, a.userno AS orduserno
					, f.userid AS ordid
					, a.ordtel
					, a.isnonmember
					, IF(a.isnonmember = 'T', '비회원', '회원') AS isnonmembername
					, FN_GET_CODENAME('base', 'DADAMEMBERTYPE', a.dadamembertype) AS membertypename
					, FN_GET_CODENAME('base', 'MEMLVTYPE', a.memlvtype) AS memlvtypename
					, IF(d.ispbgoods='T', '자사', '파트너사') AS ispbgoodsname					/* 판매구분(직매입여부) */
					, b.dealerno															/* 입점업체번호 */
					, (CASE WHEN b.dealerno is not null and b.dealerno != 0
							THEN (select name from t_dealer where userno = b.dealerno)
							ELSE 'D.PLOT'
					   END) AS dealername					/* 입점업체명 */
					, b.goodsno								/* 상품일련번호 */
					, d.goodscode							/* 상품코드 */
					, b.optioncode							/* 단품코드 */
					, b.goodsturn							/* 상품순번 */
					, d.goodsname							/* 상품명 */
					, a.basketcpnamt
					, (CASE WHEN af.ordcfmdate IS NULL OR af.ordcfmdate = ''
							THEN '미확정'
							ELSE CONCAT(DATE_FORMAT(af.ordcfmdate, '%Y-%m-%d %H:%i:%s'), ' (', FN_GET_CODENAME(null, 'ORDCFMTYPE',
							c.ordcfmtype), ')')
					   END) AS cfmconts
					, FN_GET_OPTION_CONCAT(b.goodsno, b.optioncode, ', ') as fulloptionnm
					, b.frstordcnt - ifnull(gg.clmcompcnt, 0) AS ordcnt	/* 주문수량 */
					, b.price								/* 판매단가 */
					, (b.price * (b.frstordcnt - ifnull(gg.clmcompcnt, 0))) AS saleamt		/* 판매금액 */
					, ff.depth1name
					, (CASE WHEN b.iscombdeliv = 'T' THEN '묶음배송'
								WHEN b.iscombdeliv = 'F' THEN '개별배송'
								ELSE ''
							END) AS iscombdelivname
					, b.delivfaretype
					, b.delivfare
					, b.delivfreefare
					, FN_GET_CODENAME('base', 'DELIVFARETYPE', b.delivfaretype) AS delivfaretypename
					, b.commrate
					, IFNULL(((c.delivcnt - ifnull(gg.rtncompcnt, 0)) * b.price) * b.commrate * 0.01, 0) AS commamt
					, IFNULL(b.salepromoamt * ((100 - tp.partratio) * 0.01), 0) as proratioamt
					, IFNULL(b.salepromoamt * (tp.partratio * 0.01), 0) AS partproratioamt
					, IFNULL(b.goodscpnamt * ((100 - tc2.partratio) * 0.01), 0) AS cpnratioamt
					, IFNULL(b.goodscpnamt * (tc2.partratio * 0.01), 0) AS partcpnrratioamt
					, IFNULL(h.salepromoamt * ((100 - tp.partratio) * 0.01), 0) as clmproratioamt
					, IFNULL(h.salepromoamt * (tp.partratio * 0.01), 0) AS clmpartproratioamt
					, IFNULL(h.goodscpnamt * ((100 - tc2.partratio) * 0.01), 0) AS clmcpnratioamt
					, IFNULL(h.goodscpnamt * (tc2.partratio * 0.01), 0) AS clmpartcpnrratioamt
					, IFNULL(b.basketdivamt, 0) AS basketdivamt
					, IFNULL(h.basketdivamt, 0) AS clmbasketdivamt
					, IFNULL(b.DELIVAMT, 0) AS delivamt /* 배송비 */
					, IFNULL(h.DELIVAMT, 0) AS clmdelivamt
					, IFNULL(b.DELIVCPNAMT, 0) AS delivcpnamt /* 배송비쿠폰 */
					, IFNULL(h.DELIVCPNAMT, 0) AS clmdelivcpnamt /* 배송비쿠폰 */
					, IFNULL(b.RESERVEAMT, 0) AS reserveamt
					, IFNULL(h.RESERVEAMT, 0) AS clmRESERVEAMT
					, IFNULL(b.empreserveamt, 0) AS empreserveamt
					, IFNULL(h.empreserveamt, 0) AS clmempreserveamt
					, IF((SELECT COUNT(tc4.clmidx) FROM t_claim tc4 WHERE tc4.CLMIDX = h.CLMIDX) > 0, 'Y', 'N') AS clmyn
					, a.rcvtel1
					, a.paywaytype							/* 결제수단 */
					, FN_GET_CODENAME(null, 'PAYWAYTYPE', a.paywaytype) AS paywaytypename	/* 결제수단명 */
					, IF(b.isaddgoods='T', 'Y', 'N') AS isaddgoods							/* 추가상품여부 */
					, c.ordstatus							/* 주문상태 */
					, FN_GET_CODENAME(null, 'ORDSTATUS', c.ordstatus) AS ordstatusname		/* 주문상태명 */
					, c.invoiceno							/* 운송장번호 */
					, IFNULL(c.logistype, (select LOGISTYPE from t_deliv_template where d.DELIVIDX = IDX)) as logistype							/* 택배사 */
					, FN_GET_CODENAME(null, 'LOGISTYPE', c.logistype) AS logistypename
					, d.iscncappr							/* 취소승인필요여부 */
					, a.rcvname								/* 수령인명 */
					, CONCAT(a.rcvaddr, ' ', a.rcvaddrdetail) AS rcvaddr	/* 수령인주소(상세주소포함) */
					, c.delivcnt - ifnull(gg.rtncompcnt, 0) as delivcnt
					, FN_GET_CLAIM_CNT(b.ordgdidx) AS clmingcnt
				FROM t_comorder a
				INNER JOIN  t_comorder_goods b ON a.orderidx = b.orderidx AND a.istrash = 'F'
				INNER JOIN t_comorder_goods_deliv c ON b.ordgdidx = c.ordgdidx AND c.istrash = 'F'
				INNER JOIN t_goods d ON b.goodsno = d.goodsno
				LEFT OUTER JOIN t_promotion tp
				ON b.SALEPROMOIDX = tp.PROMOIDX
				LEFT OUTER JOIN t_comcoupon tc2
				ON b.goodscpnidx = tc2.comcpnidx
				LEFT OUTER JOIN t_user f ON a.userno = f.no
				LEFT OUTER JOIN t_tossreceipt g ON b.orderidx = g.orderidx
				LEFT OUTER JOIN (
					SELECT t.orgdelividx
						 , MAX(t.delivdate) AS delivdate
						 , MAX(t.ordcfmdate) AS ordcfmdate
					FROM (	SELECT cgh.orgdelividx
								 , IF(cgh.aftval = 'ODS008', cgh.regdate, '') AS delivdate /* 배송완료 */
								 , IF(cgh.aftval = 'ODS009', cgh.regdate, '') AS ordcfmdate /* 구매확정 */
							FROM t_comorder_goods_his cgh
						 ) t
					GROUP BY t.orgdelividx
					ORDER BY t.orgdelividx
				) af ON c.orgdelividx = af.orgdelividx
				LEFT OUTER JOIN (
						WITH tc AS (
							SELECT
								tc.idx, tc.name, tc.depth, tc.parent
								FROM t_category tc
								WHERE siteid = 'base'
								AND hidden = 0
							)
							SELECT
								t.depth1idx, t.depth2idx, t.depth3idx, t.depth4idx,
								t.depth1name, t.depth2name, t.depth3name, t.depth4name,
								t.fullcategoryname, t.fullcategoryidx, t.cateidx
							FROM (
								SELECT
									a.idx AS depth1idx, b.idx AS depth2idx, c.idx AS depth3idx, d.idx AS depth4idx,
									a.name AS depth1name, b.name AS depth2name, c.name AS depth3name, d.name AS depth4name,
									concat_ws(' > ', a.name, b.name, c.name, d.name) AS fullcategoryname,
									concat(a.idx, b.idx, c.idx, d.idx) AS fullcategoryidx,
									(CASE WHEN d.idx IS NOT NULL THEN d.idx
										  WHEN c.idx IS NOT NULL THEN c.idx
										  WHEN b.idx IS NOT NULL THEN b.idx
										  ELSE a.idx
									 END) AS cateidx
								FROM tc a
								LEFT OUTER JOIN tc b ON a.idx = b.parent
								LEFT OUTER JOIN tc c ON b.idx = c.parent
								LEFT OUTER JOIN tc d ON c.idx = d.parent
								WHERE a.depth = 1
							) t
					) FF ON  FF.CATEIDX =  (SELECT CATEIDX FROM T_GOODS_CATEGORY WHERE GOODSNO = b.GOODSNO AND ISREPRE = 'T')
				LEFT JOIN (
					SELECT
						  ta.orderidx, tb.ordgdidx, max(ta.clmidx) AS clmidx, max(tb.clmgdidx) AS clmgdidx
						, SUM(tb.clmcnt) AS totclmcnt
						, SUM(CASE WHEN tb.cncstatus = 'CNS005' OR ta.rtnstatus = 'RTS010' THEN tb.clmcnt ELSE 0 END) AS clmcompcnt
						, SUM(CASE WHEN ta.rtnstatus = 'RTS010' THEN tb.clmcnt ELSE 0 END) AS rtncompcnt
					FROM t_claim ta
					INNER JOIN t_claim_goods tb ON ta.clmidx = tb.clmidx
					AND tb.isclmoption = 'T' AND ta.istrash = 'F'
					LEFT JOIN t_exchange_hist tc ON ta.clmidx = tc.afclmidx
					WHERE ta.istrash = 'F'
					GROUP BY ta.orderidx, tb.ordgdidx
					ORDER BY ta.orderidx DESC, tb.ordgdidx DESC
				) gg ON b.orderidx = gg.orderidx AND b.ordgdidx = gg.ordgdidx
				LEFT JOIN t_claim_goods h
				ON h.ORDGDIDX = b.ORDGDIDX
				AND h.CLMCNT  <![CDATA[ = ]]> 0
				AND h.CLMIDX = (SELECT MAX(CLMIDX) FROM t_claim tc3 WHERE tc3.orderidx =  b.orderidx AND clmtype != 'CLM003')
				WHERE a.siteid = #{siteid}
				AND a.istrash = 'F'
				<if test="sword != null and sword != '' ">
					<choose>
						<when test="skey == 'ordno'">
						AND a.ordno LIKE CONCAT('%', #{sword}, '%')
						</when>
						<when test="skey == 'ordname'">
						AND a.ordname LIKE CONCAT('%', #{sword}, '%')
						</when>
						<when test="skey == 'ordid'">
						AND f.userid LIKE CONCAT('%', #{sword}, '%')
						</when>
						<when test="skey == 'ordtel'">
						AND a.ordtel LIKE CONCAT('%', #{sword}, '%')
						</when>
						<when test="skey == 'rcvname'">
						AND a.rcvname LIKE CONCAT('%', #{sword}, '%')
						</when>
						<when test="skey == 'rcvtel'">
						AND a.rcvtel1 LIKE CONCAT('%', #{sword}, '%')
						</when>
						<when test="skey == 'vircusname'">
						AND g.vircusname LIKE CONCAT('%', #{sword}, '%')
						</when>
						<when test="skey == 'addr'">
						AND (
							   CONCAT(a.rcvaddr, a.rcvaddrdetail) LIKE CONCAT('%', #{sword}, '%')
							OR CONCAT(a.rcvaddrroad, a.rcvaddrdetailroad) LIKE CONCAT('%', #{sword}, '%')
						)
						</when>
						<otherwise>
							<if test="skeyarr != null and skeyarr.size > 0">
							AND
							<foreach index="index" collection="skeyarr" item="item" open="(" close=")" separator="OR" >
								<if test="item.key == 'ordno'">
								a.ordno LIKE CONCAT('%', #{sword}, '%')
								</if>
								<if test="item.key == 'ordname'">
								a.ordname LIKE CONCAT('%', #{sword}, '%')
								</if>
								<if test="item.key == 'ordid'">
								f.userid LIKE CONCAT('%', #{sword}, '%')
								</if>
								<if test="item.key == 'ordtel'">
								a.ordtel LIKE CONCAT('%', #{sword}, '%')
								</if>
								<if test="item.key == 'rcvname'">
								a.rcvname LIKE CONCAT('%', #{sword}, '%')
								</if>
								<if test="item.key == 'rcvtel'">
								a.rcvtel1 LIKE CONCAT('%', #{sword}, '%')
								</if>
								<if test="item.key == 'vircusname'">
								g.vircusname LIKE CONCAT('%', #{sword}, '%')
								</if>
								<if test="skey == 'addr'">
								(
									   CONCAT(a.rcvaddr, a.rcvaddrdetail) LIKE CONCAT('%', #{sword}, '%')
									OR CONCAT(a.rcvaddrroad, a.rcvaddrdetailroad) LIKE CONCAT('%', #{sword}, '%')
								)
								</if>
							</foreach>
							</if>
						</otherwise>
					</choose>
				</if>
				<if test="startdate != null and startdate != '' and enddate != null and enddate != '' ">
					AND a.orderdate BETWEEN STR_TO_DATE(CONCAT(#{startdate},'000000'), '%Y-%m-%d%H%i%s') AND STR_TO_DATE(CONCAT(#{enddate},'235959'), '%Y-%m-%d%H%i%s')
				</if>
				<if test='isallchannel != null and isallchannel != "T" and muappchtypearr != null and muappchtypearr.size > 0'>
					AND
					<foreach index="index" collection="muappchtypearr" item="_item" open="(" close=")" separator="OR" >
						a.ordpathtype = #{_item}
					</foreach>
				</if>
				<if test="pricekey != null and pricekey != '' ">
			        <choose>
			            <when test="pricekey == 'payment'">
							<if test="minprice != null and minprice != ''">
							AND a.paytotprice <![CDATA[>=]]> #{minprice}
							</if>
							<if test="maxprice != null and maxprice != ''">
							AND a.paytotprice <![CDATA[<=]]> #{maxprice}
							</if>
			            </when>
			            <otherwise>
							<if test="minprice != null and minprice != ''">
							AND a.paytotprice <![CDATA[>=]]> #{minprice}
							</if>
							<if test="maxprice != null and maxprice != ''">
							AND a.paytotprice <![CDATA[<=]]> #{maxprice}
							</if>
			            </otherwise>
			        </choose>
			    </if>
				<if test="isnonmember != null and isnonmember != '' ">
				AND a.isnonmember = #{isnonmember}
				</if>
				<if test="isfrstorder != null and isfrstorder != '' ">
				AND a.isfrstorder = #{isfrstorder}
				</if>
				<if test='isallmember != null and isallmember != "T" and mumembertypearr != null and mumembertypearr.size > 0'>
				AND
					<foreach index="index" collection="mumembertypearr" item="_item" open="(" close=")" separator="OR" >
						a.dadamembertype = #{_item}
					</foreach>
				</if>
				<if test='isallmemlv != null and isallmemlv != "T" and mumemlvtypearr != null and mumemlvtypearr.size > 0'>
				AND
					<foreach index="index" collection="mumemlvtypearr" item="_item" open="(" close=")" separator="OR" >
						a.memlvtype = #{_item}
					</foreach>
				</if>
				<if test='isallpayway != null and isallpayway != "T" and paywaytypearr != null and paywaytypearr.size > 0'>
				AND
					<foreach index="index" collection="paywaytypearr" item="_item" open="(" close=")" separator="OR" >
						a.paywaytype = #{_item}
					</foreach>
				</if>
			) ta
			WHERE ta.ordcnt  >  0
	</sql>

	<!-- 관리자용 주문목록 정렬조건 -->
	<sql id="adminOrderSortSQL">
		<choose>
			<when test="psort == 'ordpathtype_asc'">
			ORDER BY ta.ordpathtypename ASC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'ordpathtype_desc'">
			ORDER BY ta.ordpathtypename DESC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'orderdate_asc'">
			ORDER BY ta.orderdate ASC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'orderdate_desc'">
			ORDER BY ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'paymentdate_asc'">
			ORDER BY ta.paymentdate ASC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'paymentdate_desc'">
			ORDER BY ta.paymentdate DESC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'ordno_asc'">
			ORDER BY ta.ordno ASC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'ordno_desc'">
			ORDER BY ta.ordno DESC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'isfrstorder_asc'">
			ORDER BY ta.isfrstorder ASC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'isfrstorder_desc'">
			ORDER BY ta.isfrstorder DESC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'ordname_asc'">
			ORDER BY ta.ordname ASC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'ordname_desc'">
			ORDER BY ta.ordname DESC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'ordid_asc'">
			ORDER BY ta.ordid ASC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'ordid_desc'">
			ORDER BY ta.ordid DESC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'ordtel_asc'">
			ORDER BY ta.ordtel ASC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'ordtel_desc'">
			ORDER BY ta.ordtel DESC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'isnonmember_asc'">
			ORDER BY ta.isnonmembername ASC, ta.orderdate ASC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'isnonmember_desc'">
			ORDER BY ta.isnonmembername DESC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'membertype_asc'">
			ORDER BY ta.membertypename ASC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'membertype_desc'">
			ORDER BY ta.membertypename DESC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'memlvtype_asc'">
			ORDER BY ta.memlvtypename ASC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'memlvtype_desc'">
			ORDER BY ta.memlvtypename DESC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'ispbgoods_asc'">
			ORDER BY ta.ispbgoodsname ASC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'ispbgoods_desc'">
			ORDER BY ta.ispbgoodsname DESC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'dealername_asc'">
			ORDER BY ta.dealername ASC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'dealername_desc'">
			ORDER BY ta.dealername DESC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'goodscode_asc'">
			ORDER BY ta.goodscode ASC, ta.orderdate DESC, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'goodscode_desc'">
			ORDER BY ta.goodscode DESC, ta.orderdate DESC, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'optioncode_asc'">
			ORDER BY ta.optioncode ASC, ta.orderdate DESC, ta.goodscode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'optioncode_desc'">
			ORDER BY ta.optioncode DESC, ta.orderdate DESC, ta.goodscode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'goodsturn_asc'">
			ORDER BY ta.goodsturn ASC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'goodsturn_desc'">
			ORDER BY ta.goodsturn DESC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'goodsname_asc'">
			ORDER BY ta.goodsname ASC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'goodsname_desc'">
			ORDER BY ta.goodsname DESC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'optionconts_asc'">
			ORDER BY ta.optionconts ASC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'optionconts_desc'">
			ORDER BY ta.optionconts DESC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'ordcnt_asc'">
			ORDER BY ta.ordcnt ASC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'ordcnt_desc'">
			ORDER BY ta.ordcnt DESC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'price_asc'">
			ORDER BY ta.price ASC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'price_desc'">
			ORDER BY ta.price DESC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'totprice_asc'">
			ORDER BY ta.totprice ASC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'totprice_desc'">
			ORDER BY ta.totprice DESC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'vircusname_asc'">
			ORDER BY ta.vircusname ASC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'vircusname_desc'">
			ORDER BY ta.vircusname DESC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'paywaytype_asc'">
			ORDER BY ta.paywaytypename ASC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'paywaytype_desc'">
			ORDER BY ta.paywaytypename DESC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'isaddgoods_asc'">
			ORDER BY ta.isaddgoods ASC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'isaddgoods_desc'">
			ORDER BY ta.isaddgoods DESC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'iscombdeliv_asc'">
			ORDER BY ta.iscombdelivname ASC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'iscombdeliv_desc'">
			ORDER BY ta.iscombdelivname DESC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'delivfaretype_asc'">
			ORDER BY ta.delivfaretypename ASC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'delivfaretype_desc'">
			ORDER BY ta.delivfaretypename DESC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'delivamt_asc'">
			ORDER BY ta.delivamt ASC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'delivamt_desc'">
			ORDER BY ta.delivamt DESC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'ordstatus_asc'">
			ORDER BY ta.ordstatusname ASC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'ordstatus_desc'">
			ORDER BY ta.ordstatusname DESC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'rcvname_asc'">
			ORDER BY ta.rcvname ASC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'rcvname_desc'">
			ORDER BY ta.rcvname DESC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'rcvtel_asc'">
			ORDER BY ta.rcvtel ASC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'rcvtel_desc'">
			ORDER BY ta.rcvtel DESC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'rcvaddr_asc'">
			ORDER BY ta.rcvaddr ASC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'rcvaddr_desc'">
			ORDER BY ta.rcvaddr DESC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'logistypename_asc'">
			ORDER BY ta.logistypename ASC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'logistypename_desc'">
			ORDER BY ta.logistypename DESC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'invoiceno_asc'">
			ORDER BY ta.invoiceno ASC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'invoiceno_desc'">
			ORDER BY ta.invoiceno DESC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'cfmconts_asc'">
			ORDER BY ta.cfmconts ASC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'cfmconts_desc'">
			ORDER BY ta.cfmconts DESC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'rpaytotprice_asc'">
			ORDER BY ta.rpaytotprice ASC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'rpaytotprice_desc'">
			ORDER BY ta.rpaytotprice DESC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'undelivcnt_asc'">
			ORDER BY ta.undelivcnt ASC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'undelivcnt_desc'">
			ORDER BY ta.undelivcnt DESC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'indelivcnt_asc'">
			ORDER BY ta.indelivcnt ASC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'indelivcnt_desc'">
			ORDER BY ta.indelivcnt DESC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'compdelivcnt_asc'">
			ORDER BY ta.compdelivcnt ASC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'compdelivcnt_desc'">
			ORDER BY ta.compdelivcnt DESC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'cfmcnt_asc'">
			ORDER BY ta.cfmcnt ASC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'cfmcnt_desc'">
			ORDER BY ta.cfmcnt DESC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'canclecnt_asc'">
			ORDER BY ta.canclecnt ASC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'canclecnt_desc'">
			ORDER BY ta.canclecnt DESC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'returncnt_asc'">
			ORDER BY ta.returncnt ASC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'returncnt_desc'">
			ORDER BY ta.returncnt DESC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'exchangecnt_asc'">
			ORDER BY ta.exchangecnt ASC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'exchangecnt_desc'">
			ORDER BY ta.exchangecnt DESC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'delivcnt_asc'">
			ORDER BY ta.delivcnt ASC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'delivcnt_desc'">
			ORDER BY ta.delivcnt DESC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'dirdelivmsg_asc'">
			ORDER BY ta.dirdelivmsg ASC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<when test="psort == 'dirdelivmsg_desc'">
			ORDER BY ta.dirdelivmsg DESC, ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</when>
			<otherwise>
			ORDER BY ta.orderdate DESC, ta.goodscode, ta.optioncode, ta.ordgdidx, ta.orgdelividx
			</otherwise>
		</choose>
	</sql>

	<select id="selectAdminOrderInfo" parameterType="somap" resultType="somap">
		SELECT /* ComOrderMapper.xml selectAdminOrderInfo 관리자-주문기본정보 조회 */
			  a.ORDERIDX
			, a.ORDNO
			, a.ORDPATHTYPE
			, FN_GET_CODENAME(NULL, 'MUAPPCHTYPE', a.ORDPATHTYPE) AS ORDPATHTYPENAME
			, DATE_FORMAT(a.ORDERDATE, '%Y-%m-%d %H:%i:%s') AS ORDERDATE
			, DATE_FORMAT(a.PAYMENTDATE, '%Y-%m-%d %H:%i:%s') AS PAYMENTDATE
			, a.DADAMEMBERTYPE
			, FN_GET_CODENAME(NULL, 'DADAMEMBERTYPE', a.DADAMEMBERTYPE) AS MEMBERTYPENAME
			, a.MEMLVTYPE
			, FN_GET_CODENAME(NULL, 'MEMLVTYPE', a.MEMLVTYPE) AS MEMLVTYPENAME
			, IF(a.ISNONMEMBER = 'T', '비회원', '회원') AS ISNONMEMBERNAME
			, a.USERNO AS ORDUSERNO
			, a.ORDNAME
			, b.USERID AS ORDID
			, a.ORDTEL
			, a.ORDEMAIL
			, a.ISNONMEMBER
			, a.RCVNAME
			, a.RCVTEL1
			, a.RCVTEL2
			, a.RCVPOST
			, a.RCVADDR
			, a.RCVADDRDETAIL
			, a.RCVADDRROAD
			, a.RCVADDRDETAILROAD
			, a.RCVREQTYPE
			, a.RCVREQDETAIL
			, a.RCVSIGUNGUCODE
			, a.RCVBUILDINGCODE
			, a.RCVROADNAMECODE
		FROM t_comorder a
		LEFT OUTER JOIN t_user b ON a.userno = b.no
		WHERE a.SITEID = #{siteid}
		AND a.ORDNO = #{ordno}
	</select>

	<select id="selectAdminOrderDetail" parameterType="somap" resultType="somap">
		SELECT	/* ComOrderMapper.xml selectAdminOrderDetail 관리자-주문정보 상세조회 */
		      A.ORDERIDX
		    , A.ORDNO
		    , A.ORDNAME
		    , A.PAYWAYTYPE
		    , FN_GET_CODENAME(#{siteid}, 'PAYWAYTYPE', A.PAYWAYTYPE) AS PAYWAYTYPENAME
		    , A.ORDTOTPRICE - IFNULL(B.ORDTOTPRICE, 0) AS ORDTOTPRICE       /* 주문총금액 */
		    , A.DADADELIVAMT - IFNULL(B.DADADELIVAMT, 0) AS DADADELIVAMT   	/* 자사배송비 */
		    , A.PTNDELIVAMT - IFNULL(B.PTNDELIVAMT, 0) AS PTNDELIVAMT   	/* 파트너배송비 */
		    , A.TOTSALEPROMOAMT - IFNULL(B.TOTSALEPROMOAMT, 0) AS TOTSALEPROMOAMT /* 총프로모션 할인금액 */
		    , A.TOTGOODSCPNAMT - IFNULL(B.TOTGOODSCPNAMT, 0) AS TOTGOODSCPNAMT    /* 총상품쿠폰할인금액 */
		    , A.TOTDELIVCPNAMT - IFNULL(B.TOTDELIVCPNAMT, 0) AS TOTDELIVCPNAMT    /* 총배송비쿠폰할인금액 */
		    , A.BASKETCPNAMT - IFNULL(B.BASKETCPNAMT, 0) AS BASKETCPNAMT    /* 장바구니쿠폰할인금액 */
		    , A.PAYTOTPRICE - IFNULL(B.RTNAMT, 0) AS PAYTOTPRICE			/* 결제총금액 */
		    , A.RPAYTOTPRICE - IFNULL(B.RTNPAYAMT, 0) AS RPAYTOTPRICE		/* 실결제총금액 */
		    , A.RESERVETOTAMT - IFNULL(B.RTNRESAMT, 0) AS RESERVETOTAMT   	/* 적립금총사용금액 */
		    , A.EPOINTTOTAMT - IFNULL(B.RTNEPOAMT, 0) AS EPOINTTOTAMT    	/* EPOINT총사용금액 */
		    , A.EMPRESERVETOTAMT - IFNULL(B.RTNEMPRESAMT, 0) AS EMPRESERVETOTAMT  /* 임직원적립금총사용금액 */
		    , A.RCVTEL1														/* 수령인연락처1 */
			, A.RCVTEL2														/* 수령인연락처2 */
			, A.RCVREQTYPE													/* 배송요청타입 */
			, A.RCVNAME														/* 수령인명 */
			, A.RCVPOST														/* 수령인우편번호 */
			, A.RCVBUILDINGCODE												/* 수령인빌딩코드 */
			, A.RCVSIGUNGUCODE												/* 수령인시군구코드 */
			, A.RCVROADNAMECODE												/* 수령인도로명코드 */
			, A.ISFRSTORDER
			, A.ORDPATHTYPE
			, A.MEMLVTYPE
			, A.DADAMEMBERTYPE
			, IFNULL((SELECT IF(ischuju = 'T', 'J', IF(isios = 'T', 'I', 'N')) FROM T_ISOLATION_FARE WHERE POST =  A.RCVPOST  LIMIT 1), 'N') AS ISOLATETYPE 	/* 제주,도서산간구분(N : 일반, J :제주, I:도서산간) */
			, DATE_FORMAT(A.ORDERDATE, '%Y%m%d%H%i%s') as ORDERDATE				/* 주문일자 */
			, DATE_FORMAT(A.PAYMENTDATE, '%Y-%m-%d %H:%i:%s') AS PAYMENTDATE	/* 결제일시 */
			, A.RCVREQTYPE			/* 회수지배송요청타입 */
			, A.RCVREQDETAIL		/* 회수지배송요청사항 */
			, C.CARDCOMPANY 		/* 카드사 */
			, C.VIRBANK 			/* 가상계좌은행 */
			, C.ACCNTNUMBER			/* 가상계좌번호 */
			, C.TRSBANK				/* 계좌이체은행 */
			, C.MOPCARRIER			/* 핸드폰결제통신사 */
			, C.MOPMOBILENO			/* 핸드폰결제전화번호 */
			, C.PLANMONTH			/* 할부개월 */
			, IF(A.ISNONMEMBER = 'T', '비회원', '회원') AS ISNONMEMBERNAME	/* 비회원여부 */
			, D.USERID AS ORDID		/* 주문자ID */
			, A.ORDEMAIL			/* 주문자EMAIL */
			, A.ORDPOST 			/* 주문자우편번호 */
			, A.RCVPOST 			/* 수령인우편번호 */
			, A.RCVREQTYPE			/* 배송요청타입 */
			, FN_GET_CODENAME(NULL, 'RCVREQTYPE', A.RCVREQTYPE) AS RCVREQTYPENAME	/* 배송요청타입명 */
			, A.RCVREQDETAIL 		/* 배송요청사항 */
			, E.RCVADDR				/* 수령인주소 */
			, E.ORDADDR				/* 주문자주소 */
		<choose>
			<when test='ispartner != null and ispartner == true'>
			, IF(E.ispass90days='T', FN_GET_MASK_DATA('NAME', A.ORDNAME), A.ORDNAME) AS ORDNAME 	/* 주문자명 */
			, IF(E.ispass90days='T', FN_GET_MASK_DATA('TEL', A.ORDTEL), A.ORDTEL) AS ORDTEL 		/* 주문자연락처 */
			, IF(E.ispass90days='T', FN_GET_MASK_DATA('ADDR', E.ORDADDRDETAIL), E.ORDADDRDETAIL) AS ORDADDRDETAIL /* 주문자상세주소 */
			, IF(E.ispass90days='T', FN_GET_MASK_DATA('NAME', A.RCVNAME), A.RCVNAME) AS RCVNAME 	/* 수령인명 */
			, IF(E.ispass90days='T', FN_GET_MASK_DATA('TEL', A.RCVTEL1), A.RCVTEL1) AS RCVTEL1 		/* 수령인연락처1 */
			, IF(E.ispass90days='T', FN_GET_MASK_DATA('TEL', A.RCVTEL2), A.RCVTEL2) AS RCVTEL2 		/* 수령인연락처2 */
			, IF(E.ispass90days='T', FN_GET_MASK_DATA('ADDR', E.RCVADDRDETAIL), E.RCVADDRDETAIL) AS RCVADDRDETAIL /* 수령인상세주소 */
			</when>
			<otherwise>
			, A.ORDNAME				/* 주문자명 */
			, A.ORDTEL 				/* 주문자연락처 */
			, E.ORDADDRDETAIL		/* 주문자상세주소 */
			, A.RCVNAME 			/* 수령인명 */
			, A.RCVTEL1 			/* 수령인연락처1 */
			, A.RCVTEL2 			/* 수령인연락처2 */
			, E.RCVADDRDETAIL		/* 수령인상세주소 */
			</otherwise>
		</choose>
		FROM T_COMORDER A
		LEFT JOIN (
		        SELECT
		              t1.ORDERIDX
		            , SUM(t1.ORDTOTPRICE) AS ORDTOTPRICE        	/* 주문총금액 */
		            , SUM(t1.DADADELIVAMT) AS DADADELIVAMT       	/* 자사배송비 */
		            , SUM(t1.PTNDELIVAMT) AS PTNDELIVAMT        	/* 파트너배송비 */
		            , SUM(t1.TOTSALEPROMOAMT) AS TOTSALEPROMOAMT   	/* 총프로모션 할인금액 */
		            , SUM(t1.TOTGOODSCPNAMT) AS TOTGOODSCPNAMT     	/* 총상품쿠폰할인금액 */
		            , SUM(t1.TOTDELIVCPNAMT) AS TOTDELIVCPNAMT     	/* 총배송비쿠폰할인금액 */
		            , SUM(t1.BASKETCPNAMT) AS BASKETCPNAMT       	/* 장바구니쿠폰할인금액 */
		            , SUM(t1.RTNAMT) AS RTNAMT 						/* 환불금액 */
		            , SUM(t1.RTNPAYAMT) AS RTNPAYAMT   				/* 결제취소금액 */
		            , SUM(t1.RTNRESAMT) AS RTNRESAMT          		/* 적립금총사용금액 */
		            , SUM(t1.RTNEPOAMT) AS RTNEPOAMT          		/* EPOINT총사용금액 */
		            , SUM(t1.RTNEMPRESAMT) AS RTNEMPRESAMT       	/* 임직원적립금총사용금액 */
		        FROM T_CLAIM t1
		        WHERE t1.ISTRASH = 'F'
	            AND (t1.CNCSTATUS = 'CNS005'
	                    OR t1.RTNSTATUS = 'RTS010'
	                    OR t1.EXCSTATUS = 'EXS011')
		        GROUP BY t1.ORDERIDX
		    ) B
		ON A.ORDERIDX = B.ORDERIDX
		LEFT OUTER JOIN T_TOSSRECEIPT C
		ON A.ORDERIDX = C.ORDERIDX
		LEFT OUTER JOIN T_USER D ON A.USERNO = D.NO
		LEFT OUTER JOIN (
			SELECT
				  ORDERIDX
				, IF(datediff(now(), ORDERDATE)<![CDATA[>=]]>90, 'T', 'F') AS ISPASS90DAYS
				, IF(ORDADDRROAD IS NULL OR ORDADDRROAD='', ORDADDR, ORDADDRROAD) AS ORDADDR
				, IF(ORDADDRDETAILROAD IS NULL OR ORDADDRDETAILROAD='', ORDADDRDETAIL, ORDADDRDETAILROAD) AS ORDADDRDETAIL
				, IF(RCVADDRROAD IS NULL OR RCVADDRROAD='', RCVADDR, RCVADDRROAD) AS RCVADDR
				, IF(RCVADDRDETAILROAD IS NULL OR RCVADDRDETAILROAD='', RCVADDRDETAIL, RCVADDRDETAILROAD) AS RCVADDRDETAIL
			FROM T_COMORDER
			WHERE ISTRASH = 'F'
		) E ON A.ORDERIDX = E.ORDERIDX
		WHERE A.SITEID = #{siteid}
		AND A.ORDNO = #{ordno}
		AND A.ISTRASH = 'F'
	</select>

	<update id="updateOrderRcvInfo" parameterType="somap">
		UPDATE	/*ComOrderMemoMapper - updateOrderRcvInfo:: 관리자-주문배송지정보 수정*/
			 t_comorder
		SET  RCVPOST = #{rcvpost}
		   , RCVNAME = #{rcvname}
		   , RCVTEL1 = #{rcvtel1}
		   , RCVTEL2 = #{rcvtel2}
		   , RCVADDR = #{rcvaddr}
		   , RCVADDRDETAIL = #{rcvaddrdetail}
		   , RCVADDRROAD = #{rcvaddrroad}
		   , RCVADDRDETAILROAD = #{rcvaddrdetailroad}
		   , RCVREQTYPE = #{rcvreqtype}
		   , RCVREQDETAIL = #{rcvreqdetail}
		   , RCVSIGUNGUCODE = #{rcvsigungucode}
		   , RCVBUILDINGCODE = #{rcvbuildingcode}
		   , RCVROADNAMECODE = #{rcvroadnamecode}
		WHERE SITEID = #{siteid}
		AND ORDNO = #{ordno}
	</update>

	<!-- 주문번호 검색 -->
 	<select id="selectFrontComOrder" parameterType="somap" resultType="somap">
		SELECT /* ComOrderMapper.xml selectFrontComOrder 관리자-클레임용 주문상세정보 조회 */
			AA.*
			FROM (SELECT FLOOR((rnum-1) / #{perpage}+1) as PAGENUMBER, A.*
			FROM (SELECT
			@rownum:=@rownum+1 as rnum
			, ORDERIDX
			, ORDNO
			, date_format(ORDERDATE, '%Y.%m.%d') as ORDERDATE
		FROM T_COMORDER
		WHERE 1 = 1
		AND SITEID = #{siteid}
		AND USERNO = #{userno}
		AND REGDATE BETWEEN DATE_ADD(NOW(),INTERVAL -#{lastmonth} MONTH ) AND NOW()
    	AND ISTRASH = 'F'
    	ORDER BY orderdate DESC) A) AA
		<if test='startpage != null and startpage != ""'>
		WHERE PAGENUMBER = #{startpage}
		</if>
	</select>

	<!-- 주문번호 검색 총 갯수-->
 	<select id="selectFrontComOrderCount" parameterType="somap" resultType="Integer">
		SELECT /* ComOrderMapper.xml selectFrontComOrderCount 관리자-클레임용 주문상세정보 조회 총 갯수*/
			count(*)
			FROM (SELECT FLOOR((rnum-1) / #{perpage}+1) as PAGENUMBER, A.*
			FROM (SELECT
			@rownum:=@rownum+1 as rnum
			, ORDERIDX
			, ORDNO
			, date_format(ORDERDATE, '%Y.%m.%d') as ORDERDATE
		FROM T_COMORDER
		WHERE 1 = 1
		AND SITEID = #{siteid}
		AND USERNO = #{userno}
		AND REGDATE BETWEEN DATE_ADD(NOW(),INTERVAL -#{lastmonth} MONTH ) AND NOW()
    	AND ISTRASH = 'F'
    	ORDER BY orderdate DESC) A) AA
	</select>

	<select id="selectOutstandingTargetList" parameterType="somap" resultType="somap">
		SELECT /* ComOrderMapper.xml selectOutstandingTargetList */
			A.ORDERIDX, A.USERNO, A.ORDNO, DATE_FORMAT(A.ORDERDATE, '%Y년 %m월 %d일') AS ORDERDATE, B.ORDGDIDX, B.ORDCNT, ORDTEL AS MOBILE
			 , (SELECT GOODSNAME FROM T_GOODS WHERE GOODSNO = (SELECT GOODSNO FROM T_COMORDER_GOODS WHERE ORDGDIDX = B.ORDGDIDX)) AS GOODSNAME
		FROM T_COMORDER A
				 LEFT OUTER JOIN (
			SELECT
				ORDERIDX, MIN(ORDGDIDX) AS ORDGDIDX, COUNT(*) AS ORDCNT
			FROM T_COMORDER_GOODS
			GROUP BY ORDERIDX
		)B ON A.ORDERIDX = B.ORDERIDX AND A.ISTRASH = 'F'
		WHERE A.SITEID = #{siteid}
		AND A.ORDERIDX IN
		<foreach index="index" collection="idxarr" item="_item" open="(" close=")" separator="," >
			#{_item}
		</foreach>
	</select>

	<select id="selectDeliverySendTargetByInvoice" parameterType="somap" resultType="somap">
		SELECT /* ComOrderMapper.xml selectDeliverySendTargetByInvoice */
			A.ORDGDIDX, A.INVOICENO, A.LOGISTYPE, D.MOBILE AS NUMBER, D.USERNO
			 , FN_GET_CODENAME(C.SITEID, 'LOGISTYPE', A.LOGISTYPE) AS LOGISTYPENAME
			 , B.GOODSNO, C.USERNO, C.ORDNO, C.ORDTEL AS MOBILE, DATE_FORMAT(C.ORDERDATE, '%Y년 %m월 %d일') AS ORDERDATE
			 , (SELECT GOODSNAME FROM T_GOODS WHERE GOODSNO = B.GOODSNO) AS GOODSNAME
			 , (SELECT COUNT(*) -1 FROM T_COMORDER_GOODS WHERE ORDERIDX = C.ORDERIDX AND ISTRASH = 'F') AS ORDCNT
			 , C.RCVADDRROAD AS ADDR
		FROM (
				 SELECT MIN(ORDGDIDX) AS ORDGDIDX, LOGISTYPE, INVOICENO FROM T_COMORDER_GOODS_DELIV
				 WHERE ISTRASH = 'F'
			   	 AND ORDSTATUS = #{target_ord_status}
				 AND INVOICENO IN <foreach collection="invoice_no_arr" item="invoice" index="index" open="(" separator="," close=")">#{invoice}</foreach>
				 GROUP BY LOGISTYPE, INVOICENO
			 )A
				 LEFT OUTER JOIN T_COMORDER_GOODS B ON A.ORDGDIDX = B.ORDGDIDX AND ISTRASH = 'F'
				 LEFT OUTER JOIN T_COMORDER C ON B.ORDERIDX = C.ORDERIDX
				 LEFT OUTER JOIN T_MEMBER D ON C.USERNO = D.USERNO
		WHERE B.DELIVTYPE = 'DLT001'
	</select>

	<select id="selectCompDelivMsgTargetByInvoice" parameterType="somap" resultType="somap">
		SELECT /* ComOrderMapper.xml selectCompDelivMsgTargetByInvoice */
			A.ORDGDIDX, A.INVOICENO, A.LOGISTYPE, D.MOBILE AS NUMBER, D.USERNO
			 , FN_GET_CODENAME(C.SITEID, 'LOGISTYPE', A.LOGISTYPE) AS LOGISTYPENAME
			 , B.GOODSNO, C.USERNO, C.ORDNO, C.ORDTEL AS MOBILE, DATE_FORMAT(C.ORDERDATE, '%Y년 %m월 %d일') AS ORDERDATE
			 , (SELECT GOODSNAME FROM T_GOODS WHERE GOODSNO = B.GOODSNO) AS GOODSNAME
			 , A.ORDCNT - 1 AS ORDCNT
			 , C.RCVADDR AS ADDR
		FROM (
				 SELECT COUNT(*) AS ORDCNT, MIN(ORDGDIDX) AS ORDGDIDX, LOGISTYPE, INVOICENO
				 FROM T_COMORDER_GOODS_DELIV
				 WHERE ISTRASH = 'F'
			   	 AND ORDSTATUS = #{ordstatus}
			   	 <choose>
			   	 	<when test='orgdelividx != null and orgdelividx != ""'>
			   	 	AND ORGDELIVIDX = #{orgdelividx}
			   	 	</when>
			   	 	<otherwise>
			   	 	AND INVOICENO = #{invoiceno}
				 	GROUP BY LOGISTYPE, INVOICENO
			   	 	</otherwise>
			   	 </choose>
			 ) A
			 LEFT OUTER JOIN T_COMORDER_GOODS B ON A.ORDGDIDX = B.ORDGDIDX AND ISTRASH = 'F'
			 LEFT OUTER JOIN T_COMORDER C ON B.ORDERIDX = C.ORDERIDX
			 LEFT OUTER JOIN T_MEMBER D ON C.USERNO = D.USERNO
	</select>

	<select id="selectAdminMemberOrderList" parameterType="somap" resultType="somap">
		SELECT /* ComOrderMapper.xml selectAdminMemberOrderList */
			T.ORDERIDX, T.ORDNO, T.ORDGDIDX, DATE_FORMAT(T.ORDERDATE, '%Y.%m.%d') AS ORDERDATE, T.REGDATE
			 , (SELECT GOODSNO FROM T_COMORDER_GOODS WHERE ORDGDIDX = T.ORDGDIDX) AS GOODSNO
			 , (SELECT GOODSNAME FROM T_GOODS WHERE GOODSNO = (SELECT GOODSNO FROM T_COMORDER_GOODS WHERE ORDGDIDX = T.ORDGDIDX)) AS GOODSNAME
		FROM (
				 SELECT A.ORDERIDX,
						MAX(A.ORDNO)   AS ORDNO,
						MIN(ORDGDIDX)  AS ORDGDIDX,
						MAX(A.REGDATE) AS REGDATE,
						MAX(A.ORDERDATE) AS ORDERDATE
				 FROM T_COMORDER A
						  LEFT OUTER JOIN T_COMORDER_GOODS B ON A.ORDERIDX = B.ORDERIDX AND B.ISTRASH = 'F'
				 WHERE A.SITEID = #{siteid}
				   AND A.ISTRASH = 'F'
				   AND A.USERNO = #{userno}
				 GROUP BY A.ORDERIDX, A.ORDNO
			 )T
		ORDER BY T.ORDERDATE DESC
		LIMIT 3
	</select>

	<select id="selectOrderERPData" parameterType="somap" resultType="somap">
		SELECT /* ComOrderMapper.xml selectOrderERPData */
			ORDERIDX
			 , SITEID
			 , ORDNO
			 , USERNO
			 , ISNONMEMBER
			 , ORDPATHTYPE
			 , DATE_FORMAT(ORDERDATE, '%Y%m%d%H%i%s') AS ORDERDATE
			 , DATE_FORMAT(PAYMENTDATE, '%Y%m%d%H%i%s') AS PAYMENTDATE
			 , ORDTOTPRICE
			 , DADADELIVAMT
			 , PTNDELIVAMT
			 , TOTSALEPROMOAMT
			 , TOTGOODSCPNAMT
			 , TOTDELIVCPNAMT
			 , BASKETCPNAMT
			 , PAYWAYTYPE
			 , PAYTOTPRICE
			 , RPAYTOTPRICE
			 , ISGIFTORDER
			 , ISFRSTORDER
			 , MEMLVTYPE
			 , DADAMEMBERTYPE
			 , ORDTEL
			 , ORDPOST
			 , ORDADDR
			 , ORDADDRDETAIL
			 , ORDADDRROAD
			 , ORDADDRDETAILROAD
			 , CONCAT(ORDSIGUNGUCODE, ORDROADNAMECODE) AS ORDROADNAMECODE
			 , ORDBUILDINGCODE
			 , RCVNAME
			 , RCVTEL1
			 , RCVTEL2
			 , IFNULL(RCVADDR, '') AS RCVADDR
			 , RCVPOST
			 , IFNULL(RCVADDRDETAIL, '') AS RCVADDRDETAIL
			 , RCVADDRROAD
			 , RCVADDRDETAILROAD
			 , CONCAT(RCVSIGUNGUCODE, RCVROADNAMECODE) AS RCVROADNAMECODE
			 , RCVBUILDINGCODE
			 , ORDNAME
			 , ORDEMAIL
			 , RCVREQTYPE
			 , RCVREQDETAIL
			 , ISTRASH
			 , REGUSERID
			 , DATE_FORMAT(REGDATE, '%Y%m%d%H%i%s') AS REGDATE
			 , RESERVETOTAMT
			 , EPOINTTOTAMT
			 , EMPRESERVETOTAMT
			 , CASHRECEIPTTYPE
			 , CASHRECEIPTURL
			 , CASHRECEIPTKEY
		FROM T_COMORDER A
		WHERE SITEID = #{siteid}
		  AND A.ISTRASH = 'F'
		  AND ORDERIDX = #{orgno}
	</select>

	<select id="selectOrderDeliveryInfoERPData" parameterType="somap" resultType="somap">
		SELECT /* ComOrderMapper.xml selectOrderDeliveryInfoERPData */
			ORDERIDX
			 , ORDNO
			 , RCVNAME
			 , RCVTEL1
			 , RCVTEL2
			 , RCVADDR
			 , RCVADDRDETAIL
			 , RCVADDRDETAILROAD
			 , RCVPOST
			 , CONCAT(RCVSIGUNGUCODE, RCVROADNAMECODE) AS RCVROADNAMECODE
			 , RCVBUILDINGCODE
			 , B.AUD_TYPE_CD
			 , B.IFLOGIDX
		FROM T_COMORDER A INNER JOIN (
			SELECT
				ORGNO, GROUP_CONCAT(IFLOGIDX) AS IFLOGIDX, MIN(REGDATE) AS REGDATE
				 ,AUDDIV AS AUD_TYPE_CD
			FROM T_IFLOG
			WHERE IFTYPE = 'IFT010'
			  AND IFDATE IS NULL
			GROUP BY ORGNO, AUDDIV
		)B ON A.ORDERIDX = B.ORGNO
		WHERE SITEID = #{siteid}
		AND A.ISTRASH = 'F'
		ORDER BY B.REGDATE
	</select>

	<select id="selectOrderPaymentList" parameterType="somap" resultType="somap">
		SELECT /* ComOrderMapper.xml selectOrderPaymentList */
			'ORD' AS TYPE, A.ORDERIDX, ORDNO, DATE_FORMAT(PAYMENTDATE, '%Y-%m-%d %H:%i:%s') AS PAYMENTDATE, PAYTOTPRICE, RPAYTOTPRICE, PAYWAYTYPE, PAYMENTKEY
		FROM T_COMORDER A LEFT OUTER JOIN T_TOSSRECEIPT B ON A.ORDERIDX = B.ORDERIDX
		WHERE PAYMENTDATE IS NOT NULL
		  AND PAYMENTDATE BETWEEN STR_TO_DATE(#{startdate}, '%Y%m%d%H%i%s') AND STR_TO_DATE(#{enddate}, '%Y%m%d%H%i%s')
		  AND A.ISTRASH = 'F'
		UNION ALL
		SELECT
			'CLM' AS TYPE, A.CLMIDX, CLMNO, DATE_FORMAT(ADDPAYMENTDATE, '%Y-%m-%d %H:%i:%s') AS PAYMENTDATE, ADDPAYTOTPRICE, ADDRPAYTOTPRICE, ADDPAYWAYTYPE, PAYMENTKEY
		FROM T_CLAIM A LEFT OUTER JOIN T_TOSSRECEIPT B ON A.CLMIDX = B.CLMIDX
		WHERE ADDPAYMENTDATE IS NOT NULL
		  AND ADDPAYMENTDATE BETWEEN STR_TO_DATE(#{startdate}, '%Y%m%d%H%i%s') AND STR_TO_DATE(#{enddate}, '%Y%m%d%H%i%s')
		  AND A.ISTRASH = 'F'
	</select>

	<select id="selectOrderDashBoard" parameterType="somap" resultType="somap">
		SELECT /* ComOrderMapper.xml selectOrderDashBoard */
			FORMAT(IFNULL(SUM(IF(ORDSTATUS = 'ODS001',1 ,0)), 0), 0) AS ODS001
			 , FORMAT(IFNULL(SUM(IF(ORDSTATUS = 'ODS004',1 ,0)), 0), 0) AS ODS004
			 , FORMAT(IFNULL(SUM(IF(ORDSTATUS = 'ODS006',1 ,0)), 0), 0) AS ODS006
			 , FORMAT(IFNULL(SUM(IF(ORDSTATUS = 'ODS007',1 ,0)), 0), 0) AS ODS007
			 , FORMAT(IFNULL(SUM(IF(ORDSTATUS = 'ODS008',1 ,0)), 0), 0) AS ODS008
			 , FORMAT(IFNULL(SUM(IF(ORDSTATUS = 'ODS009',1 ,0)), 0), 0) AS ODS009
		FROM T_COMORDER A INNER JOIN T_COMORDER_GOODS B ON A.ORDERIDX = B.ORDERIDX AND A.ISTRASH = 'F'
		    			  INNER JOIN T_GOODS F ON B.GOODSNO = F.GOODSNO
						  INNER JOIN T_COMORDER_GOODS_DELIV C ON B.ORDGDIDX = C.ORDGDIDX AND B.ISTRASH = 'F' AND C.ISTRASH = 'F'
						  INNER JOIN (
			SELECT ORGDELIVIDX, MAX(REGDATE) AS REGDATE
			FROM T_COMORDER_GOODS_HIS
			GROUP BY ORGDELIVIDX
		)D ON C.ORGDELIVIDX = D.ORGDELIVIDX LEFT OUTER JOIN (
			SELECT
				TA.ORDERIDX, TB.ORDGDIDX
				 , SUM(TB.CLMCNT) AS CLMCNT
				 , SUM(CASE WHEN TB.CNCSTATUS = 'CNS005' OR TA.RTNSTATUS = 'RTS010' THEN TB.CLMCNT ELSE 0 END) AS CLMCOMPCNT
			FROM T_CLAIM TA
					 INNER JOIN T_CLAIM_GOODS TB ON TA.CLMIDX = TB.CLMIDX AND TB.ISCLMOPTION = 'T'
			WHERE (TB.CNCSTATUS NOT IN ('CNS003','CNS004') OR TA.RTNSTATUS NOT IN ('RTS004','RTS005','RTS009') OR TA.EXCSTATUS NOT IN ('EXS004','EXS005','EXS011')) -- 반려, 철회, 반송
			  AND TA.ISTRASH = 'F'
			GROUP BY TA.ORDERIDX, TB.ORDGDIDX
		)E ON A.ORDERIDX = E.ORDERIDX AND B.ORDGDIDX = E.ORDGDIDX
		WHERE C.ISTRASH = 'F'
		  AND 0 <![CDATA[<]]> B.FRSTORDCNT - IFNULL(E.CLMCOMPCNT, 0)
		  AND A.SITEID = #{siteid}
		  AND A.ORDERDATE BETWEEN DATE_FORMAT(DATE_ADD(CURRENT_TIMESTAMP, INTERVAL -1 MONTH), '%Y-%m-%d 00:00:00') AND DATE_FORMAT(CURRENT_TIMESTAMP, '%Y-%m-%d 23:59:59')
		  AND ORDSTATUS IN ('ODS001', 'ODS004', 'ODS006', 'ODS007', 'ODS008', 'ODS009')
		<if test='userno !=null and userno !="" '>
		  AND B.DEALERNO = #{userno}
		</if>
		ORDER BY ORDSTATUS
	</select>

	<select id="selectOrderClaimDelayDashBoard" parameterType="somap" resultType="somap">
		SELECT /* ComOrderMapper.xml selectOrderClaimDelayDashBoard */
			A.IDX
			 , FORMAT(IFNULL(ORDDELAY, 0), 0) AS ORDDELAY
			 , FORMAT(IFNULL(DELIVDELAY - CNCDELAY, 0), 0) AS DELIVDELAY
			 , FORMAT(IFNULL(CNCDELAY, 0), 0) AS CNCDELAY
			 , FORMAT(IFNULL(RTNDELAY, 0), 0) AS RTNDELAY
			 , FORMAT(IFNULL(EXCDELAY, 0), 0) AS EXCDELAY
		FROM (
				 SELECT
					 1 AS IDX
					  , SUM(IF(DATEDIFF(CURRENT_TIMESTAMP, D.REGDATE) <![CDATA[>=]]> 4 AND C.ORDSTATUS = 'ODS004', 1, 0)) AS ORDDELAY
					  , SUM(IF(C.ORDSTATUS = 'ODS006' AND C.INVOICENO IS NULL AND DATEDIFF(CURRENT_TIMESTAMP, C.REGDATE) <![CDATA[>]]> 3, 1, 0)) AS DELIVDELAY
				 FROM T_COMORDER A INNER JOIN T_COMORDER_GOODS B ON A.ORDERIDX = B.ORDERIDX AND B.ISTRASH = 'F'
								   INNER JOIN T_COMORDER_GOODS_DELIV C ON B.ORDGDIDX = C.ORDGDIDX AND C.ISTRASH = 'F'
								   INNER JOIN (
					 SELECT ORGDELIVIDX, MAX(REGDATE) AS REGDATE
					 FROM T_COMORDER_GOODS_HIS
					 GROUP BY ORGDELIVIDX
				 )D ON C.ORGDELIVIDX = D.ORGDELIVIDX LEFT OUTER JOIN (
					SELECT
						TA.ORDERIDX, TB.ORDGDIDX
						 , SUM(TB.CLMCNT) AS CLMCNT
						 , SUM(CASE WHEN TB.CNCSTATUS = 'CNS005' OR TA.RTNSTATUS = 'RTS010' THEN TB.CLMCNT ELSE 0 END) AS CLMCOMPCNT
					FROM T_CLAIM TA
							 INNER JOIN T_CLAIM_GOODS TB ON TA.CLMIDX = TB.CLMIDX AND TB.ISCLMOPTION = 'T'
					WHERE (TB.CNCSTATUS NOT IN ('CNS003','CNS004') OR TA.RTNSTATUS NOT IN ('RTS004','RTS005','RTS009') OR TA.EXCSTATUS NOT IN ('EXS004','EXS005','EXS011')) -- 반려, 철회, 반송
					  AND TA.ISTRASH = 'F'
					GROUP BY TA.ORDERIDX, TB.ORDGDIDX
				)E ON A.ORDERIDX = E.ORDERIDX AND B.ORDGDIDX = E.ORDGDIDX
				 WHERE A.SITEID = #{siteid}
				 AND A.ISTRASH = 'F'
				 AND D.REGDATE BETWEEN DATE_FORMAT(DATE_ADD(CURRENT_TIMESTAMP, INTERVAL -364 DAY), '%Y-%m-%d 00:00:00') AND CURRENT_TIMESTAMP
				 AND 0 <![CDATA[<]]> B.FRSTORDCNT - IFNULL(E.CLMCOMPCNT, 0)
				<if test='userno !=null and userno !="" '>
					AND B.DEALERNO = #{userno}
				</if>
			 ) A INNER JOIN (
			SELECT
				1 AS IDX
				/* 파트너사 “승인필요상품 Y”인 경우이거나 “배송준비중” 상태에서 파트너사가 미 승인한 상태에서 승인필요상품 Y일경우는 처리할 필요가 없도록 프로세스 바뀜 */
				 , SUM(IF(D.ORDSTATUS = 'ODS006' AND B.CNCSTATUS = 'CNS001', 1, 0)) AS CNCDELAY
				 , SUM(IF(A.CLMTYPE = 'CLM002' AND RTNSTATUS IN ('RTS001', 'RTS003') AND DATEDIFF(CURRENT_TIMESTAMP, A.CLMREQDATE) <![CDATA[>=]]> 3, 1, 0) + IF(A.CLMTYPE = 'CLM002' AND RTNSTATUS IN ('RTS006', 'RTS008'), 1, 0)) AS RTNDELAY
				 , SUM(IF(A.CLMTYPE = 'CLM003' AND EXCSTATUS IN ('EXS001', 'EXS003', 'EXS006', 'EXS008'), 1, 0)) AS EXCDELAY
			FROM T_CLAIM A INNER JOIN T_CLAIM_GOODS B ON A.CLMIDX = B.CLMIDX AND B.ISTRASH = 'F'
						   INNER JOIN T_COMORDER_GOODS C ON B.ORDGDIDX = C.ORDGDIDX AND C.ISTRASH = 'F'
						   INNER JOIN T_COMORDER_GOODS_DELIV D ON C.ORDGDIDX = D.ORDGDIDX AND D.ISTRASH = 'F'
			WHERE A.SITEID = #{siteid}
			AND A.ISTRASH = 'F'
			AND B.ISCLMOPTION = 'T'
			AND A.CLMREQDATE BETWEEN DATE_FORMAT(DATE_ADD(CURRENT_TIMESTAMP, INTERVAL -364 DAY), '%Y-%m-%d 00:00:00') AND CURRENT_TIMESTAMP
			<if test='userno !=null and userno !="" '>
				AND C.DEALERNO = #{userno}
			</if>
		)B ON A.IDX = B.IDX
	</select>

	<select id="selectOrderClaimAccountDashBoard" parameterType="somap" resultType="somap">
		SELECT /* ComOrderMapper.xml selectOrderClaimAccountDashBoard */
			FORMAT(IFNULL(SUM( ((PRICE - SALEPROMOAMT) -  (IFNULL(CNCPRICE, 0) - IFNULL(CNCSALEPROMOAMT, 0)))), 0), 0) AS SALEAMT
			, FORMAT(IFNULL(ROUND(SUM( ((PRICE - SALEPROMOAMT - (GOODSCPNAMT + DELIVCPNAMT + BASKETCPNAMT) + DELIVAMT) -  (IFNULL(CNCPRICE, 0) - IFNULL(CNCSALEPROMOAMT, 0) - (IFNULL(CNCGOODSCPNAMT, 0) + IFNULL(CNCDELIVCPNAMT, 0) + IFNULL(CNCBASKETCPNAMT, 0)) + IFNULL(CNCDELIVAMT, 0) ))), 0), 0), 0) AS ACCOUNTAMT
			, FORMAT(IFNULL(ROUND(SUM( ((PRICE - SALEPROMOAMT - (GOODSCPNAMT + DELIVCPNAMT + BASKETCPNAMT) - (RESERVEAMT + EPOINTAMT + EMPRESERVEAMT) + DELIVAMT) -  (IFNULL(CNCPRICE, 0) - IFNULL(CNCSALEPROMOAMT, 0) - (IFNULL(CNCGOODSCPNAMT, 0) + IFNULL(CNCDELIVCPNAMT, 0) + IFNULL(CNCBASKETCPNAMT, 0)) - (IFNULL(CNCRESERVEAMT, 0) + IFNULL(CNCEPOINTAMT, 0) + IFNULL(CNCEMPRESERVEAMT, 0)) + IFNULL(CNCDELIVAMT, 0) ))), 0), 0), 0) AS PAYAMT
			, FORMAT(IFNULL(ROUND(SUM(SALEPROMOAMT - IFNULL(CNCSALEPROMOAMT, 0)), 0), 0), 0) AS SALEPROMOAMT
			, FORMAT(IFNULL(ROUND(SUM( (GOODSCPNAMT + DELIVCPNAMT + BASKETCPNAMT) - (IFNULL(CNCGOODSCPNAMT, 0) + IFNULL(CNCDELIVCPNAMT, 0) + IFNULL(CNCBASKETCPNAMT, 0))), 0), 0), 0) AS GOODSCPNAMT
			, FORMAT(IF(#{standard} = 'BUY', 0, IFNULL(SUM(RTNAMT), 0)), 0) AS RTNAMT
			, (CASE WHEN #{saletype} = 'MONTH' THEN CONCAT(MONTH(CURRENT_TIMESTAMP), '월')
				   WHEN #{saletype} = 'WEEK' THEN CONCAT(STR_TO_DATE(CONCAT(YEARWEEK(CURRENT_TIMESTAMP),'Sunday'), '%X%V %W'), ' ~ ', STR_TO_DATE(CONCAT(YEARWEEK(CURRENT_TIMESTAMP),'Saturday'), '%X%V %W'))
				   WHEN #{saletype} = 'DAY' THEN DATE_FORMAT(CURRENT_TIMESTAMP, '%Y-%m-%d') ELSE '' END) AS INFOSTR
		FROM (
			<include refid="statOrderClaimBasicDataNew"/>
		)DASH
	</select>

	<select id="selectDashBoardOrderClaimCount" parameterType="somap" resultType="somap">
		SELECT /* ComOrderMapper.xml selectDashBoardOrderClaimCount */
			ORDCNT, COMPCNT, CLMCNT
		FROM (
			SELECT
				COUNT(*) AS ORDCNT
			FROM (
				SELECT
					A.ORDERIDX
				FROM T_COMORDER A INNER JOIN T_COMORDER_GOODS B ON A.ORDERIDX = B.ORDERIDX AND B.ISTRASH = 'F'
				WHERE A.ISTRASH = 'F'
				AND SITEID = #{siteid}
				<if test="userno !=null and userno != ''">
					AND DEALERNO = #{userno}
				</if>
				<choose>
					<when test="saletype == 'MONTH'">
						AND PAYMENTDATE BETWEEN DATE_FORMAT(CURRENT_TIMESTAMP, '%Y%m01000000') AND DATE_FORMAT(LAST_DAY(CURRENT_TIMESTAMP), '%Y%m%d235959')
					</when>
					<when test="saletype == 'WEEK'">
						AND YEARWEEK(CURRENT_TIMESTAMP) = YEARWEEK(PAYMENTDATE)
					</when>
					<when test="saletype == 'DAY'">
						AND PAYMENTDATE BETWEEN DATE_FORMAT(CURRENT_TIMESTAMP, '%Y%m%d000000') AND DATE_FORMAT(CURRENT_TIMESTAMP, '%Y%m%d235959')
					</when>
				</choose>
		    	GROUP BY A.ORDERIDX
			 	)T
			 )A INNER JOIN (
			SELECT
				COUNT(*) AS COMPCNT
			FROM
				(
					SELECT
						B.ORDERIDX, B.ORDGDIDX
					FROM T_COMORDER A INNER JOIN T_COMORDER_GOODS B ON A.ORDERIDX = B.ORDERIDX
									  INNER JOIN T_COMORDER_GOODS_DELIV C ON B.ORDGDIDX = C.ORDGDIDX
									  INNER JOIN (
						SELECT
							ORGDELIVIDX, AFTVAL, MAX(REGDATE) AS REGDATE
						FROM T_COMORDER_GOODS_HIS
						WHERE AFTVAL = 'ODS009'
						GROUP BY ORGDELIVIDX, AFTVAL
					)D ON C.ORGDELIVIDX = D.ORGDELIVIDX AND C.ORDSTATUS = 'ODS009'
					WHERE SITEID = #{siteid}
					<if test="userno !=null and userno != ''">
						AND DEALERNO = #{userno}
					</if>
					  AND A.ISTRASH = 'F'
					  AND B.ISTRASH = 'F'
					  AND C.ISTRASH = 'F'
					<choose>
						<when test="saletype == 'MONTH'">
							AND D.REGDATE BETWEEN DATE_FORMAT(CURRENT_TIMESTAMP, '%Y%m01000000') AND DATE_FORMAT(LAST_DAY(CURRENT_TIMESTAMP), '%Y%m%d235959')
						</when>
						<when test="saletype == 'WEEK'">
							AND YEARWEEK(CURRENT_TIMESTAMP) = YEARWEEK(D.REGDATE)
						</when>
						<when test="saletype == 'DAY'">
							AND D.REGDATE BETWEEN DATE_FORMAT(CURRENT_TIMESTAMP, '%Y%m%d000000') AND DATE_FORMAT(CURRENT_TIMESTAMP, '%Y%m%d235959')
						</when>
					</choose>
					GROUP BY B.ORDERIDX, B.ORDGDIDX
				)T
		)B INNER JOIN (
			SELECT
				COUNT(*) CLMCNT
			FROM T_CLAIM A INNER JOIN T_CLAIM_GOODS B ON A.CLMIDX = B.CLMIDX INNER JOIN T_COMORDER_GOODS C ON B.ORDGDIDX = C.ORDGDIDX AND C.ISTRASH = 'F'
			WHERE A.ISTRASH = 'F'
			  AND B.ISTRASH = 'F'
			  AND SITEID = #{siteid}
			  AND B.ISCLMOPTION = 'T'
				<if test="userno !=null and userno != ''">
					AND DEALERNO = #{userno}
				</if>
			  AND CASE WHEN CLMTYPE = 'CLM001' THEN A.CNCSTATUS = 'CNS005'
					   WHEN CLMTYPE = 'CLM002' THEN RTNSTATUS = 'RTS010'
					   WHEN CLMTYPE = 'CLM003' THEN EXCSTATUS = 'EXS012'
					   ELSE FALSE END
			<choose>
				<when test="saletype == 'MONTH'">
					AND CLMCOMPDATE BETWEEN DATE_FORMAT(CURRENT_TIMESTAMP, '%Y%m01000000') AND DATE_FORMAT(LAST_DAY(CURRENT_TIMESTAMP), '%Y%m%d235959')
				</when>
				<when test="saletype == 'WEEK'">
					AND YEARWEEK(CURRENT_TIMESTAMP) = YEARWEEK(CLMCOMPDATE)
				</when>
				<when test="saletype == 'DAY'">
					AND CLMCOMPDATE BETWEEN DATE_FORMAT(CURRENT_TIMESTAMP, '%Y%m%d000000') AND DATE_FORMAT(CURRENT_TIMESTAMP, '%Y%m%d235959')
				</when>
			</choose>
		)C
	</select>

	<select id="selectOrderClaimAccountCalcDashBoard" parameterType="somap" resultType="somap">
		SELECT /* ComOrderMapper.xml selectOrderClaimAccountCalcDashBoard */
			IFNULL(ROUND(SUM( ((PRICE - SALEPROMOAMT) -  (IFNULL(CNCPRICE, 0) - IFNULL(CNCSALEPROMOAMT, 0)))) / ABS(#{divide}), 0), 0) AS CALCAMT
		FROM (
			<include refid="statOrderClaimBasicDataNew"/>
		)DASH
	</select>

	<select id="selectYearCalcListDashBoard" parameterType="somap" resultType="somap">
		SELECT /* ComOrderMapper.xml selectYearCalcListDashBoard */
			DATE_FORMAT(STR_TO_DATE(CONCAT(A.MONTH, '01'), '%Y%m%d'), '%Y-%m') AS MONTH
			, IFNULL(SUM( ((PRICE - SALEPROMOAMT) -  (IFNULL(CNCPRICE, 0) - IFNULL(CNCSALEPROMOAMT, 0)))), 0) AS SALEAMT
			, IFNULL(ROUND(SUM( ((PRICE - SALEPROMOAMT - (GOODSCPNAMT + DELIVCPNAMT + BASKETCPNAMT) - (RESERVEAMT + EPOINTAMT + EMPRESERVEAMT) + DELIVAMT) -  (IFNULL(CNCPRICE, 0) - IFNULL(CNCSALEPROMOAMT, 0) - (IFNULL(CNCGOODSCPNAMT, 0) + IFNULL(CNCDELIVCPNAMT, 0) + IFNULL(CNCBASKETCPNAMT, 0)) - (IFNULL(CNCRESERVEAMT, 0) + IFNULL(CNCEPOINTAMT, 0) + IFNULL(CNCEMPRESERVEAMT, 0)) + IFNULL(CNCDELIVAMT, 0) ))), 0) , 0) AS REALAMT
		FROM (
			WITH RECURSIVE DATES AS (
				SELECT STR_TO_DATE(CONCAT(#{year}, '0101'), '%Y%m%d') AS DT
				UNION
				SELECT DATE_ADD(DATES.DT, INTERVAL 1 MONTH) FROM DATES WHERE DATE_ADD(DATES.DT, INTERVAL 1 MONTH) <![CDATA[<=]]> DATE_FORMAT(LAST_DAY(STR_TO_DATE(CONCAT(#{year}, '1231'), '%Y%m%d')), '%Y%m%d')
				)
			SELECT DATE_FORMAT(DATES.DT, '%Y%m') AS MONTH
			FROM DATES
		)A LEFT OUTER JOIN ( <include refid="statOrderClaimBasicDataNew"/> )B ON A.MONTH = DATE_FORMAT(B.COMPLETEDATE, '%Y%m')
		GROUP BY A.MONTH
	</select>

	<select id="selectTwoWeekPartnersDashBoard" parameterType="somap" resultType="somap">
		SELECT /* ComOrderMapper.xml selectTwoWeekPartnersDashBoard */
			   A.TARGET_DAY
			 , MAX(TARGET_DATE) AS TARGET_DATE
			 , IFNULL(ROUND(SUM( ((PRICE - SALEPROMOAMT - (GOODSCPNAMT + DELIVCPNAMT + BASKETCPNAMT) - (RESERVEAMT + EPOINTAMT + EMPRESERVEAMT) + DELIVAMT) -  (IFNULL(CNCPRICE, 0) - IFNULL(CNCSALEPROMOAMT, 0) - (IFNULL(CNCGOODSCPNAMT, 0) + IFNULL(CNCDELIVCPNAMT, 0) + IFNULL(CNCBASKETCPNAMT, 0)) - (IFNULL(CNCRESERVEAMT, 0) + IFNULL(CNCEPOINTAMT, 0) + IFNULL(CNCEMPRESERVEAMT, 0)) + IFNULL(CNCDELIVAMT, 0) ))), 0), 0) AS SALEAMT
		FROM (
			WITH RECURSIVE DATES AS (
				SELECT DATE_ADD(CURRENT_TIMESTAMP, INTERVAL -13 DAY) AS DT
				UNION
				SELECT DATE_ADD(DATES.DT, INTERVAL 1 DAY) FROM DATES WHERE DATE_ADD(DATES.DT, INTERVAL 1 DAY) <![CDATA[<=]]> CURRENT_TIMESTAMP
				)
			SELECT DATE_FORMAT(DATES.DT, '%d') AS TARGET_DAY, DATE_FORMAT(DATES.DT, '%Y%m%d') AS TARGET_DATE
			FROM DATES
		)A LEFT OUTER JOIN (
			<include refid="statOrderClaimBasicDataNew"/>
		)B ON A.TARGET_DAY = DATE_FORMAT(B.COMPLETEDATE, '%d')
		GROUP BY A.TARGET_DAY
	</select>

	<select id="selectStatsProductRankByList" parameterType="somap" resultType="somap">
	SELECT /* ComOrderMapper.xml selectStatsProductRankByList */
		<choose>
			<when test="gubun == 'GOODS'">
				GOODSNO, GOODSCODE, GOODSNAME
			</when>
			<when test="gubun == 'OPTION'">
				GOODSNO, GOODSCODE, GOODSNAME, OPTIONCODE, OPTIONNAME
			</when>
		</choose>
		 , FORMAT(IFNULL(FRSTORDCNT, 0), 0) AS FRSTORDCNT
		 , FORMAT(IFNULL(CLMCNT, 0), 0) AS CLMCNT
		 , FORMAT(IFNULL((FRSTORDCNT - CLMCNT), 0), 0) AS RECNT
 		 , FORMAT(IFNULL(IF(#{amtstandard} = 'NORMAL', PRICE, ACCOUNT), 0), 0) AS PRICE
		 , FORMAT(IFNULL(PURE, 0), 0) AS PURE
		 , FORMAT(IFNULL(GOODSCPNAMT, 0), 0) AS GOODSCPNAMT
		 , FORMAT(IFNULL(MARGIN, 0), 0) AS MARGIN
		 , FORMAT(IFNULL(RTNAMT, 0), 0) AS RTNAMT
		 , FORMAT(IFNULL((PURE - RTNAMT), 0), 0) AS BILLING
		 , FORMAT(IFNULL(ROUND((MARGIN / (PRICE - RTNAMT) * 100) , 0), 0), 0) AS MARGINPER
		 , FORMAT(RANK() OVER (ORDER BY (FRSTORDCNT - CLMCNT) DESC), 0) AS RANKING
	FROM (
			SELECT
				<choose>
					<when test="gubun == 'GOODS'">
						GOODSNO, MAX(GOODSCODE) AS GOODSCODE, MAX(GOODSNAME) AS GOODSNAME
					</when>
					<when test="gubun == 'OPTION'">
						GOODSNO, MAX(GOODSCODE) AS GOODSCODE, MAX(GOODSNAME) AS GOODSNAME, MAX(OPTIONCODE) AS OPTIONCODE, FN_GET_OPTION_CONCAT(GOODSNO, OPTIONCODE, ', ') AS OPTIONNAME
					</when>
				</choose>
				, SUM(T.FRSTORDCNT) AS FRSTORDCNT
				, SUM(IFNULL(T.CLMCNT, 0)) AS CLMCNT
				, SUM( ((T.PRICE - T.SALEPROMOAMT) -  (IFNULL(T.CNCPRICE, 0) - IFNULL(T.CNCSALEPROMOAMT, 0))) ) AS PRICE
				, ROUND(SUM( ((T.PRICE - T.SALEPROMOAMT - (T.GOODSCPNAMT) + T.DELIVAMT) -  (IFNULL(T.CNCPRICE, 0) - IFNULL(T.CNCSALEPROMOAMT, 0) - (IFNULL(T.CNCGOODSCPNAMT, 0)) + IFNULL(T.CNCDELIVAMT, 0) ))), 0) AS ACCOUNT
				, ROUND(SUM( ((T.PRICE - T.SALEPROMOAMT - (T.GOODSCPNAMT)) -  (IFNULL(T.CNCPRICE, 0) - IFNULL(T.CNCSALEPROMOAMT, 0) - (IFNULL(T.CNCGOODSCPNAMT, 0)) ))), 0) AS PURE
				, SUM(SALEPROMOAMT - IFNULL(CNCSALEPROMOAMT, 0)) AS SALEPROMOAMT
				, SUM((GOODSCPNAMT) - (IFNULL(CNCGOODSCPNAMT, 0))) AS GOODSCPNAMT
				, ROUND(SUM(MARGIN - IFNULL(CNCMARGIN, 0)), 0) AS MARGIN
				, IF(#{standard} = 'BUY' , 0, SUM(IFNULL(RTNAMT, 0))) AS RTNAMT
			FROM ( <include refid="statOrderClaimBasicDataNew"/> )T
			LEFT OUTER JOIN (
				WITH RECURSIVE CATEGORY AS (
					SELECT TA.IDX AS CATEIDX, TA.NAME, TA.DEPTH, TA.PARENT, TA.NAME AS PATH, CONCAT(TA.IDX, '') AS DEPTH1IDX
						 , CAST(NULL AS CHAR(10)) AS DEPTH2IDX, CAST(NULL AS CHAR(10)) AS DEPTH3IDX, CAST(NULL AS CHAR(10)) AS DEPTH4IDX
					FROM T_CATEGORY TA
					WHERE DEPTH = 1
					UNION ALL
					SELECT TA.IDX AS CATEIDX, TA.NAME, TA.DEPTH, TA.PARENT, CONCAT_WS(' > ', TB.PATH, TA.NAME) AS PATH, TB.DEPTH1IDX
						 , IF(TB.DEPTH2IDX IS NULL AND TA.DEPTH  >  1, CAST(TA.IDX AS CHAR(10)), TB.DEPTH2IDX) AS DEPTH2IDX
						 , IF(TB.DEPTH3IDX IS NULL AND TA.DEPTH  >  2, CAST(TA.IDX AS CHAR(10)), TB.DEPTH3IDX) AS DEPTH3IDX
						 , IF(TB.DEPTH4IDX IS NULL AND TA.DEPTH  >  3, CAST(TA.IDX AS CHAR(10)), TB.DEPTH4IDX) AS DEPTH4IDX
					FROM T_CATEGORY TA
							 INNER JOIN CATEGORY TB ON TA.PARENT = TB.CATEIDX
				)
				SELECT CATEIDX, NAME, DEPTH, PARENT, PATH AS FULLCATEGORYNAME, DEPTH1IDX, DEPTH2IDX, DEPTH3IDX, DEPTH4IDX
				FROM CATEGORY
			)F ON T.CATEIDX = F.CATEIDX
			   LEFT OUTER JOIN T_BRAND G ON T.BRANDIDX = G.IDX
			   LEFT OUTER JOIN T_DEALER H ON T.DEALERNO = H.USERNO
			<where>
				<if test='isallmember != null and isallmember == "F" and mumembertypearr != null and mumembertypearr.size > 0'>
					AND T.DADAMEMBERTYPE IN
					<foreach index="index" collection="mumembertypearr" item="_idx" open="(" close=")" separator="," >
						#{_idx}
					</foreach>
				</if>
				<if test='isallmemlv != null and isallmemlv =="F" and mumemlvtypearr != null and mumemlvtypearr.size > 0'>
					AND T.MEMLVTYPE IN
					<foreach index="index" collection="mumemlvtypearr" item="_idx" open="(" close=")" separator="," >
						#{_idx}
					</foreach>
				</if>
				<if test='isallchannel != null and isallchannel =="F" and muappchtypearr != null and muappchtypearr.size > 0'>
					AND T.ORDPATHTYPE IN
					<foreach index="index" collection="muappchtypearr" item="_idx" open="(" close=")" separator="," >
						#{_idx}
					</foreach>
				</if>

				<if test="isnonmember != null and isnonmember != '' ">
					AND T.ISNONMEMBER = #{isnonmember}
				</if>

				<if test="depth1cateidx != null and depth1cateidx != '' ">
					AND F.DEPTH1IDX = #{depth1cateidx}	/* 대분류카테고리 */
				</if>
				<if test="depth2cateidx != null and depth2cateidx != '' ">
					AND F.DEPTH2IDX = #{depth2cateidx}	/* 중분류카테고리 */
				</if>
				<if test="depth3cateidx != null and depth3cateidx != '' ">
					AND F.DEPTH3IDX = #{depth3cateidx}	/* 소분류카테고리 */
				</if>
				<if test="depth4cateidx != null and depth4cateidx != '' ">
					AND F.DEPTH4IDX = #{depth4cateidx}	/* 세분류카테고리 */
				</if>

				<if test="sword != null and sword != '' ">
					<choose>
						<when test="skey == 'dealercode'">
							AND T.DEALERNO LIKE CONCAT('%', #{sword}, '%')
						</when>
						<when test="skey == 'dealername'">
							AND H.NAME LIKE CONCAT('%', #{sword}, '%')
						</when>
						<when test="skey == 'brandcode'">
							AND G.BRCODE LIKE CONCAT('%', #{sword}, '%')
						</when>
						<when test="skey == 'brandname'">
							AND G.NAME LIKE CONCAT('%', #{sword}, '%')
						</when>
						<when test="skey == 'goodscode'">
							AND T.GOODSCODE LIKE CONCAT('%', #{sword}, '%')
						</when>
						<when test="skey == 'optioncode'">
							AND T.OPTIONCODE LIKE CONCAT('%', #{sword}, '%')
						</when>
						<when test="skey == 'goodsname'">
							AND T.GOODSNAME LIKE CONCAT('%', #{sword}, '%')
						</when>
						<when test="skey == 'optionname'">
							AND FN_GET_OPTION_DETAIL(T.GOODSNO, T.OPTIONCODE, '') LIKE CONCAT('%', #{sword}, '%')
						</when>
						<otherwise>
							AND (T.DEALERNO LIKE CONCAT('%', #{sword}, '%')
							OR H.NAME LIKE CONCAT('%', #{sword}, '%')
							OR G.BRCODE LIKE CONCAT('%', #{sword}, '%')
							OR G.NAME LIKE CONCAT('%', #{sword}, '%')
							OR T.GOODSCODE LIKE CONCAT('%', #{sword}, '%')
							OR T.OPTIONCODE LIKE CONCAT('%', #{sword}, '%')
							OR T.GOODSNAME LIKE CONCAT('%', #{sword}, '%')
							OR FN_GET_OPTION_DETAIL(T.GOODSNO, T.OPTIONCODE, '') LIKE CONCAT('%', #{sword}, '%')
							)
						</otherwise>
					</choose>
				</if>
			</where>
			<choose>
				<when test="gubun == 'GOODS'">
					GROUP BY T.GOODSNO
				</when>
				<when test="gubun == 'OPTION'">
					GROUP BY T.GOODSNO, T.OPTIONCODE
				</when>
			</choose>
		)STAT
		<choose>
			<when test="psort == 'rank_asc'">
				ORDER BY CAST(RANKING AS SIGNED) ASC
			</when>
			<when test="psort == 'rank_desc'">
				ORDER BY CAST(RANKING AS SIGNED) DESC
			</when>
			<when test="psort == 'goodscode_asc'">
				ORDER BY GOODSCODE ASC
			</when>
			<when test="psort == 'goodscode_desc'">
				ORDER BY GOODSCODE DESC
			</when>
			<when test="psort == 'goodsname_asc'">
				ORDER BY GOODSNAME ASC
			</when>
			<when test="psort == 'goodsname_desc'">
				ORDER BY GOODSNAME DESC
			</when>
			<when test="psort == 'optioncode_asc'">
				ORDER BY OPTIONCODE ASC
			</when>
			<when test="psort == 'optioncode_desc'">
				ORDER BY OPTIONCODE DESC
			</when>
			<when test="psort == 'optionname_asc'">
				ORDER BY OPTIONNAME ASC
			</when>
			<when test="psort == 'optionname_desc'">
				ORDER BY OPTIONNAME DESC
			</when>
			<when test="psort == 'frstordcnt_asc'">
				ORDER BY CAST(FRSTORDCNT AS SIGNED) ASC
			</when>
			<when test="psort == 'frstordcnt_desc'">
				ORDER BY CAST(FRSTORDCNT AS SIGNED) DESC
			</when>
			<when test="psort == 'clmcnt_asc'">
				ORDER BY CAST(CLMCNT AS SIGNED) ASC
			</when>
			<when test="psort == 'clmcnt_desc'">
				ORDER BY CAST(CLMCNT AS SIGNED) DESC
			</when>
			<when test="psort == 'recnt_asc'">
				ORDER BY CAST(RECNT AS SIGNED) ASC
			</when>
			<when test="psort == 'recnt_desc'">
				ORDER BY CAST(RECNT AS SIGNED) DESC
			</when>

			<when test="psort == 'billing_asc'">
				ORDER BY CAST(BILLING AS SIGNED) ASC
			</when>
			<when test="psort == 'billing_desc'">
				ORDER BY CAST(BILLING AS SIGNED) DESC
			</when>

			<when test="psort == 'price_asc'">
				ORDER BY CAST(PRICE AS SIGNED) ASC
			</when>
			<when test="psort == 'price_desc'">
				ORDER BY CAST(PRICE AS SIGNED) DESC
			</when>
			<when test="psort == 'rtnamt_asc'">
				ORDER BY CAST(RTNAMT AS SIGNED) ASC
			</when>
			<when test="psort == 'rtnamt_desc'">
				ORDER BY CAST(RTNAMT AS SIGNED) DESC
			</when>
			<when test="psort == 'orgamt_asc'">
				ORDER BY CAST(ORGAMT AS SIGNED) ASC
			</when>
			<when test="psort == 'orgamt_desc'">
				ORDER BY CAST(ORGAMT AS SIGNED) DESC
			</when>

			<when test="psort == 'margin_asc'">
				ORDER BY CAST(MARGIN AS SIGNED) ASC
			</when>
			<when test="psort == 'margin_desc'">
				ORDER BY CAST(MARGIN AS SIGNED) DESC
			</when>
			<when test="psort == 'marginper_asc'">
				ORDER BY CAST(MARGINPER AS SIGNED) ASC
			</when>
			<when test="psort == 'marginper_desc'">
				ORDER BY CAST(MARGINPER AS SIGNED) DESC
			</when>
			<when test="psort == 'goodscpnamt_asc'">
				ORDER BY CAST(GOODSCPNAMT AS SIGNED) ASC
			</when>
			<when test="psort == 'goodscpnamt_desc'">
				ORDER BY CAST(GOODSCPNAMT AS SIGNED) DESC
			</when>

			<otherwise>
				ORDER BY CAST((FRSTORDCNT - CLMCNT) AS SIGNED) DESC
			</otherwise>
		</choose>
		<if test="startpage != null and !startpage.equals('') and endpage != null and !endpage.equals('')">
			LIMIT #{startpage}, #{endpage}
		</if>
	</select>

	<select id="selectStatsProductRankByListCountInfo" parameterType="somap" resultType="somap">
	SELECT /* ComOrderMapper.xml selectStatsProductRankByListCountInfo */
	  	  COUNT(*) AS TOTAL
		, FORMAT(SUM(IFNULL(FRSTORDCNT, 0)), 0) AS FRSTORDCNT
		, FORMAT(SUM(IFNULL(CLMCNT, 0)), 0) AS CLMCNT
		, FORMAT(SUM(IFNULL((FRSTORDCNT - CLMCNT), 0)), 0) AS RECNT
		, FORMAT(SUM(IFNULL(IF(#{amtstandard} = 'NORMAL', PRICE, ACCOUNT), 0)), 0) AS PRICE
		, FORMAT(SUM(IFNULL(PURE, 0)), 0) AS PURE
		, FORMAT(SUM(IFNULL(GOODSCPNAMT, 0)), 0) AS GOODSCPNAMT
		, FORMAT(SUM(IFNULL(MARGIN, 0)), 0) AS MARGIN
		, FORMAT(SUM(IFNULL(RTNAMT, 0)), 0) AS RTNAMT
		, FORMAT(SUM(IFNULL((PURE - RTNAMT), 0)), 0) AS BILLING
		, FORMAT(IFNULL(ROUND((SUM(MARGIN) / SUM(PRICE) * 100), 2), 0), 2) AS MARGINPER
	FROM (
			SELECT
				<choose>
					<when test="gubun == 'GOODS'">
						GOODSNO, MAX(GOODSCODE) AS GOODSCODE, MAX(GOODSNAME) AS GOODSNAME
					</when>
					<when test="gubun == 'OPTION'">
						GOODSNO, MAX(GOODSCODE) AS GOODSCODE, MAX(GOODSNAME) AS GOODSNAME, MAX(OPTIONCODE) AS OPTIONCODE, FN_GET_OPTION_CONCAT(GOODSNO, OPTIONCODE, ', ') AS OPTIONNAME
					</when>
				</choose>
				, SUM(T.FRSTORDCNT) AS FRSTORDCNT
				, SUM(IFNULL(T.CLMCNT, 0)) AS CLMCNT
				, SUM( ((T.PRICE - T.SALEPROMOAMT) -  (IFNULL(T.CNCPRICE, 0) - IFNULL(T.CNCSALEPROMOAMT, 0))) ) AS PRICE
				, ROUND(SUM( ((T.PRICE - T.SALEPROMOAMT - (T.GOODSCPNAMT) + T.DELIVAMT) -  (IFNULL(T.CNCPRICE, 0) - IFNULL(T.CNCSALEPROMOAMT, 0) - (IFNULL(T.CNCGOODSCPNAMT, 0)) + IFNULL(T.CNCDELIVAMT, 0) ))), 0) AS ACCOUNT
				, ROUND(SUM( ((T.PRICE - T.SALEPROMOAMT - (T.GOODSCPNAMT)) -  (IFNULL(T.CNCPRICE, 0) - IFNULL(T.CNCSALEPROMOAMT, 0) - (IFNULL(T.CNCGOODSCPNAMT, 0)) ))), 0) AS PURE
				, SUM(SALEPROMOAMT - IFNULL(CNCSALEPROMOAMT, 0)) AS SALEPROMOAMT
				, SUM((GOODSCPNAMT) - (IFNULL(CNCGOODSCPNAMT, 0))) AS GOODSCPNAMT
				, ROUND(SUM(MARGIN - IFNULL(CNCMARGIN, 0)), 0) AS MARGIN
				, IF(#{standard} = 'BUY' , 0, SUM(IFNULL(RTNAMT, 0))) AS RTNAMT
			FROM ( <include refid="statOrderClaimBasicDataNew"/> )T
			LEFT OUTER JOIN (
				WITH RECURSIVE CATEGORY AS (
					SELECT TA.IDX AS CATEIDX, TA.NAME, TA.DEPTH, TA.PARENT, TA.NAME AS PATH, CONCAT(TA.IDX, '') AS DEPTH1IDX
						 , CAST(NULL AS CHAR(10)) AS DEPTH2IDX, CAST(NULL AS CHAR(10)) AS DEPTH3IDX, CAST(NULL AS CHAR(10)) AS DEPTH4IDX
					FROM T_CATEGORY TA
					WHERE DEPTH = 1
					UNION ALL
					SELECT TA.IDX AS CATEIDX, TA.NAME, TA.DEPTH, TA.PARENT, CONCAT_WS(' > ', TB.PATH, TA.NAME) AS PATH, TB.DEPTH1IDX
						 , IF(TB.DEPTH2IDX IS NULL AND TA.DEPTH  >  1, CAST(TA.IDX AS CHAR(10)), TB.DEPTH2IDX) AS DEPTH2IDX
						 , IF(TB.DEPTH3IDX IS NULL AND TA.DEPTH  >  2, CAST(TA.IDX AS CHAR(10)), TB.DEPTH3IDX) AS DEPTH3IDX
						 , IF(TB.DEPTH4IDX IS NULL AND TA.DEPTH  >  3, CAST(TA.IDX AS CHAR(10)), TB.DEPTH4IDX) AS DEPTH4IDX
					FROM T_CATEGORY TA
							 INNER JOIN CATEGORY TB ON TA.PARENT = TB.CATEIDX
				)
				SELECT CATEIDX, NAME, DEPTH, PARENT, PATH AS FULLCATEGORYNAME, DEPTH1IDX, DEPTH2IDX, DEPTH3IDX, DEPTH4IDX
				FROM CATEGORY
			)F ON T.CATEIDX = F.CATEIDX
			   LEFT OUTER JOIN T_BRAND G ON T.BRANDIDX = G.IDX
			   LEFT OUTER JOIN T_DEALER H ON T.DEALERNO = H.USERNO
			<where>
				<if test='isallmember != null and isallmember == "F" and mumembertypearr != null and mumembertypearr.size > 0'>
					AND T.DADAMEMBERTYPE IN
					<foreach index="index" collection="mumembertypearr" item="_idx" open="(" close=")" separator="," >
						#{_idx}
					</foreach>
				</if>
				<if test='isallmemlv != null and isallmemlv =="F" and mumemlvtypearr != null and mumemlvtypearr.size > 0'>
					AND T.MEMLVTYPE IN
					<foreach index="index" collection="mumemlvtypearr" item="_idx" open="(" close=")" separator="," >
						#{_idx}
					</foreach>
				</if>
				<if test='isallchannel != null and isallchannel =="F" and muappchtypearr != null and muappchtypearr.size > 0'>
					AND T.ORDPATHTYPE IN
					<foreach index="index" collection="muappchtypearr" item="_idx" open="(" close=")" separator="," >
						#{_idx}
					</foreach>
				</if>

				<if test="isnonmember != null and isnonmember != '' ">
					AND T.ISNONMEMBER = #{isnonmember}
				</if>

				<if test="depth1cateidx != null and depth1cateidx != '' ">
					AND F.DEPTH1IDX = #{depth1cateidx}	/* 대분류카테고리 */
				</if>
				<if test="depth2cateidx != null and depth2cateidx != '' ">
					AND F.DEPTH2IDX = #{depth2cateidx}	/* 중분류카테고리 */
				</if>
				<if test="depth3cateidx != null and depth3cateidx != '' ">
					AND F.DEPTH3IDX = #{depth3cateidx}	/* 소분류카테고리 */
				</if>
				<if test="depth4cateidx != null and depth4cateidx != '' ">
					AND F.DEPTH4IDX = #{depth4cateidx}	/* 세분류카테고리 */
				</if>

				<if test="sword != null and sword != '' ">
					<choose>
						<when test="skey == 'dealercode'">
							AND T.DEALERNO LIKE CONCAT('%', #{sword}, '%')
						</when>
						<when test="skey == 'dealername'">
							AND H.NAME LIKE CONCAT('%', #{sword}, '%')
						</when>
						<when test="skey == 'brandcode'">
							AND G.BRCODE LIKE CONCAT('%', #{sword}, '%')
						</when>
						<when test="skey == 'brandname'">
							AND G.NAME LIKE CONCAT('%', #{sword}, '%')
						</when>
						<when test="skey == 'goodscode'">
							AND T.GOODSCODE LIKE CONCAT('%', #{sword}, '%')
						</when>
						<when test="skey == 'optioncode'">
							AND T.OPTIONCODE LIKE CONCAT('%', #{sword}, '%')
						</when>
						<when test="skey == 'goodsname'">
							AND T.GOODSNAME LIKE CONCAT('%', #{sword}, '%')
						</when>
						<when test="skey == 'optionname'">
							AND FN_GET_OPTION_DETAIL(T.GOODSNO, T.OPTIONCODE, '') LIKE CONCAT('%', #{sword}, '%')
						</when>
						<otherwise>
							AND (T.DEALERNO LIKE CONCAT('%', #{sword}, '%')
							OR H.NAME LIKE CONCAT('%', #{sword}, '%')
							OR G.BRCODE LIKE CONCAT('%', #{sword}, '%')
							OR G.NAME LIKE CONCAT('%', #{sword}, '%')
							OR T.GOODSCODE LIKE CONCAT('%', #{sword}, '%')
							OR T.OPTIONCODE LIKE CONCAT('%', #{sword}, '%')
							OR T.GOODSNAME LIKE CONCAT('%', #{sword}, '%')
							OR FN_GET_OPTION_DETAIL(T.GOODSNO, T.OPTIONCODE, '') LIKE CONCAT('%', #{sword}, '%')
							)
						</otherwise>
					</choose>
				</if>
			</where>
			<choose>
				<when test="gubun == 'GOODS'">
					GROUP BY T.GOODSNO
				</when>
				<when test="gubun == 'OPTION'">
					GROUP BY T.GOODSNO, T.OPTIONCODE
				</when>
			</choose>
		)STAT
	</select>

	<select id="selectStatsCategoryRankByList" parameterType="somap" resultType="somap">
	SELECT /* ComOrderMapper.xml selectStatsCategoryRankByList */
		<choose>
			<when test="gubun == 'depth1'">
				DEPTH1IDX, NAME1
			</when>
			<when test="gubun == 'depth2'">
				DEPTH1IDX, NAME1
				, DEPTH2IDX, NAME2
			</when>
			<when test="gubun == 'depth3'">
				DEPTH1IDX, NAME1
				, DEPTH2IDX, NAME2
				, DEPTH3IDX, NAME3
			</when>
			<when test="gubun == 'depth4'">
				DEPTH1IDX, NAME1
				, DEPTH2IDX, NAME2
				, DEPTH3IDX, NAME3
				, DEPTH4IDX, NAME4
			</when>
	     	<otherwise>

			</otherwise>
		</choose>
		 , FORMAT(IFNULL(FRSTORDCNT, 0), 0) AS FRSTORDCNT
		 , FORMAT(IFNULL(CLMCNT, 0), 0) AS CLMCNT
		 , FORMAT(IFNULL((FRSTORDCNT - CLMCNT), 0), 0) AS RECNT
 		 , FORMAT(IFNULL(IF(#{amtstandard} = 'NORMAL', PRICE, ACCOUNT), 0), 0) AS PRICE
		 , FORMAT(IFNULL(PURE, 0), 0) AS PURE
		 , FORMAT(IFNULL(GOODSCPNAMT, 0), 0) AS GOODSCPNAMT
		 , FORMAT(IFNULL(MARGIN, 0), 0) AS MARGIN
		 , FORMAT(IFNULL(RTNAMT, 0), 0) AS RTNAMT
		 , FORMAT(IFNULL((IF(#{amtstandard} = 'NORMAL', PRICE, ACCOUNT) - RTNAMT), 0), 0) AS ORGAMT
		 , FORMAT(IFNULL((PURE - RTNAMT), 0), 0) AS BILLING
		 , FORMAT(IFNULL(ROUND((MARGIN / (PRICE - RTNAMT) * 100) , 0), 0), 2) AS MARGINPER
		 , FORMAT(RANK() OVER (ORDER BY (FRSTORDCNT - CLMCNT) DESC), 0) AS RANKING
	FROM (
			SELECT
			<choose>
				<when test="gubun == 'depth1'">
					CATE.DEPTH1IDX, (SELECT NAME FROM T_CATEGORY WHERE IDX = CATE.DEPTH1IDX AND ISTRASH = 'F') AS NAME1
				</when>
				<when test="gubun == 'depth2'">
					CATE.DEPTH1IDX, (SELECT NAME FROM T_CATEGORY WHERE IDX = CATE.DEPTH1IDX AND ISTRASH = 'F') AS NAME1
					, CATE.DEPTH2IDX, (SELECT NAME FROM T_CATEGORY WHERE IDX = CATE.DEPTH2IDX AND ISTRASH = 'F') AS NAME2
				</when>
				<when test="gubun == 'depth3'">
					CATE.DEPTH1IDX, (SELECT NAME FROM T_CATEGORY WHERE IDX = CATE.DEPTH1IDX AND ISTRASH = 'F') AS NAME1
					, CATE.DEPTH2IDX, (SELECT NAME FROM T_CATEGORY WHERE IDX = CATE.DEPTH2IDX AND ISTRASH = 'F') AS NAME2
					, CATE.DEPTH3IDX, (SELECT NAME FROM T_CATEGORY WHERE IDX = CATE.DEPTH3IDX AND ISTRASH = 'F') AS NAME3
				</when>
				<when test="gubun == 'depth4'">
					CATE.DEPTH1IDX, (SELECT NAME FROM T_CATEGORY WHERE IDX = CATE.DEPTH1IDX AND ISTRASH = 'F') AS NAME1
					, CATE.DEPTH2IDX, (SELECT NAME FROM T_CATEGORY WHERE IDX = CATE.DEPTH2IDX AND ISTRASH = 'F') AS NAME2
					, CATE.DEPTH3IDX, (SELECT NAME FROM T_CATEGORY WHERE IDX = CATE.DEPTH3IDX AND ISTRASH = 'F') AS NAME3
					, CATE.DEPTH4IDX, (SELECT NAME FROM T_CATEGORY WHERE IDX = CATE.DEPTH4IDX AND ISTRASH = 'F') AS NAME4
				</when>
			</choose>
				 , SUM(T.FRSTORDCNT) AS FRSTORDCNT
				 , SUM(IFNULL(T.CLMCNT, 0)) AS CLMCNT
				 , SUM( ((T.PRICE - T.SALEPROMOAMT) -  (IFNULL(T.CNCPRICE, 0) - IFNULL(T.CNCSALEPROMOAMT, 0))) ) AS PRICE
				 , ROUND(SUM( ((T.PRICE - T.SALEPROMOAMT - (T.GOODSCPNAMT) + T.DELIVAMT) -  (IFNULL(T.CNCPRICE, 0) - IFNULL(T.CNCSALEPROMOAMT, 0) - (IFNULL(T.CNCGOODSCPNAMT, 0)) + IFNULL(T.CNCDELIVAMT, 0) ))), 0) AS ACCOUNT
				 , ROUND(SUM( ((T.PRICE - T.SALEPROMOAMT - (T.GOODSCPNAMT)) -  (IFNULL(T.CNCPRICE, 0) - IFNULL(T.CNCSALEPROMOAMT, 0) - (IFNULL(T.CNCGOODSCPNAMT, 0)) ))), 0) AS PURE
				 , SUM(SALEPROMOAMT - IFNULL(CNCSALEPROMOAMT, 0)) AS SALEPROMOAMT
				 , SUM((GOODSCPNAMT) - (IFNULL(CNCGOODSCPNAMT, 0))) AS GOODSCPNAMT
				 , ROUND(SUM(MARGIN - IFNULL(CNCMARGIN, 0)), 0) AS MARGIN
				 , IF(#{standard} = 'BUY' , 0, SUM(IFNULL(RTNAMT, 0))) AS RTNAMT
			FROM ( <include refid="statOrderClaimBasicDataNew"/> )T
			LEFT OUTER JOIN (
				WITH RECURSIVE CATEGORY AS (
					SELECT TA.IDX AS CATEIDX, TA.NAME, TA.DEPTH, TA.PARENT, TA.NAME AS PATH, CONCAT(TA.IDX, '') AS DEPTH1IDX
						 , CAST(NULL AS CHAR(10)) AS DEPTH2IDX, CAST(NULL AS CHAR(10)) AS DEPTH3IDX, CAST(NULL AS CHAR(10)) AS DEPTH4IDX
					FROM T_CATEGORY TA
					WHERE DEPTH = 1
					UNION ALL
					SELECT TA.IDX AS CATEIDX, TA.NAME, TA.DEPTH, TA.PARENT, CONCAT_WS(' > ', TB.PATH, TA.NAME) AS PATH, TB.DEPTH1IDX
						 , IF(TB.DEPTH2IDX IS NULL AND TA.DEPTH  >  1, CAST(TA.IDX AS CHAR(10)), TB.DEPTH2IDX) AS DEPTH2IDX
						 , IF(TB.DEPTH3IDX IS NULL AND TA.DEPTH  >  2, CAST(TA.IDX AS CHAR(10)), TB.DEPTH3IDX) AS DEPTH3IDX
						 , IF(TB.DEPTH4IDX IS NULL AND TA.DEPTH  >  3, CAST(TA.IDX AS CHAR(10)), TB.DEPTH4IDX) AS DEPTH4IDX
					FROM T_CATEGORY TA
							 INNER JOIN CATEGORY TB ON TA.PARENT = TB.CATEIDX
				)
				SELECT CATEIDX, NAME, DEPTH, PARENT, PATH AS FULLCATEGORYNAME, DEPTH1IDX, DEPTH2IDX, DEPTH3IDX, DEPTH4IDX
				FROM CATEGORY
			)CATE ON T.CATEIDX = CATE.CATEIDX
			<where>
				<if test='isallmember != null and isallmember == "F" and mumembertypearr != null and mumembertypearr.size > 0'>
					AND T.DADAMEMBERTYPE IN
					<foreach index="index" collection="mumembertypearr" item="_idx" open="(" close=")" separator="," >
						#{_idx}
					</foreach>
				</if>
				<if test='isallmemlv != null and isallmemlv =="F" and mumemlvtypearr != null and mumemlvtypearr.size > 0'>
					AND T.MEMLVTYPE IN
					<foreach index="index" collection="mumemlvtypearr" item="_idx" open="(" close=")" separator="," >
						#{_idx}
					</foreach>
				</if>
				<if test='isallchannel != null and isallchannel =="F" and muappchtypearr != null and muappchtypearr.size > 0'>
					AND T.ORDPATHTYPE IN
					<foreach index="index" collection="muappchtypearr" item="_idx" open="(" close=")" separator="," >
						#{_idx}
					</foreach>
				</if>
				<if test="isnonmember != null and isnonmember != '' ">
					AND T.ISNONMEMBER = #{isnonmember}
				</if>
			</where>
			<choose>
				<when test="gubun == 'depth1'">
					GROUP BY CATE.DEPTH1IDX
				</when>
				<when test="gubun == 'depth2'">
					GROUP BY CATE.DEPTH1IDX, CATE.DEPTH2IDX
				</when>
				<when test="gubun == 'depth3'">
					GROUP BY CATE.DEPTH1IDX, CATE.DEPTH2IDX, CATE.DEPTH3IDX
				</when>
				<when test="gubun == 'depth4'">
					GROUP BY CATE.DEPTH1IDX, CATE.DEPTH2IDX, CATE.DEPTH3IDX, CATE.DEPTH4IDX
				</when>
			</choose>
		)STAT
		<choose>
			<when test="psort == 'rank_asc'">
				ORDER BY CAST(RANKING AS SIGNED) ASC
			</when>
			<when test="psort == 'rank_desc'">
				ORDER BY CAST(RANKING AS SIGNED) DESC
			</when>
			<when test="psort == 'name1_asc'">
				ORDER BY NAME1 ASC
			</when>
			<when test="psort == 'name1_desc'">
				ORDER BY NAME1 DESC
			</when>
			<when test="psort == 'name2_asc'">
				ORDER BY NAME2 ASC
			</when>
			<when test="psort == 'name2_desc'">
				ORDER BY NAME2 DESC
			</when>
			<when test="psort == 'name3_asc'">
				ORDER BY NAME3 ASC
			</when>
			<when test="psort == 'name3_desc'">
				ORDER BY NAME3 DESC
			</when>
			<when test="psort == 'name4_asc'">
				ORDER BY NAME4 ASC
			</when>
			<when test="psort == 'name4_desc'">
				ORDER BY NAME4 DESC
			</when>
			<when test="psort == 'frstordcnt_asc'">
				ORDER BY CAST(FRSTORDCNT AS SIGNED) ASC
			</when>
			<when test="psort == 'frstordcnt_desc'">
				ORDER BY CAST(FRSTORDCNT AS SIGNED) DESC
			</when>
			<when test="psort == 'clmcnt_asc'">
				ORDER BY CAST(CLMCNT AS SIGNED) ASC
			</when>
			<when test="psort == 'clmcnt_desc'">
				ORDER BY CAST(CLMCNT AS SIGNED) DESC
			</when>
			<when test="psort == 'recnt_asc'">
				ORDER BY CAST(RECNT AS SIGNED) ASC
			</when>
			<when test="psort == 'recnt_desc'">
				ORDER BY CAST(RECNT AS SIGNED) DESC
			</when>

			<when test="psort == 'billing_asc'">
				ORDER BY CAST(BILLING AS SIGNED) ASC
			</when>
			<when test="psort == 'billing_desc'">
				ORDER BY CAST(BILLING AS SIGNED) DESC
			</when>

			<when test="psort == 'price_asc'">
				ORDER BY CAST(PRICE AS SIGNED) ASC
			</when>
			<when test="psort == 'price_desc'">
				ORDER BY CAST(PRICE AS SIGNED) DESC
			</when>
			<when test="psort == 'rtnamt_asc'">
				ORDER BY CAST(RTNAMT AS SIGNED) ASC
			</when>
			<when test="psort == 'rtnamt_desc'">
				ORDER BY CAST(RTNAMT AS SIGNED) DESC
			</when>
			<when test="psort == 'orgamt_asc'">
				ORDER BY CAST(ORGAMT AS SIGNED) ASC
			</when>
			<when test="psort == 'orgamt_desc'">
				ORDER BY CAST(ORGAMT AS SIGNED) DESC
			</when>

			<when test="psort == 'margin_asc'">
				ORDER BY CAST(MARGIN AS SIGNED) ASC
			</when>
			<when test="psort == 'margin_desc'">
				ORDER BY CAST(MARGIN AS SIGNED) DESC
			</when>
			<when test="psort == 'marginper_asc'">
				ORDER BY CAST(MARGINPER AS SIGNED) ASC
			</when>
			<when test="psort == 'marginper_desc'">
				ORDER BY CAST(MARGINPER AS SIGNED) DESC
			</when>
			<when test="psort == 'goodscpnamt_asc'">
				ORDER BY CAST(GOODSCPNAMT AS SIGNED) ASC
			</when>
			<when test="psort == 'goodscpnamt_desc'">
				ORDER BY CAST(GOODSCPNAMT AS SIGNED) DESC
			</when>

			<otherwise>
				ORDER BY CAST((FRSTORDCNT - CLMCNT) AS SIGNED) DESC
			</otherwise>
		</choose>
		<if test="startpage != null and !startpage.equals('') and endpage != null and !endpage.equals('')">
			LIMIT #{startpage}, #{endpage}
		</if>
	</select>

	<select id="selectStatsCategoryRankByListCountInfo" parameterType="somap" resultType="somap">
	SELECT /* ComOrderMapper.xml selectStatsCategoryRankByListCountInfo */
		COUNT(*) AS TOTAL
		, FORMAT(SUM(IFNULL(FRSTORDCNT, 0)), 0) AS FRSTORDCNT
		, FORMAT(SUM(IFNULL(CLMCNT, 0)), 0) AS CLMCNT
		, FORMAT(SUM(IFNULL((FRSTORDCNT - CLMCNT), 0)), 0) AS RECNT
		, FORMAT(SUM(IFNULL(IF(#{amtstandard} = 'NORMAL', PRICE, ACCOUNT), 0)), 0) AS PRICE
		, FORMAT(SUM(IFNULL(PURE, 0)), 0) AS PURE
		, FORMAT(SUM(IFNULL(GOODSCPNAMT, 0)), 0) AS GOODSCPNAMT
		, FORMAT(SUM(IFNULL(MARGIN, 0)), 0) AS MARGIN
		, FORMAT(SUM(IFNULL(RTNAMT, 0)), 0) AS RTNAMT
		, FORMAT(SUM(IFNULL((IF(#{amtstandard} = 'NORMAL', PRICE, ACCOUNT) - RTNAMT), 0)), 0) AS ORGAMT
		, FORMAT(SUM(IFNULL((PURE - RTNAMT), 0)), 0) AS BILLING
		, FORMAT(IFNULL(ROUND((SUM(MARGIN) / SUM(PRICE - RTNAMT) * 100), 2), 0), 2) AS MARGINPER
	FROM (
			SELECT
			<choose>
				<when test="gubun == 'depth1'">
					CATE.DEPTH1IDX, (SELECT NAME FROM T_CATEGORY WHERE IDX = CATE.DEPTH1IDX AND ISTRASH = 'F') AS NAME1
				</when>
				<when test="gubun == 'depth2'">
					CATE.DEPTH1IDX, (SELECT NAME FROM T_CATEGORY WHERE IDX = CATE.DEPTH1IDX AND ISTRASH = 'F') AS NAME1
					, CATE.DEPTH2IDX, (SELECT NAME FROM T_CATEGORY WHERE IDX = CATE.DEPTH2IDX AND ISTRASH = 'F') AS NAME2
				</when>
				<when test="gubun == 'depth3'">
					CATE.DEPTH1IDX, (SELECT NAME FROM T_CATEGORY WHERE IDX = CATE.DEPTH1IDX AND ISTRASH = 'F') AS NAME1
					, CATE.DEPTH2IDX, (SELECT NAME FROM T_CATEGORY WHERE IDX = CATE.DEPTH2IDX AND ISTRASH = 'F') AS NAME2
					, CATE.DEPTH3IDX, (SELECT NAME FROM T_CATEGORY WHERE IDX = CATE.DEPTH3IDX AND ISTRASH = 'F') AS NAME3
				</when>
				<when test="gubun == 'depth4'">
					CATE.DEPTH1IDX, (SELECT NAME FROM T_CATEGORY WHERE IDX = CATE.DEPTH1IDX AND ISTRASH = 'F') AS NAME1
					, CATE.DEPTH2IDX, (SELECT NAME FROM T_CATEGORY WHERE IDX = CATE.DEPTH2IDX AND ISTRASH = 'F') AS NAME2
					, CATE.DEPTH3IDX, (SELECT NAME FROM T_CATEGORY WHERE IDX = CATE.DEPTH3IDX AND ISTRASH = 'F') AS NAME3
					, CATE.DEPTH4IDX, (SELECT NAME FROM T_CATEGORY WHERE IDX = CATE.DEPTH4IDX AND ISTRASH = 'F') AS NAME4
				</when>
			</choose>
				, SUM(T.FRSTORDCNT) AS FRSTORDCNT
				 , SUM(IFNULL(T.CLMCNT, 0)) AS CLMCNT
				 , SUM( ((T.PRICE - T.SALEPROMOAMT) -  (IFNULL(T.CNCPRICE, 0) - IFNULL(T.CNCSALEPROMOAMT, 0))) ) AS PRICE
				 , ROUND(SUM( ((T.PRICE - T.SALEPROMOAMT - (T.GOODSCPNAMT) + T.DELIVAMT) -  (IFNULL(T.CNCPRICE, 0) - IFNULL(T.CNCSALEPROMOAMT, 0) - (IFNULL(T.CNCGOODSCPNAMT, 0)) + IFNULL(T.CNCDELIVAMT, 0) ))), 0) AS ACCOUNT
				 , ROUND(SUM( ((T.PRICE - T.SALEPROMOAMT - (T.GOODSCPNAMT)) -  (IFNULL(T.CNCPRICE, 0) - IFNULL(T.CNCSALEPROMOAMT, 0) - (IFNULL(T.CNCGOODSCPNAMT, 0)) ))), 0) AS PURE
				 , SUM(SALEPROMOAMT - IFNULL(CNCSALEPROMOAMT, 0)) AS SALEPROMOAMT
				 , SUM((GOODSCPNAMT) - (IFNULL(CNCGOODSCPNAMT, 0))) AS GOODSCPNAMT
				 , ROUND(SUM(MARGIN - IFNULL(CNCMARGIN, 0)), 0) AS MARGIN
				 , IF(#{standard} = 'BUY' , 0, SUM(IFNULL(RTNAMT, 0))) AS RTNAMT
			FROM ( <include refid="statOrderClaimBasicDataNew"/> )T
			LEFT OUTER JOIN (
				WITH RECURSIVE CATEGORY AS (
					SELECT TA.IDX AS CATEIDX, TA.NAME, TA.DEPTH, TA.PARENT, TA.NAME AS PATH, CONCAT(TA.IDX, '') AS DEPTH1IDX
						 , CAST(NULL AS CHAR(10)) AS DEPTH2IDX, CAST(NULL AS CHAR(10)) AS DEPTH3IDX, CAST(NULL AS CHAR(10)) AS DEPTH4IDX
					FROM T_CATEGORY TA
					WHERE DEPTH = 1
					UNION ALL
					SELECT TA.IDX AS CATEIDX, TA.NAME, TA.DEPTH, TA.PARENT, CONCAT_WS(' > ', TB.PATH, TA.NAME) AS PATH, TB.DEPTH1IDX
						 , IF(TB.DEPTH2IDX IS NULL AND TA.DEPTH  >  1, CAST(TA.IDX AS CHAR(10)), TB.DEPTH2IDX) AS DEPTH2IDX
						 , IF(TB.DEPTH3IDX IS NULL AND TA.DEPTH  >  2, CAST(TA.IDX AS CHAR(10)), TB.DEPTH3IDX) AS DEPTH3IDX
						 , IF(TB.DEPTH4IDX IS NULL AND TA.DEPTH  >  3, CAST(TA.IDX AS CHAR(10)), TB.DEPTH4IDX) AS DEPTH4IDX
					FROM T_CATEGORY TA
							 INNER JOIN CATEGORY TB ON TA.PARENT = TB.CATEIDX
				)
				SELECT CATEIDX, NAME, DEPTH, PARENT, PATH AS FULLCATEGORYNAME, DEPTH1IDX, DEPTH2IDX, DEPTH3IDX, DEPTH4IDX
				FROM CATEGORY
			)CATE ON T.CATEIDX = CATE.CATEIDX
			<where>
				<if test='isallmember != null and isallmember == "F" and mumembertypearr != null and mumembertypearr.size > 0'>
					AND T.DADAMEMBERTYPE IN
					<foreach index="index" collection="mumembertypearr" item="_idx" open="(" close=")" separator="," >
						#{_idx}
					</foreach>
				</if>
				<if test='isallmemlv != null and isallmemlv =="F" and mumemlvtypearr != null and mumemlvtypearr.size > 0'>
					AND T.MEMLVTYPE IN
					<foreach index="index" collection="mumemlvtypearr" item="_idx" open="(" close=")" separator="," >
						#{_idx}
					</foreach>
				</if>
				<if test='isallchannel != null and isallchannel =="F" and muappchtypearr != null and muappchtypearr.size > 0'>
					AND T.ORDPATHTYPE IN
					<foreach index="index" collection="muappchtypearr" item="_idx" open="(" close=")" separator="," >
						#{_idx}
					</foreach>
				</if>
				<if test="isnonmember != null and isnonmember != '' ">
					AND T.ISNONMEMBER = #{isnonmember}
				</if>
			</where>
			<choose>
				<when test="gubun == 'depth1'">
					GROUP BY CATE.DEPTH1IDX
				</when>
				<when test="gubun == 'depth2'">
					GROUP BY CATE.DEPTH1IDX, CATE.DEPTH2IDX
				</when>
				<when test="gubun == 'depth3'">
					GROUP BY CATE.DEPTH1IDX, CATE.DEPTH2IDX, CATE.DEPTH3IDX
				</when>
				<when test="gubun == 'depth4'">
					GROUP BY CATE.DEPTH1IDX, CATE.DEPTH2IDX, CATE.DEPTH3IDX, CATE.DEPTH4IDX
				</when>
			</choose>
		)STAT
	</select>

	<select id="selectStatsSaleDateList" parameterType="somap" resultType="somap">
		SELECT /* ComOrderMapper.xml selectStatsSaleDateList */
			TARGET
			, FORMAT(ORDERCNT, 0) AS ORDERCNT
			, FORMAT(SALECNT, 0) AS SALECNT
			, FORMAT(PRICE, 0) AS PRICE
			, FORMAT(PURE, 0) AS PURE
			, FORMAT(SALEPROMOAMT, 0) AS SALEPROMOAMT
			, FORMAT(GOODSCPNAMT, 0) AS GOODSCPNAMT
			, FORMAT(MARGIN, 0) AS MARGIN
			, FORMAT(RTNAMT, 0) AS RTNAMT
			, FORMAT(STAMT, 0) AS STAMT
			, FORMAT(DELIVAMT, 0) AS DELIVAMT
			, FORMAT(RESERVEAMT, 0) AS RESERVEAMT
			, FORMAT(EPOINTAMT, 0) AS EPOINTAMT
			, FORMAT(EMPRESERVEAMT, 0) AS EMPRESERVEAMT
			, FORMAT(REALAMT, 0) AS REALAMT
		FROM (
			SELECT
				<choose>
					<when test="type == 'day'">
						DATE_FORMAT(A.TARGET, '%Y-%m-%d') AS TARGET
					</when>
					<when test="type == 'week'">
						CONCAT(DATE_FORMAT(STR_TO_DATE(CONCAT(A.TARGET,'Saturday'), '%X%V %W'), '%Y-%m'), ' ' ,WEEK(STR_TO_DATE(CONCAT(A.TARGET,'Saturday'), '%X%V %W')) - WEEK(DATE_FORMAT(STR_TO_DATE(CONCAT(A.TARGET,'Saturday'), '%X%V %W'), '%Y-%m-01')) + 1, '주차') AS TARGET
					</when>
					<when test="type == 'month'">
						DATE_FORMAT(STR_TO_DATE(CONCAT(A.TARGET, '01'), '%Y%m%d'), '%Y-%m') AS TARGET
					</when>
				</choose>
				, IFNULL(ORDERCNT, 0) AS ORDERCNT
				, IFNULL(FRSTORDCNT, 0) AS SALECNT
				, IFNULL(IF(#{amtstandard} = 'NORMAL', PRICE, ACCOUNT), 0) AS PRICE
				, IFNULL(PURE, 0) AS PURE
				, IFNULL(SALEPROMOAMT, 0) AS SALEPROMOAMT
				, IFNULL(GOODSCPNAMT, 0) AS GOODSCPNAMT
				, IFNULL(MARGIN, 0) AS MARGIN
				, IFNULL(RTNAMT, 0) AS RTNAMT
				, IFNULL(STAMT, 0) AS STAMT
				, IFNULL(DELIVAMT, 0) AS DELIVAMT
				, IFNULL(RESERVEAMT, 0) AS RESERVEAMT
				, IFNULL(EPOINTAMT, 0) AS EPOINTAMT
				, IFNULL(EMPRESERVEAMT, 0) AS EMPRESERVEAMT
				, IFNULL(REALAMT, 0) AS REALAMT
			FROM (
				<choose>
					<when test="type == 'day'">
						WITH RECURSIVE DATES AS (
							SELECT STR_TO_DATE(#{startdate}, '%Y-%m-%d') AS DT
							UNION
							SELECT DATE_ADD(DATES.DT, INTERVAL 1 DAY) FROM DATES WHERE DATE_ADD(DATES.DT, INTERVAL 1 DAY) <![CDATA[<=]]> STR_TO_DATE(#{enddate}, '%Y-%m-%d')
						)
						SELECT DATE_FORMAT(DATES.DT, '%Y%m%d') AS TARGET
						FROM DATES
					</when>
					<when test="type == 'week'">
						WITH RECURSIVE DATES AS (
							SELECT STR_TO_DATE(#{startdate}, '%Y-%m-%d') AS DT
							UNION
							SELECT DATE_ADD(DATES.DT, INTERVAL 1 WEEK) FROM DATES WHERE DATE_ADD(DATES.DT, INTERVAL 1 WEEK) <![CDATA[<=]]> STR_TO_DATE(CONCAT(YEARWEEK(STR_TO_DATE(#{enddate}, '%Y-%m-%d')),'Saturday'), '%X%V %W')
						)
						SELECT YEARWEEK(DATES.DT) AS TARGET
						FROM DATES
					</when>
					<when test="type == 'month'">
						WITH RECURSIVE DATES AS (
							SELECT STR_TO_DATE(#{startdate}, '%Y-%m-%d') AS DT
							UNION
							SELECT DATE_ADD(DATES.DT, INTERVAL 1 MONTH) FROM DATES WHERE DATE_ADD(DATES.DT, INTERVAL 1 MONTH) <![CDATA[<=]]> STR_TO_DATE(#{enddate}, '%Y-%m-%d')
						)
						SELECT DATE_FORMAT(DATES.DT, '%Y%m') AS TARGET
						FROM DATES
					</when>
				</choose>
			)A LEFT OUTER JOIN (
				SELECT
					<choose>
						<when test="type == 'day'">
						  DATE_FORMAT(COMPLETEDATE, '%Y%m%d') AS TARGET
						</when>
						<when test="type == 'week'">
						  YEARWEEK(COMPLETEDATE) AS TARGET
						</when>
						<when test="type == 'month'">
						  DATE_FORMAT(COMPLETEDATE, '%Y%m') AS TARGET
						</when>
					</choose>
						, COUNT(DISTINCT DELORDERIDX) AS ORDERCNT
						, SUM(T.FRSTORDCNT - IFNULL(T.CLMCNT, 0)) AS FRSTORDCNT
						, SUM(PRICE - IFNULL(CNCPRICE, 0)) AS STAMT
						, SUM(SALEPROMOAMT - IFNULL(CNCSALEPROMOAMT, 0)) AS SALEPROMOAMT
						, SUM( (GOODSCPNAMT + DELIVCPNAMT + BASKETCPNAMT) - (IFNULL(CNCGOODSCPNAMT, 0) + IFNULL(CNCDELIVCPNAMT, 0) + IFNULL(CNCBASKETCPNAMT, 0))) AS GOODSCPNAMT
						, SUM(RESERVEAMT - IFNULL(CNCRESERVEAMT, 0)) AS RESERVEAMT
						, SUM(EPOINTAMT - IFNULL(CNCEPOINTAMT, 0)) AS EPOINTAMT
						, SUM(EMPRESERVEAMT - IFNULL(CNCEMPRESERVEAMT, 0)) AS EMPRESERVEAMT
						, SUM(DELIVAMT - IFNULL(CNCDELIVAMT, 0)) AS DELIVAMT
						, ROUND(SUM( ((T.PRICE - T.SALEPROMOAMT - (T.GOODSCPNAMT + T.DELIVCPNAMT + T.BASKETCPNAMT)) -  (IFNULL(T.CNCPRICE, 0) - IFNULL(T.CNCSALEPROMOAMT, 0) - (IFNULL(T.CNCGOODSCPNAMT, 0) + IFNULL(T.CNCDELIVCPNAMT, 0) + IFNULL(T.CNCBASKETCPNAMT, 0)) ))), 0) AS PURE
						, ROUND(SUM( ((T.PRICE - T.SALEPROMOAMT - (T.GOODSCPNAMT + T.DELIVCPNAMT + T.BASKETCPNAMT) + T.DELIVAMT) -  (IFNULL(T.CNCPRICE, 0) - IFNULL(T.CNCSALEPROMOAMT, 0) - (IFNULL(T.CNCGOODSCPNAMT, 0) + IFNULL(T.CNCDELIVCPNAMT, 0) + IFNULL(T.CNCBASKETCPNAMT, 0)) + IFNULL(T.CNCDELIVAMT, 0) ))), 0) AS ACCOUNT
						, ROUND(SUM( ((T.PRICE - T.SALEPROMOAMT - (T.GOODSCPNAMT + T.DELIVCPNAMT + T.BASKETCPNAMT) - (RESERVEAMT + EPOINTAMT + EMPRESERVEAMT) + DELIVAMT) -  (IFNULL(T.CNCPRICE, 0) - IFNULL(T.CNCSALEPROMOAMT, 0) - (IFNULL(T.CNCGOODSCPNAMT, 0) + IFNULL(T.CNCDELIVCPNAMT, 0) + IFNULL(T.CNCBASKETCPNAMT, 0)) - (IFNULL(CNCRESERVEAMT, 0) + IFNULL(CNCEPOINTAMT, 0) + IFNULL(CNCEMPRESERVEAMT, 0)) + IFNULL(CNCDELIVAMT, 0) ))), 0) AS REALAMT
						, ROUND(SUM(MARGIN - IFNULL(CNCMARGIN, 0)), 0) AS MARGIN
						, SUM( ((T.PRICE - T.SALEPROMOAMT) -  (IFNULL(T.CNCPRICE, 0) - IFNULL(T.CNCSALEPROMOAMT, 0))) ) AS PRICE
						, IF(#{standard} = 'BUY' , 0, SUM(IFNULL(RTNAMT, 0))) AS RTNAMT
				FROM ( <include refid="statOrderClaimBasicDataNew"/> )T
				<where>
					<if test='isallmember != null and isallmember == "F" and mumembertypearr != null and mumembertypearr.size > 0'>
						AND T.DADAMEMBERTYPE IN
						<foreach index="index" collection="mumembertypearr" item="_idx" open="(" close=")" separator="," >
							#{_idx}
						</foreach>
					</if>
					<if test='isallmemlv != null and isallmemlv =="F" and mumemlvtypearr != null and mumemlvtypearr.size > 0'>
						AND T.MEMLVTYPE IN
						<foreach index="index" collection="mumemlvtypearr" item="_idx" open="(" close=")" separator="," >
							#{_idx}
						</foreach>
					</if>
					<if test='isallchannel != null and isallchannel =="F" and muappchtypearr != null and muappchtypearr.size > 0'>
						AND T.ORDPATHTYPE IN
						<foreach index="index" collection="muappchtypearr" item="_idx" open="(" close=")" separator="," >
							#{_idx}
						</foreach>
					</if>
					<if test='isallpayway != null and isallpayway =="F" and paywaytypearr != null and paywaytypearr.size > 0'>
						AND T.PAYWAYTYPE IN
						<foreach index="index" collection="paywaytypearr" item="_idx" open="(" close=")" separator="," >
							#{_idx}
						</foreach>
					</if>
					<if test="isnonmember != null and isnonmember != '' ">
						AND T.ISNONMEMBER = #{isnonmember}
					</if>
				</where>
				GROUP BY TARGET
			)B ON A.TARGET = B.TARGET
		)T
		<choose>
			<when test="psort == 'target_asc'">
				ORDER BY TARGET ASC
			</when>
			<when test="psort == 'target_desc'">
				ORDER BY TARGET DESC
			</when>
			<when test="psort == 'ordercnt_asc'">
				ORDER BY CAST(ORDERCNT AS SIGNED) ASC
			</when>
			<when test="psort == 'ordercnt_desc'">
				ORDER BY CAST(ORDERCNT AS SIGNED)  DESC
			</when>
			<when test="psort == 'salecnt_asc'">
				ORDER BY CAST(SALECNT AS SIGNED) ASC
			</when>
			<when test="psort == 'salecnt_desc'">
				ORDER BY CAST(SALECNT AS SIGNED) DESC
			</when>
			<when test="psort == 'stamt_asc'">
				ORDER BY CAST(STAMT AS SIGNED) ASC
			</when>
			<when test="psort == 'stamt_desc'">
				ORDER BY CAST(STAMT AS SIGNED) DESC
			</when>
			<when test="psort == 'salepromoamt_asc'">
				ORDER BY CAST(SALEPROMOAMT AS SIGNED) ASC
			</when>
			<when test="psort == 'salepromoamt_desc'">
				ORDER BY CAST(SALEPROMOAMT AS SIGNED) DESC
			</when>
			<when test="psort == 'goodscpnamt_asc'">
				ORDER BY CAST(GOODSCPNAMT AS SIGNED) ASC
			</when>
			<when test="psort == 'goodscpnamt_desc'">
				ORDER BY CAST(GOODSCPNAMT AS SIGNED) DESC
			</when>
			<when test="psort == 'reserveamt_asc'">
				ORDER BY CAST(RESERVEAMT AS SIGNED) ASC
			</when>
			<when test="psort == 'reserveamt_desc'">
				ORDER BY CAST(RESERVEAMT AS SIGNED) DESC
			</when>
			<when test="psort == 'epointamt_asc'">
				ORDER BY CAST(EPOINTAMT AS SIGNED) ASC
			</when>
			<when test="psort == 'epointamt_desc'">
				ORDER BY CAST(EPOINTAMT AS SIGNED) DESC
			</when>
			<when test="psort == 'empreserveamt_asc'">
				ORDER BY CAST(EMPRESERVEAMT AS SIGNED) ASC
			</when>
			<when test="psort == 'empreserveamt_desc'">
				ORDER BY CAST(EMPRESERVEAMT AS SIGNED) DESC
			</when>
			<when test="psort == 'delivamt_asc'">
				ORDER BY CAST(DELIVAMT AS SIGNED) ASC
			</when>
			<when test="psort == 'delivamt_desc'">
				ORDER BY CAST(DELIVAMT AS SIGNED) DESC
			</when>
			<when test="psort == 'pure_asc'">
				ORDER BY CAST(PURE AS SIGNED) ASC
			</when>
			<when test="psort == 'pure_desc'">
				ORDER BY CAST(PURE AS SIGNED) DESC
			</when>
			<when test="psort == 'realamt_asc'">
				ORDER BY CAST(REALAMT AS SIGNED) ASC
			</when>
			<when test="psort == 'realamt_desc'">
				ORDER BY CAST(REALAMT AS SIGNED) DESC
			</when>
			<when test="psort == 'margin_asc'">
				ORDER BY CAST(MARGIN AS SIGNED) ASC
			</when>
			<when test="psort == 'margin_desc'">
				ORDER BY CAST(MARGIN AS SIGNED) DESC
			</when>
			<when test="psort == 'rtnamt_asc'">
				ORDER BY CAST(RTNAMT AS SIGNED) ASC
			</when>
			<when test="psort == 'rtnamt_desc'">
				ORDER BY CAST(RTNAMT AS SIGNED) DESC
			</when>
			<when test="psort == 'price_asc'">
				ORDER BY CAST(PRICE AS SIGNED) ASC
			</when>
			<when test="psort == 'price_desc'">
				ORDER BY CAST(PRICE AS SIGNED) DESC
			</when>
			<otherwise>
				ORDER BY TARGET DESC
			</otherwise>
		</choose>
		<if test="startpage != null and !startpage.equals('') and endpage != null and !endpage.equals('')">
			LIMIT #{startpage}, #{endpage}
		</if>
	</select>

	<select id="selectStatsSaleDateListCountInfo" parameterType="somap" resultType="somap">
		SELECT /* ComOrderMapper.xml selectStatsSaleDateListCountInfo */
		  	  COUNT(*) AS TOTAL
			, FORMAT(SUM(IFNULL(ORDERCNT, 0)), 0) AS ORDERCNT
			, FORMAT(SUM(IFNULL(FRSTORDCNT, 0)), 0) AS SALECNT
			, FORMAT(SUM(IFNULL(IF(#{amtstandard} = 'NORMAL', PRICE, ACCOUNT), 0)), 0) AS PRICE
			, FORMAT(SUM(IFNULL(PURE, 0)), 0) AS PURE
			, FORMAT(SUM(IFNULL(SALEPROMOAMT, 0)), 0) AS SALEPROMOAMT
			, FORMAT(SUM(IFNULL(GOODSCPNAMT, 0)), 0) AS GOODSCPNAMT
			, FORMAT(SUM(IFNULL(MARGIN, 0)), 0) AS MARGIN
			, FORMAT(SUM(IFNULL(RTNAMT, 0)), 0) AS RTNAMT
			, FORMAT(SUM(IFNULL(STAMT, 0)), 0) AS STAMT
			, FORMAT(SUM(IFNULL(DELIVAMT, 0)), 0) AS DELIVAMT
			, FORMAT(SUM(IFNULL(RESERVEAMT, 0)), 0) AS RESERVEAMT
			, FORMAT(SUM(IFNULL(EPOINTAMT, 0)), 0) AS EPOINTAMT
			, FORMAT(SUM(IFNULL(EMPRESERVEAMT, 0)), 0) AS EMPRESERVEAMT
			, FORMAT(SUM(IFNULL(REALAMT, 0)), 0) AS REALAMT
		FROM (
			<choose>
				<when test="type == 'day'">
					WITH RECURSIVE DATES AS (
						SELECT STR_TO_DATE(#{startdate}, '%Y-%m-%d') AS DT
						UNION
						SELECT DATE_ADD(DATES.DT, INTERVAL 1 DAY) FROM DATES WHERE DATE_ADD(DATES.DT, INTERVAL 1 DAY) <![CDATA[<=]]> STR_TO_DATE(#{enddate}, '%Y-%m-%d')
					)
					SELECT DATE_FORMAT(DATES.DT, '%Y%m%d') AS TARGET
					FROM DATES
				</when>
				<when test="type == 'week'">
					WITH RECURSIVE DATES AS (
						SELECT STR_TO_DATE(#{startdate}, '%Y-%m-%d') AS DT
						UNION
						SELECT DATE_ADD(DATES.DT, INTERVAL 1 WEEK) FROM DATES WHERE DATE_ADD(DATES.DT, INTERVAL 1 WEEK) <![CDATA[<=]]> STR_TO_DATE(CONCAT(YEARWEEK(STR_TO_DATE(#{enddate}, '%Y-%m-%d')),'Saturday'), '%X%V %W')
					)
					SELECT YEARWEEK(DATES.DT) AS TARGET
					FROM DATES
				</when>
				<when test="type == 'month'">
					WITH RECURSIVE DATES AS (
						SELECT STR_TO_DATE(#{startdate}, '%Y-%m-%d') AS DT
						UNION
						SELECT DATE_ADD(DATES.DT, INTERVAL 1 MONTH) FROM DATES WHERE DATE_ADD(DATES.DT, INTERVAL 1 MONTH) <![CDATA[<=]]> STR_TO_DATE(#{enddate}, '%Y-%m-%d')
					)
					SELECT DATE_FORMAT(DATES.DT, '%Y%m') AS TARGET
					FROM DATES
				</when>
			</choose>
		)A LEFT OUTER JOIN (
			SELECT
			<choose>
				<when test="type == 'day'">
					DATE_FORMAT(COMPLETEDATE, '%Y%m%d') AS TARGET
				</when>
				<when test="type == 'week'">
					YEARWEEK(COMPLETEDATE) AS TARGET
				</when>
				<when test="type == 'month'">
					DATE_FORMAT(COMPLETEDATE, '%Y%m') AS TARGET
				</when>
			</choose>
			, COUNT(DISTINCT DELORDERIDX) AS ORDERCNT
			, SUM(T.FRSTORDCNT - IFNULL(T.CLMCNT, 0)) AS FRSTORDCNT
			, SUM(PRICE - IFNULL(CNCPRICE, 0)) AS STAMT
			, SUM(SALEPROMOAMT - IFNULL(CNCSALEPROMOAMT, 0)) AS SALEPROMOAMT
			, SUM( (GOODSCPNAMT + DELIVCPNAMT + BASKETCPNAMT) - (IFNULL(CNCGOODSCPNAMT, 0) + IFNULL(CNCDELIVCPNAMT, 0) + IFNULL(CNCBASKETCPNAMT, 0))) AS GOODSCPNAMT
			, SUM(RESERVEAMT - IFNULL(CNCRESERVEAMT, 0)) AS RESERVEAMT
			, SUM(EPOINTAMT - IFNULL(CNCEPOINTAMT, 0)) AS EPOINTAMT
			, SUM(EMPRESERVEAMT - IFNULL(CNCEMPRESERVEAMT, 0)) AS EMPRESERVEAMT
			, SUM(DELIVAMT - IFNULL(CNCDELIVAMT, 0)) AS DELIVAMT
			, ROUND(SUM( ((T.PRICE - T.SALEPROMOAMT - (T.GOODSCPNAMT + T.DELIVCPNAMT + T.BASKETCPNAMT)) -  (IFNULL(T.CNCPRICE, 0) - IFNULL(T.CNCSALEPROMOAMT, 0) - (IFNULL(T.CNCGOODSCPNAMT, 0) + IFNULL(T.CNCDELIVCPNAMT, 0) + IFNULL(T.CNCBASKETCPNAMT, 0)) ))), 0) AS PURE
			, ROUND(SUM( ((T.PRICE - T.SALEPROMOAMT - (T.GOODSCPNAMT + T.DELIVCPNAMT + T.BASKETCPNAMT) + T.DELIVAMT) -  (IFNULL(T.CNCPRICE, 0) - IFNULL(T.CNCSALEPROMOAMT, 0) - (IFNULL(T.CNCGOODSCPNAMT, 0) + IFNULL(T.CNCDELIVCPNAMT, 0) + IFNULL(T.CNCBASKETCPNAMT, 0)) + IFNULL(T.CNCDELIVAMT, 0) ))), 0) AS ACCOUNT
			, ROUND(SUM( ((T.PRICE - T.SALEPROMOAMT - (T.GOODSCPNAMT + T.DELIVCPNAMT + T.BASKETCPNAMT) - (RESERVEAMT + EPOINTAMT + EMPRESERVEAMT) + DELIVAMT) -  (IFNULL(T.CNCPRICE, 0) - IFNULL(T.CNCSALEPROMOAMT, 0) - (IFNULL(T.CNCGOODSCPNAMT, 0) + IFNULL(T.CNCDELIVCPNAMT, 0) + IFNULL(T.CNCBASKETCPNAMT, 0)) - (IFNULL(CNCRESERVEAMT, 0) + IFNULL(CNCEPOINTAMT, 0) + IFNULL(CNCEMPRESERVEAMT, 0)) + IFNULL(CNCDELIVAMT, 0) ))), 0) AS REALAMT
			, ROUND(SUM(MARGIN - IFNULL(CNCMARGIN, 0)), 0) AS MARGIN
			, SUM( ((T.PRICE - T.SALEPROMOAMT) -  (IFNULL(T.CNCPRICE, 0) - IFNULL(T.CNCSALEPROMOAMT, 0))) ) AS PRICE
			, IF(#{standard} = 'BUY' , 0, SUM(IFNULL(RTNAMT, 0))) AS RTNAMT
			FROM ( <include refid="statOrderClaimBasicDataNew"/> )T
			<where>
				<if test='isallmember != null and isallmember == "F" and mumembertypearr != null and mumembertypearr.size > 0'>
					AND T.DADAMEMBERTYPE IN
					<foreach index="index" collection="mumembertypearr" item="_idx" open="(" close=")" separator="," >
						#{_idx}
					</foreach>
				</if>
				<if test='isallmemlv != null and isallmemlv =="F" and mumemlvtypearr != null and mumemlvtypearr.size > 0'>
					AND T.MEMLVTYPE IN
					<foreach index="index" collection="mumemlvtypearr" item="_idx" open="(" close=")" separator="," >
						#{_idx}
					</foreach>
				</if>
				<if test='isallchannel != null and isallchannel =="F" and muappchtypearr != null and muappchtypearr.size > 0'>
					AND T.ORDPATHTYPE IN
					<foreach index="index" collection="muappchtypearr" item="_idx" open="(" close=")" separator="," >
						#{_idx}
					</foreach>
				</if>
				<if test='isallpayway != null and isallpayway =="F" and paywaytypearr != null and paywaytypearr.size > 0'>
					AND T.PAYWAYTYPE IN
					<foreach index="index" collection="paywaytypearr" item="_idx" open="(" close=")" separator="," >
						#{_idx}
					</foreach>
				</if>
				<if test="isnonmember != null and isnonmember != '' ">
					AND T.ISNONMEMBER = #{isnonmember}
				</if>
			</where>
			GROUP BY TARGET
		)B ON A.TARGET = B.TARGET
	</select>

	<select id="selectAgeStatList" parameterType="somap" resultType="somap">
	SELECT /* ComOrderMapper.xml selectAgeStatList */
		T.TARGET
		<choose>
			<when test="type == 'GENDER' ">
				, (CASE WHEN T.TARGET = 'M' THEN '남자'	WHEN T.TARGET = 'F' THEN '여자' ELSE '정보없음' END) AS NAME
			</when>
			<otherwise>
				, (CASE WHEN T.TARGET = 0 THEN '0~10세'
						WHEN T.TARGET = 1 THEN '10~20세'
						WHEN T.TARGET = 2 THEN '20~30세'
						WHEN T.TARGET = 3 THEN '30~40세'
						WHEN T.TARGET = 4 THEN '40~50세'
						WHEN T.TARGET = 5 THEN '50~60세'
						WHEN T.TARGET = 6 THEN '60~70세'
						WHEN T.TARGET = 7 THEN '70세 이상' ELSE '정보없음' END) AS NAME
			</otherwise>
		</choose>
		 , FORMAT(HUMANCNT, 0) AS HUMANCNT
		 , FORMAT(ORDERCNT, 0) AS ORDERCNT
		 , FORMAT(PORDERCNT, 0) AS PORDERCNT
		 , FORMAT(PRICE, 0) AS PRICE
		 , FORMAT(UNITAMT, 0) AS UNITAMT
		 , FORMAT(CNCCNT, 0) AS CNCCNT
		 , FORMAT(EXCCNT, 0) AS EXCCNT
		 , FORMAT(RAMTCNT, 0) AS RAMTCNT
		 , FORMAT(RTNCNT, 0) AS RTNCNT
		 , FORMAT(REGCNT, 0) AS REGCNT
		 , FORMAT(SMSCNT, 0) AS SMSCNT
		 , FORMAT(DORCNT, 0) AS DORCNT
		 , FORMAT(RESCNT, 0) AS RESCNT
	FROM (
			 SELECT
				 A.TARGET
				  , IFNULL(HUMANCNT, 0) AS HUMANCNT
				  , IFNULL(
						(SELECT COUNT(*) FROM(
							SELECT IFNULL((SELECT GENDER FROM T_MEMBER WHERE USERNO = A.USERNO), -1) AS GENDER
								 , IFNULL((SELECT IFNULL(BIRTHDATE, -1) FROM T_MEMBER WHERE USERNO = A.USERNO), -1) AS BIRTHDATE
							FROM T_COMORDER A
							WHERE A.ISTRASH = 'F'
							AND ORDERDATE BETWEEN DATE_FORMAT(STR_TO_DATE(#{startdate}, '%Y-%m-%d'), '%Y%m%d000000') AND DATE_FORMAT(STR_TO_DATE(#{enddate}, '%Y-%m-%d'), '%Y%m%d235959')
						)T
						<choose>
							<when test="type == 'GENDER' ">
								WHERE A.TARGET = GENDER
							</when>
							<otherwise>
								WHERE A.TARGET = IF(BIRTHDATE = -1, -1, TRUNCATE((FLOOR(CAST(REPLACE(CURRENT_DATE, '-', '') AS UNSIGNED) - IFNULL(CAST(REPLACE(BIRTHDATE, '-', '') AS UNSIGNED), 0)) / 10000) / 10, 0))
							</otherwise>
						</choose>
					), 0) AS ORDERCNT
				  , IFNULL(PORDERCNT, 0) AS PORDERCNT
				  , IFNULL(PRICE, 0) AS PRICE
				  , IFNULL(ROUND( (PRICE / PORDERCNT), 0), 0) AS UNITAMT
				  , IFNULL(D.CNCCNT, 0) AS CNCCNT
				  , IFNULL(D.EXCCNT, 0) AS EXCCNT
				  , IFNULL(D.RAMTCNT, 0) AS RAMTCNT
				  , IFNULL(D.RTNCNT, 0) AS RTNCNT
				  , IFNULL(C.REGCNT, 0) AS REGCNT
				  , IFNULL(C.DORCNT, 0) AS DORCNT
				  , IFNULL(C.RESCNT, 0) AS RESCNT
				  , IFNULL(C.SMSCNT, 0) AS SMSCNT
			 FROM (
			     <choose>
					 <when test="type == 'GENDER'">
						 SELECT -1 AS TARGET
						 UNION ALL
						 SELECT 'M' AS TARGET
						 UNION ALL
						 SELECT 'F' AS TARGET
					 </when>
			         <otherwise>
						 WITH RECURSIVE BASE AS (
							 SELECT -1 AS TARGET
							 UNION ALL
							 SELECT TARGET+1 FROM BASE WHERE TARGET <![CDATA[<]]> 7
						 )
						 SELECT TARGET FROM BASE
					 </otherwise>
				 </choose>
				  )A LEFT OUTER JOIN
				  (
					  SELECT
						  IFNULL(TARGET, -1) AS TARGET
						   , COUNT(DISTINCT ORD.USERNO) AS HUMANCNT
						   , SUM(ORD.ORDERCNT - IF(ORD.FRSTORDCNT - IFNULL(CLM.CLMCNT, 0) <![CDATA[<=]]> 0, 1, 0)) AS PORDERCNT
						   , SUM((ORD.PURE - IFNULL(CLM.PURE, 0))) AS PRICE
					  FROM (
							SELECT
								A.ORDERIDX
								, 1 AS ORDERCNT
								, FRSTORDCNT
								, STPRICE
								, SALEPROMOAMT
								, (GOODSCPNAMT + DELIVCPNAMT + A.BASKETCPNAMT) AS COUPONAMT
								, RESERVEAMT
								, EPOINTAMT
								, EMPRESERVEAMT
								, DELIVAMT
								, (STPRICE - SALEPROMOAMT - (GOODSCPNAMT + DELIVCPNAMT + A.BASKETCPNAMT)) AS PURE
								, (STPRICE - SALEPROMOAMT) AS PRICE
								, RPAYTOTPRICE
								, MARGIN
								, PAYMENTDATE
								, ORDERDATE
								, DADAMEMBERTYPE
								, MEMLVTYPE
								, ORDPATHTYPE
								, PAYWAYTYPE
								, ISNONMEMBER
								, USERNO
							FROM T_COMORDER A INNER JOIN (
								SELECT
									ORDERIDX
									 , SUM(A.FRSTORDCNT) AS FRSTORDCNT
									 , SUM(A.PRICE * A.FRSTORDCNT) AS STPRICE
									 , SUM(A.SALEPROMOAMT) AS SALEPROMOAMT
									 , SUM(A.GOODSCPNAMT) AS GOODSCPNAMT
									 , SUM(A.DELIVCPNAMT) AS DELIVCPNAMT
									 , SUM(A.RESERVEAMT) AS RESERVEAMT
									 , SUM(A.EPOINTAMT) AS EPOINTAMT
									 , SUM(A.EMPRESERVEAMT) AS EMPRESERVEAMT
									 , SUM(A.DELIVAMT) AS DELIVAMT
									 , SUM(IF(B.ISPBGOODS = 'T', ((A.PRICE - B.ORIGINALPRICE) * A.FRSTORDCNT ), (A.PRICE * (A.COMMRATE/100)) * A.FRSTORDCNT)) AS MARGIN
								FROM T_COMORDER_GOODS A INNER JOIN (
									SELECT
										B.GOODSNO, A.GOODSCODE, B.OPTIONCODE, A.GOODSNAME, BRANDIDX, B.ORIGINALPRICE, ISPBGOODS
										 , FN_GET_OPTION_CONCAT(B.GOODSNO, B.OPTIONCODE, ', ') AS OPTIONNAME
										 , (SELECT CATEIDX FROM T_GOODS_CATEGORY WHERE GOODSNO = A.GOODSNO AND ISREPRE = 'T') AS CATEIDX
									FROM T_GOODS A INNER JOIN T_GOODS_OPTION_DETAIL B ON A.GOODSNO = B.GOODSNO
								)B ON A.GOODSNO = B.GOODSNO AND A.OPTIONCODE = B.OPTIONCODE
								WHERE A.ISTRASH = 'F'
								AND FN_GET_ORDER_STATUS(A.ORDGDIDX) NOT IN ('ODS001', 'ODS002')
								GROUP BY ORDERIDX
							)B ON A.ORDERIDX = B.ORDERIDX AND A.ISTRASH = 'F'
						)ORD LEFT OUTER JOIN (
							SELECT
								   A.ORDERIDX
								 , SUM(CLMCNT) AS CLMCNT
								 , SUM(STPRICE) AS STPRICE
								 , SUM(SALEPROMOAMT) AS SALEPROMOAMT
								 , SUM((GOODSCPNAMT + DELIVCPNAMT + A.BASKETCPNAMT)) AS COUPONAMT
								 , SUM(RESERVEAMT) AS RESERVEAMT
								 , SUM(EPOINTAMT) AS EPOINTAMT
								 , SUM(EMPRESERVEAMT) AS EMPRESERVEAMT
								 , SUM(DELIVAMT) AS DELIVAMT
								 , SUM((STPRICE - SALEPROMOAMT - (GOODSCPNAMT + DELIVCPNAMT + A.BASKETCPNAMT))) AS PURE
								 , SUM((STPRICE - SALEPROMOAMT)) AS PRICE
								 , SUM(RTNPAYAMT) AS RTNPAYAMT
								 , SUM(RTNAMT) AS RTNAMT
								 , SUM(MARGIN) AS MARGIN
							FROM T_CLAIM A INNER JOIN (
								SELECT
									CLMIDX
									, SUM(A.CLMCNT) AS CLMCNT
									, SUM(A.PRICE * A.CLMCNT) AS STPRICE
									, SUM(A.SALEPROMOAMT) AS SALEPROMOAMT
									, SUM(A.GOODSCPNAMT) AS GOODSCPNAMT
									, SUM(A.DELIVCPNAMT) AS DELIVCPNAMT
									, SUM(A.RESERVEAMT) AS RESERVEAMT
									, SUM(A.EPOINTAMT) AS EPOINTAMT
									, SUM(A.EMPRESERVEAMT) AS EMPRESERVEAMT
									, SUM(A.DELIVAMT) AS DELIVAMT
									, SUM(IF(B.ISPBGOODS = 'T', ((A.PRICE - B.ORIGINALPRICE) * A.CLMCNT ), (A.PRICE * (A.COMMRATE/100)) * A.CLMCNT)) AS MARGIN
								FROM T_CLAIM_GOODS A INNER JOIN (
									SELECT
										B.GOODSNO, A.GOODSCODE, B.OPTIONCODE, A.GOODSNAME, BRANDIDX, B.ORIGINALPRICE, ISPBGOODS
										 , FN_GET_OPTION_CONCAT(B.GOODSNO, B.OPTIONCODE, ', ') AS OPTIONNAME
										 , (SELECT CATEIDX FROM T_GOODS_CATEGORY WHERE GOODSNO = A.GOODSNO AND ISREPRE = 'T') AS CATEIDX
									FROM T_GOODS A INNER JOIN T_GOODS_OPTION_DETAIL B ON A.GOODSNO = B.GOODSNO
								)B ON A.GOODSNO = B.GOODSNO AND A.OPTIONCODE = B.OPTIONCODE
								WHERE A.ISTRASH = 'F'
								AND CNCSTATUS = 'CNS005'
								AND ISCLMOPTION = 'T'
								GROUP BY CLMIDX
							)B ON A.CLMIDX = B.CLMIDX
							WHERE ISTRASH = 'F'
							AND CLMTYPE = 'CLM001'
							AND CNCSTATUS = 'CNS005'
							GROUP BY A.ORDERIDX
						)CLM ON ORD.ORDERIDX = CLM.ORDERIDX LEFT OUTER JOIN (
						  SELECT
							USERNO
							<choose>
								<when test="type == 'GENDER' ">
									, GENDER AS TARGET
								</when>
								<otherwise>
									, IF(BIRTHDATE IS NULL OR BIRTHDATE = '', NULL, TRUNCATE((FLOOR(CAST(REPLACE(CURRENT_DATE, '-', '') AS UNSIGNED) - IFNULL(CAST(REPLACE(BIRTHDATE, '-', '') AS UNSIGNED), 0)) / 10000) / 10, 0)) AS TARGET
								</otherwise>
							</choose>
						  FROM T_MEMBER
					  )B ON ORD.USERNO = B.USERNO
						<where>
							AND ORD.ORDERDATE BETWEEN DATE_FORMAT(STR_TO_DATE(#{startdate}, '%Y-%m-%d'), '%Y%m%d000000') AND DATE_FORMAT(STR_TO_DATE(#{enddate}, '%Y-%m-%d'), '%Y%m%d235959')
							<if test='isallmember != null and isallmember == "F" and mumembertypearr != null and mumembertypearr.size > 0'>
								AND ORD.DADAMEMBERTYPE IN
								<foreach index="index" collection="mumembertypearr" item="_idx" open="(" close=")" separator="," >
									#{_idx}
								</foreach>
							</if>
							<if test='isallmemlv != null and isallmemlv =="F" and mumemlvtypearr != null and mumemlvtypearr.size > 0'>
								AND ORD.MEMLVTYPE IN
								<foreach index="index" collection="mumemlvtypearr" item="_idx" open="(" close=")" separator="," >
									#{_idx}
								</foreach>
							</if>
							<if test='isallchannel != null and isallchannel =="F" and muappchtypearr != null and muappchtypearr.size > 0'>
								AND ORD.ORDPATHTYPE IN
								<foreach index="index" collection="muappchtypearr" item="_idx" open="(" close=")" separator="," >
									#{_idx}
								</foreach>
							</if>
							<if test='isallpayway != null and isallpayway =="F" and paywaytypearr != null and paywaytypearr.size > 0'>
								AND ORD.PAYWAYTYPE IN
								<foreach index="index" collection="paywaytypearr" item="_idx" open="(" close=")" separator="," >
									#{_idx}
								</foreach>
							</if>
						</where>
					  GROUP BY TARGET
				  )B ON A.TARGET = B.TARGET LEFT OUTER JOIN (
				 SELECT
					TARGET
					 , SUM(REGCNT) AS REGCNT
					 , SUM(DORCNT) AS DORCNT
					 , SUM(RESCNT) AS RESCNT
					 , SUM(SMSCNT) AS SMSCNT
				FROM (
					SELECT
						<choose>
							<when test="type == 'GENDER' ">
								IF(GENDER IS NULL OR GENDER = '', -1, GENDER) AS TARGET
							</when>
							<otherwise>
								IF(BIRTHDATE IS NULL OR BIRTHDATE = '', -1, TRUNCATE((FLOOR(CAST(REPLACE(CURRENT_DATE, '-', '') AS UNSIGNED) - IFNULL(CAST(REPLACE(BIRTHDATE, '-', '') AS UNSIGNED), 0)) / 10000) / 10, 0)) AS TARGET
							</otherwise>
						</choose>
						 , (CASE WHEN A.STATE = 'MST001' THEN REGDATE
						 		 WHEN A.STATE = 'MST002' THEN CHANGESLEEPDATE
								 WHEN A.STATE = 'MST003' THEN WITHDRAWDATE
								 WHEN B.STATE = 'MST004' THEN B.HISDATE
						   END) AS BASEDATE
						 , IF(A.STATE = 'MST001', 1, 0) AS REGCNT
						 , IF(A.STATE = 'MST002', 1, 0) AS DORCNT
						 , IF(A.STATE = 'MST003', 1, 0) AS RESCNT
						 , IF(B.STATE = 'MST004', CNT, 0) AS SMSCNT
					FROM T_MEMBER A LEFT OUTER JOIN (
							SELECT USERNO, COUNT(DISTINCT USERNO) AS CNT, MAX(REGDATE) AS HISDATE, 'MST004' AS STATE
							FROM T_MEMBER_HISTORY
							WHERE MHISTYPE = 'MHT004'
							AND AFTVAL = 'T'
							GROUP BY USERNO
					)B ON A.USERNO = B.USERNO
			    	<where>
						<if test='isallmember != null and isallmember == "F" and mumembertypearr != null and mumembertypearr.size > 0'>
							AND DADAMEMBERTYPE IN
							<foreach index="index" collection="mumembertypearr" item="_idx" open="(" close=")" separator="," >
								#{_idx}
							</foreach>
						</if>
						<if test='isallmemlv != null and isallmemlv =="F" and mumemlvtypearr != null and mumemlvtypearr.size > 0'>
							AND MEMLVTYPE IN
							<foreach index="index" collection="mumemlvtypearr" item="_idx" open="(" close=")" separator="," >
								#{_idx}
							</foreach>
						</if>
					</where>
				)T
				WHERE BASEDATE BETWEEN DATE_FORMAT(STR_TO_DATE(#{startdate}, '%Y-%m-%d'), '%Y%m%d000000') AND DATE_FORMAT(STR_TO_DATE(#{enddate}, '%Y-%m-%d'), '%Y%m%d235959')
				GROUP BY TARGET
			 )C ON A.TARGET = C.TARGET LEFT OUTER JOIN (
				 SELECT
					TARGET
					, SUM(CNCCNT) AS CNCCNT
					, SUM(EXCCNT) AS EXCCNT
					, SUM(RAMTCNT) AS RAMTCNT
					, SUM(RTNCNT) AS RTNCNT
				 FROM (
					 SELECT
						<choose>
							<when test="type == 'GENDER' ">
								IFNULL((SELECT GENDER FROM T_MEMBER WHERE USERNO = B.USERNO), -1) AS TARGET
							</when>
							<otherwise>
								IF(IFNULL((SELECT IFNULL(BIRTHDATE, -1) FROM T_MEMBER WHERE USERNO = B.USERNO), -1) = -1, -1, TRUNCATE((FLOOR(CAST(REPLACE(CURRENT_DATE, '-', '') AS UNSIGNED) - IFNULL(CAST(REPLACE(IFNULL((SELECT IFNULL(BIRTHDATE, -1) FROM T_MEMBER WHERE USERNO = B.USERNO), -1), '-', '') AS UNSIGNED), 0)) / 10000) / 10, 0)) AS TARGET
							</otherwise>
						</choose>
						, IF(CLMTYPE = 'CLM001' AND CNCSTATUS = 'CNS005', 1, 0) AS CNCCNT
						, IF(CLMTYPE = 'CLM003' AND EXCSTATUS = 'EXS012', 1, 0) AS EXCCNT
						, IF(CLMTYPE IN ('CLM001', 'CLM002') AND (RTNSTATUS = 'RTS010' OR CNCSTATUS = 'CNS005') AND RTNAMT > 0, 1, 0) AS RAMTCNT
						, IF(CLMTYPE = 'CLM002' AND RTNSTATUS = 'RTS010', 1, 0) AS RTNCNT
					 FROM T_CLAIM A LEFT OUTER JOIN T_COMORDER B ON A.ORDERIDX = B.ORDERIDX AND B.ISTRASH = 'F'
					 WHERE A.ISTRASH = 'F'
					 AND CLMCOMPDATE BETWEEN DATE_FORMAT(STR_TO_DATE(#{startdate}, '%Y-%m-%d'), '%Y%m%d000000') AND DATE_FORMAT(STR_TO_DATE(#{enddate}, '%Y-%m-%d'), '%Y%m%d235959')
					<if test='isallchannel != null and isallchannel =="F" and muappchtypearr != null and muappchtypearr.size > 0'>
						AND B.ORDPATHTYPE IN
						<foreach index="index" collection="muappchtypearr" item="_idx" open="(" close=")" separator="," >
							#{_idx}
						</foreach>
					</if>
					<if test='isallpayway != null and isallpayway =="F" and paywaytypearr != null and paywaytypearr.size > 0'>
						AND B.PAYWAYTYPE IN
						<foreach index="index" collection="paywaytypearr" item="_idx" open="(" close=")" separator="," >
							#{_idx}
						</foreach>
					</if>
					<if test="isnonmember != null and isnonmember != '' ">
						AND B.ISNONMEMBER = #{isnonmember}
					</if>
				 )T
				GROUP BY TARGET
			 )D ON A.TARGET = D.TARGET
			<choose>
				<when test="psort == 'humancnt_asc'">
					ORDER BY HUMANCNT ASC
				</when>
				<when test="psort == 'humancnt_desc'">
					ORDER BY HUMANCNT DESC
				</when>
				<when test="psort == 'ordercnt_asc'">
					ORDER BY ORDERCNT ASC
				</when>
				<when test="psort == 'ordercnt_desc'">
					ORDER BY ORDERCNT DESC
				</when>
				<when test="psort == 'pordercnt_asc'">
					ORDER BY PORDERCNT ASC
				</when>
				<when test="psort == 'pordercnt_desc'">
					ORDER BY PORDERCNT DESC
				</when>
				<when test="psort == 'price_asc'">
					ORDER BY PRICE ASC
				</when>
				<when test="psort == 'price_desc'">
					ORDER BY PRICE DESC
				</when>
				<when test="psort == 'unitamt_asc'">
					ORDER BY UNITAMT ASC
				</when>
				<when test="psort == 'unitamt_desc'">
					ORDER BY UNITAMT DESC
				</when>
				<when test="psort == 'cnccnt_asc'">
					ORDER BY CNCCNT ASC
				</when>
				<when test="psort == 'cnccnt_desc'">
					ORDER BY CNCCNT DESC
				</when>
				<when test="psort == 'exccnt_asc'">
					ORDER BY EXCCNT ASC
				</when>
				<when test="psort == 'exccnt_desc'">
					ORDER BY EXCCNT DESC
				</when>
				<when test="psort == 'ramtcnt_asc'">
					ORDER BY RAMTCNT ASC
				</when>
				<when test="psort == 'ramtcnt_desc'">
					ORDER BY RAMTCNT DESC
				</when>
				<when test="psort == 'rtncnt_asc'">
					ORDER BY RTNCNT ASC
				</when>
				<when test="psort == 'rtncnt_desc'">
					ORDER BY RTNCNT DESC
				</when>
				<when test="psort == 'regcnt_asc'">
					ORDER BY REGCNT ASC
				</when>
				<when test="psort == 'regcnt_desc'">
					ORDER BY REGCNT DESC
				</when>
				<when test="psort == 'smscnt_asc'">
					ORDER BY SMSCNT ASC
				</when>
				<when test="psort == 'smscnt_desc'">
					ORDER BY SMSCNT DESC
				</when>
				<when test="psort == 'dorcnt_asc'">
					ORDER BY DORCNT ASC
				</when>
				<when test="psort == 'dorcnt_desc'">
					ORDER BY DORCNT DESC
				</when>
				<when test="psort == 'rescnt_asc'">
					ORDER BY RESCNT ASC
				</when>
				<when test="psort == 'rescnt_desc'">
					ORDER BY RESCNT DESC
				</when>
				<otherwise>
					ORDER BY TARGET DESC
				</otherwise>
			</choose>
		 )T
	</select>

	<select id="selectAgeStatListCountInfo" parameterType="somap" resultType="somap">
		SELECT /* ComOrderMapper.xml selectAgeStatListCountInfo */
			   COUNT(*) AS TOTAL
			 , FORMAT(SUM(HUMANCNT), 0) AS HUMANCNT
			 , FORMAT(SUM(ORDERCNT), 0) AS ORDERCNT
			 , FORMAT(SUM(PORDERCNT), 0) AS PORDERCNT
			 , FORMAT(SUM(PRICE), 0) AS PRICE
			 , FORMAT(SUM(PRICE) / SUM(PORDERCNT), 0) AS UNITAMT
			 , FORMAT(SUM(CNCCNT), 0) AS CNCCNT
			 , FORMAT(SUM(RAMTCNT), 0) AS RAMTCNT
			 , FORMAT(SUM(EXCCNT), 0) AS EXCCNT
		     , FORMAT(SUM(RTNCNT), 0) AS RTNCNT
			 , FORMAT(SUM(REGCNT), 0) AS REGCNT
			 , FORMAT(SUM(SMSCNT), 0) AS SMSCNT
			 , FORMAT(SUM(DORCNT), 0) AS DORCNT
			 , FORMAT(SUM(RESCNT), 0) AS RESCNT

		FROM (
				 SELECT
				 A.TARGET
				  , IFNULL(HUMANCNT, 0) AS HUMANCNT
				  , IFNULL(
						(SELECT COUNT(*) FROM(
							SELECT IFNULL((SELECT GENDER FROM T_MEMBER WHERE USERNO = A.USERNO), -1) AS GENDER
								 , IFNULL((SELECT IFNULL(BIRTHDATE, -1) FROM T_MEMBER WHERE USERNO = A.USERNO), -1) AS BIRTHDATE
							FROM T_COMORDER A
							WHERE A.ISTRASH = 'F'
							AND ORDERDATE BETWEEN DATE_FORMAT(STR_TO_DATE(#{startdate}, '%Y-%m-%d'), '%Y%m%d000000') AND DATE_FORMAT(STR_TO_DATE(#{enddate}, '%Y-%m-%d'), '%Y%m%d235959')
						)T
						<choose>
							<when test="type == 'GENDER' ">
								WHERE A.TARGET = GENDER
							</when>
							<otherwise>
								WHERE A.TARGET = IF(BIRTHDATE = -1, -1, TRUNCATE((FLOOR(CAST(REPLACE(CURRENT_DATE, '-', '') AS UNSIGNED) - IFNULL(CAST(REPLACE(BIRTHDATE, '-', '') AS UNSIGNED), 0)) / 10000) / 10, 0))
							</otherwise>
						</choose>
					), 0) AS ORDERCNT
				  , IFNULL(PORDERCNT, 0) AS PORDERCNT
				  , IFNULL(PRICE, 0) AS PRICE
				  , IFNULL(ROUND( (PRICE / PORDERCNT), 0), 0) AS UNITAMT
				  , IFNULL(D.CNCCNT, 0) AS CNCCNT
				  , IFNULL(D.EXCCNT, 0) AS EXCCNT
				  , IFNULL(D.RAMTCNT, 0) AS RAMTCNT
				  , IFNULL(D.RTNCNT, 0) AS RTNCNT
				  , IFNULL(C.REGCNT, 0) AS REGCNT
				  , IFNULL(C.DORCNT, 0) AS DORCNT
				  , IFNULL(C.RESCNT, 0) AS RESCNT
				  , IFNULL(C.SMSCNT, 0) AS SMSCNT
			 FROM (
			     <choose>
					 <when test="type == 'GENDER'">
						 SELECT -1 AS TARGET
						 UNION ALL
						 SELECT 'M' AS TARGET
						 UNION ALL
						 SELECT 'F' AS TARGET
					 </when>
			         <otherwise>
						 WITH RECURSIVE BASE AS (
							 SELECT -1 AS TARGET
							 UNION ALL
							 SELECT TARGET+1 FROM BASE WHERE TARGET <![CDATA[<]]> 7
						 )
						 SELECT TARGET FROM BASE
					 </otherwise>
				 </choose>
				  )A LEFT OUTER JOIN
				  (
					  SELECT
						  IFNULL(TARGET, -1) AS TARGET
							, COUNT(DISTINCT ORD.USERNO) AS HUMANCNT
							, SUM(ORD.ORDERCNT - IF(ORD.FRSTORDCNT - IFNULL(CLM.CLMCNT, 0) <![CDATA[<=]]> 0, 1, 0)) AS PORDERCNT
							, SUM((ORD.PURE - IFNULL(CLM.PURE, 0))) AS PRICE
					  FROM (
							SELECT
								A.ORDERIDX
								, 1 AS ORDERCNT
								, FRSTORDCNT
								, STPRICE
								, SALEPROMOAMT
								, (GOODSCPNAMT + DELIVCPNAMT + A.BASKETCPNAMT) AS COUPONAMT
								, RESERVEAMT
								, EPOINTAMT
								, EMPRESERVEAMT
								, DELIVAMT
								, (STPRICE - SALEPROMOAMT - (GOODSCPNAMT + DELIVCPNAMT + A.BASKETCPNAMT)) AS PURE
								, (STPRICE - SALEPROMOAMT) AS PRICE
								, RPAYTOTPRICE
								, MARGIN
								, PAYMENTDATE
								, ORDERDATE
								, DADAMEMBERTYPE
								, MEMLVTYPE
								, ORDPATHTYPE
								, PAYWAYTYPE
								, ISNONMEMBER
								, USERNO
							FROM T_COMORDER A INNER JOIN (
								SELECT
									ORDERIDX
									 , SUM(A.FRSTORDCNT) AS FRSTORDCNT
									 , SUM(A.PRICE * A.FRSTORDCNT) AS STPRICE
									 , SUM(A.SALEPROMOAMT) AS SALEPROMOAMT
									 , SUM(A.GOODSCPNAMT) AS GOODSCPNAMT
									 , SUM(A.DELIVCPNAMT) AS DELIVCPNAMT
									 , SUM(A.RESERVEAMT) AS RESERVEAMT
									 , SUM(A.EPOINTAMT) AS EPOINTAMT
									 , SUM(A.EMPRESERVEAMT) AS EMPRESERVEAMT
									 , SUM(A.DELIVAMT) AS DELIVAMT
									 , SUM(IF(B.ISPBGOODS = 'T', ((A.PRICE - B.ORIGINALPRICE) * A.FRSTORDCNT ), (A.PRICE * (A.COMMRATE/100)) * A.FRSTORDCNT)) AS MARGIN
								FROM T_COMORDER_GOODS A INNER JOIN (
									SELECT
										B.GOODSNO, A.GOODSCODE, B.OPTIONCODE, A.GOODSNAME, BRANDIDX, B.ORIGINALPRICE, ISPBGOODS
										 , FN_GET_OPTION_CONCAT(B.GOODSNO, B.OPTIONCODE, ', ') AS OPTIONNAME
										 , (SELECT CATEIDX FROM T_GOODS_CATEGORY WHERE GOODSNO = A.GOODSNO AND ISREPRE = 'T') AS CATEIDX
									FROM T_GOODS A INNER JOIN T_GOODS_OPTION_DETAIL B ON A.GOODSNO = B.GOODSNO
								)B ON A.GOODSNO = B.GOODSNO AND A.OPTIONCODE = B.OPTIONCODE
								WHERE A.ISTRASH = 'F'
								AND FN_GET_ORDER_STATUS(A.ORDGDIDX) NOT IN ('ODS001', 'ODS002')
								GROUP BY ORDERIDX
							)B ON A.ORDERIDX = B.ORDERIDX AND A.ISTRASH = 'F'
						)ORD LEFT OUTER JOIN (
							SELECT
								   A.ORDERIDX
								 , SUM(CLMCNT) AS CLMCNT
								 , SUM(STPRICE) AS STPRICE
								 , SUM(SALEPROMOAMT) AS SALEPROMOAMT
								 , SUM((GOODSCPNAMT + DELIVCPNAMT + A.BASKETCPNAMT)) AS COUPONAMT
								 , SUM(RESERVEAMT) AS RESERVEAMT
								 , SUM(EPOINTAMT) AS EPOINTAMT
								 , SUM(EMPRESERVEAMT) AS EMPRESERVEAMT
								 , SUM(DELIVAMT) AS DELIVAMT
								 , SUM((STPRICE - SALEPROMOAMT - (GOODSCPNAMT + DELIVCPNAMT + A.BASKETCPNAMT))) AS PURE
								 , SUM((STPRICE - SALEPROMOAMT)) AS PRICE
								 , SUM(RTNPAYAMT) AS RTNPAYAMT
								 , SUM(RTNAMT) AS RTNAMT
								 , SUM(MARGIN) AS MARGIN
							FROM T_CLAIM A INNER JOIN (
								SELECT
									CLMIDX
									, SUM(A.CLMCNT) AS CLMCNT
									, SUM(A.PRICE * A.CLMCNT) AS STPRICE
									, SUM(A.SALEPROMOAMT) AS SALEPROMOAMT
									, SUM(A.GOODSCPNAMT) AS GOODSCPNAMT
									, SUM(A.DELIVCPNAMT) AS DELIVCPNAMT
									, SUM(A.RESERVEAMT) AS RESERVEAMT
									, SUM(A.EPOINTAMT) AS EPOINTAMT
									, SUM(A.EMPRESERVEAMT) AS EMPRESERVEAMT
									, SUM(A.DELIVAMT) AS DELIVAMT
									, SUM(IF(B.ISPBGOODS = 'T', ((A.PRICE - B.ORIGINALPRICE) * A.CLMCNT ), (A.PRICE * (A.COMMRATE/100)) * A.CLMCNT)) AS MARGIN
								FROM T_CLAIM_GOODS A INNER JOIN (
									SELECT
										B.GOODSNO, A.GOODSCODE, B.OPTIONCODE, A.GOODSNAME, BRANDIDX, B.ORIGINALPRICE, ISPBGOODS
										 , FN_GET_OPTION_CONCAT(B.GOODSNO, B.OPTIONCODE, ', ') AS OPTIONNAME
										 , (SELECT CATEIDX FROM T_GOODS_CATEGORY WHERE GOODSNO = A.GOODSNO AND ISREPRE = 'T') AS CATEIDX
									FROM T_GOODS A INNER JOIN T_GOODS_OPTION_DETAIL B ON A.GOODSNO = B.GOODSNO
								)B ON A.GOODSNO = B.GOODSNO AND A.OPTIONCODE = B.OPTIONCODE
								WHERE A.ISTRASH = 'F'
								AND CNCSTATUS = 'CNS005'
								AND ISCLMOPTION = 'T'
								GROUP BY CLMIDX
							)B ON A.CLMIDX = B.CLMIDX
							WHERE ISTRASH = 'F'
							AND CLMTYPE = 'CLM001'
							AND CNCSTATUS = 'CNS005'
							GROUP BY A.ORDERIDX
						)CLM ON ORD.ORDERIDX = CLM.ORDERIDX LEFT OUTER JOIN (
						  SELECT
							USERNO
							<choose>
								<when test="type == 'GENDER' ">
									, GENDER AS TARGET
								</when>
								<otherwise>
									, IF(BIRTHDATE IS NULL OR BIRTHDATE = '', NULL, TRUNCATE((FLOOR(CAST(REPLACE(CURRENT_DATE, '-', '') AS UNSIGNED) - IFNULL(CAST(REPLACE(BIRTHDATE, '-', '') AS UNSIGNED), 0)) / 10000) / 10, 0)) AS TARGET
								</otherwise>
							</choose>
						  FROM T_MEMBER
					  )B ON ORD.USERNO = B.USERNO
						<where>
							AND ORD.ORDERDATE BETWEEN DATE_FORMAT(STR_TO_DATE(#{startdate}, '%Y-%m-%d'), '%Y%m%d000000') AND DATE_FORMAT(STR_TO_DATE(#{enddate}, '%Y-%m-%d'), '%Y%m%d235959')
							<if test='isallmember != null and isallmember == "F" and mumembertypearr != null and mumembertypearr.size > 0'>
								AND ORD.DADAMEMBERTYPE IN
								<foreach index="index" collection="mumembertypearr" item="_idx" open="(" close=")" separator="," >
									#{_idx}
								</foreach>
							</if>
							<if test='isallmemlv != null and isallmemlv =="F" and mumemlvtypearr != null and mumemlvtypearr.size > 0'>
								AND ORD.MEMLVTYPE IN
								<foreach index="index" collection="mumemlvtypearr" item="_idx" open="(" close=")" separator="," >
									#{_idx}
								</foreach>
							</if>
							<if test='isallchannel != null and isallchannel =="F" and muappchtypearr != null and muappchtypearr.size > 0'>
								AND ORD.ORDPATHTYPE IN
								<foreach index="index" collection="muappchtypearr" item="_idx" open="(" close=")" separator="," >
									#{_idx}
								</foreach>
							</if>
							<if test='isallpayway != null and isallpayway =="F" and paywaytypearr != null and paywaytypearr.size > 0'>
								AND ORD.PAYWAYTYPE IN
								<foreach index="index" collection="paywaytypearr" item="_idx" open="(" close=")" separator="," >
									#{_idx}
								</foreach>
							</if>
						</where>
					  GROUP BY TARGET
				  )B ON A.TARGET = B.TARGET LEFT OUTER JOIN (
				 SELECT
					TARGET
					 , SUM(REGCNT) AS REGCNT
					 , SUM(DORCNT) AS DORCNT
					 , SUM(RESCNT) AS RESCNT
					 , SUM(SMSCNT) AS SMSCNT
				 FROM (
					SELECT
						<choose>
							<when test="type == 'GENDER' ">
								IF(GENDER IS NULL OR GENDER = '', -1, GENDER) AS TARGET
							</when>
							<otherwise>
								IF(BIRTHDATE IS NULL OR BIRTHDATE = '', -1, TRUNCATE((FLOOR(CAST(REPLACE(CURRENT_DATE, '-', '') AS UNSIGNED) - IFNULL(CAST(REPLACE(BIRTHDATE, '-', '') AS UNSIGNED), 0)) / 10000) / 10, 0)) AS TARGET
							</otherwise>
						</choose>
						 , (CASE WHEN A.STATE = 'MST001' THEN REGDATE
						 		 WHEN A.STATE = 'MST002' THEN CHANGESLEEPDATE
								 WHEN A.STATE = 'MST003' THEN WITHDRAWDATE
								 WHEN B.STATE = 'MST004' THEN B.HISDATE
						   END) AS BASEDATE
						 , IF(A.STATE = 'MST001', 1, 0) AS REGCNT
						 , IF(A.STATE = 'MST002', 1, 0) AS DORCNT
						 , IF(A.STATE = 'MST003', 1, 0) AS RESCNT
						 , IF(B.STATE = 'MST004', CNT, 0) AS SMSCNT
					FROM T_MEMBER A LEFT OUTER JOIN (
							SELECT USERNO, COUNT(DISTINCT USERNO) AS CNT, MAX(REGDATE) AS HISDATE, 'MST004' AS STATE
							FROM T_MEMBER_HISTORY
							WHERE MHISTYPE = 'MHT004'
							AND AFTVAL = 'T'
							GROUP BY USERNO
					)B ON A.USERNO = B.USERNO
			    	<where>
						<if test='isallmember != null and isallmember == "F" and mumembertypearr != null and mumembertypearr.size > 0'>
							AND DADAMEMBERTYPE IN
							<foreach index="index" collection="mumembertypearr" item="_idx" open="(" close=")" separator="," >
								#{_idx}
							</foreach>
						</if>
						<if test='isallmemlv != null and isallmemlv =="F" and mumemlvtypearr != null and mumemlvtypearr.size > 0'>
							AND MEMLVTYPE IN
							<foreach index="index" collection="mumemlvtypearr" item="_idx" open="(" close=")" separator="," >
								#{_idx}
							</foreach>
						</if>
					</where>
				)T
				WHERE BASEDATE BETWEEN DATE_FORMAT(STR_TO_DATE(#{startdate}, '%Y-%m-%d'), '%Y%m%d000000') AND DATE_FORMAT(STR_TO_DATE(#{enddate}, '%Y-%m-%d'), '%Y%m%d235959')
				GROUP BY TARGET
			 )C ON A.TARGET = C.TARGET LEFT OUTER JOIN (
				 SELECT
					TARGET
					, SUM(CNCCNT) AS CNCCNT
					, SUM(EXCCNT) AS EXCCNT
					, SUM(RAMTCNT) AS RAMTCNT
					, SUM(RTNCNT) AS RTNCNT
				 FROM (
					 SELECT
						<choose>
							<when test="type == 'GENDER' ">
								IFNULL((SELECT GENDER FROM T_MEMBER WHERE USERNO = B.USERNO), -1) AS TARGET
							</when>
							<otherwise>
								IF(IFNULL((SELECT IFNULL(BIRTHDATE, -1) FROM T_MEMBER WHERE USERNO = B.USERNO), -1) = -1, -1, TRUNCATE((FLOOR(CAST(REPLACE(CURRENT_DATE, '-', '') AS UNSIGNED) - IFNULL(CAST(REPLACE(IFNULL((SELECT IFNULL(BIRTHDATE, -1) FROM T_MEMBER WHERE USERNO = B.USERNO), -1), '-', '') AS UNSIGNED), 0)) / 10000) / 10, 0)) AS TARGET
							</otherwise>
						</choose>
						, IF(CLMTYPE = 'CLM001' AND CNCSTATUS = 'CNS005', 1, 0) AS CNCCNT
						, IF(CLMTYPE = 'CLM003' AND EXCSTATUS = 'EXS012', 1, 0) AS EXCCNT
						, IF(CLMTYPE IN ('CLM001', 'CLM002') AND (RTNSTATUS = 'RTS010' OR CNCSTATUS = 'CNS005') AND RTNAMT > 0, 1, 0) AS RAMTCNT
						, IF(CLMTYPE = 'CLM002' AND RTNSTATUS = 'RTS010', 1, 0) AS RTNCNT
					 FROM T_CLAIM A LEFT OUTER JOIN T_COMORDER B ON A.ORDERIDX = B.ORDERIDX AND B.ISTRASH = 'F'
					 WHERE A.ISTRASH = 'F'
					 AND CLMCOMPDATE BETWEEN DATE_FORMAT(STR_TO_DATE(#{startdate}, '%Y-%m-%d'), '%Y%m%d000000') AND DATE_FORMAT(STR_TO_DATE(#{enddate}, '%Y-%m-%d'), '%Y%m%d235959')
					<if test='isallchannel != null and isallchannel =="F" and muappchtypearr != null and muappchtypearr.size > 0'>
						AND B.ORDPATHTYPE IN
						<foreach index="index" collection="muappchtypearr" item="_idx" open="(" close=")" separator="," >
							#{_idx}
						</foreach>
					</if>
					<if test='isallpayway != null and isallpayway =="F" and paywaytypearr != null and paywaytypearr.size > 0'>
						AND B.PAYWAYTYPE IN
						<foreach index="index" collection="paywaytypearr" item="_idx" open="(" close=")" separator="," >
							#{_idx}
						</foreach>
					</if>
					<if test="isnonmember != null and isnonmember != '' ">
						AND B.ISNONMEMBER = #{isnonmember}
					</if>
				 )T
				GROUP BY TARGET
			 )D ON A.TARGET = D.TARGET
		 )T
	</select>

	<select id="selectDateStatList" parameterType="somap" resultType="somap">
		SELECT /* ComOrderMapper.xml selectDateStatList */
			T.TARGET
			, FORMAT(PRICE, 0) AS PRICE
		    , FORMAT(ORDERCNT, 0) AS ORDERCNT
			, FORMAT(PORDERCNT, 0) AS PORDERCNT
			, FORMAT(UNITAMT, 0) AS UNITAMT
			, FORMAT(CNCCNT, 0) AS CNCCNT
			, FORMAT(EXCCNT, 0) AS EXCCNT
			, FORMAT(RAMTCNT, 0) AS RAMTCNT
			, FORMAT(RTNCNT, 0) AS RTNCNT
			, FORMAT(REGCNT, 0) AS REGCNT
			, FORMAT(SMSCNT, 0) AS SMSCNT
			, FORMAT(DORCNT, 0) AS DORCNT
			, FORMAT(RESCNT, 0) AS RESCNT
		FROM (
			SELECT
				<choose>
					<when test="type == 'day'">
						DATE_FORMAT(A.TARGET, '%Y-%m-%d') AS TARGET
			     		, (SELECT COUNT(*) FROM T_COMORDER WHERE ISTRASH = 'F' AND DATE_FORMAT(ORDERDATE, '%Y%m%d') = A.TARGET) AS ORDERCNT
					</when>
					<when test="type == 'week'">
						CONCAT(DATE_FORMAT(STR_TO_DATE(CONCAT(A.TARGET,'Saturday'), '%X%V %W'), '%Y-%m'), ' ' ,WEEK(STR_TO_DATE(CONCAT(A.TARGET,'Saturday'), '%X%V %W')) - WEEK(DATE_FORMAT(STR_TO_DATE(CONCAT(A.TARGET,'Saturday'), '%X%V %W'), '%Y-%m-01')) + 1, '주차') AS TARGET
						, (SELECT COUNT(*) FROM T_COMORDER WHERE ISTRASH = 'F' AND YEARWEEK(ORDERDATE) = A.TARGET) AS ORDERCNT
					</when>
					<when test="type == 'month'">
						DATE_FORMAT(STR_TO_DATE(CONCAT(A.TARGET, '01'), '%Y%m%d'), '%Y-%m') AS TARGET
						, (SELECT COUNT(*) FROM T_COMORDER WHERE ISTRASH = 'F' AND DATE_FORMAT(ORDERDATE, '%Y%m') = A.TARGET) AS ORDERCNT
					</when>
				</choose>
			    , IFNULL(PORDERCNT, 0) AS PORDERCNT
				, IFNULL(PRICE, 0) AS PRICE
			    , IFNULL(ROUND( (PRICE / PORDERCNT), 0), 0) AS UNITAMT
				, IFNULL(D.CNCCNT, 0) AS CNCCNT
				, IFNULL(D.EXCCNT, 0) AS EXCCNT
				, IFNULL(D.RAMTCNT, 0) AS RAMTCNT
				, IFNULL(D.RTNCNT, 0) AS RTNCNT
				, IFNULL(C.REGCNT, 0) AS REGCNT
				, IFNULL(C.DORCNT, 0) AS DORCNT
				, IFNULL(C.RESCNT, 0) AS RESCNT
				, IFNULL(C.SMSCNT, 0) AS SMSCNT
			FROM (
				<choose>
					<when test="type == 'day'">
						WITH RECURSIVE DATES AS (
						SELECT STR_TO_DATE(#{startdate}, '%Y-%m-%d') AS DT
						UNION
						SELECT DATE_ADD(DATES.DT, INTERVAL 1 DAY) FROM DATES WHERE DATE_ADD(DATES.DT, INTERVAL 1 DAY) <![CDATA[<=]]> STR_TO_DATE(#{enddate}, '%Y-%m-%d')
						)
						SELECT DATE_FORMAT(DATES.DT, '%Y%m%d') AS TARGET
						FROM DATES
					</when>
					<when test="type == 'week'">
						WITH RECURSIVE DATES AS (
						SELECT STR_TO_DATE(#{startdate}, '%Y-%m-%d') AS DT
						UNION
						SELECT DATE_ADD(DATES.DT, INTERVAL 1 WEEK) FROM DATES WHERE DATE_ADD(DATES.DT, INTERVAL 1 WEEK) <![CDATA[<=]]> STR_TO_DATE(CONCAT(YEARWEEK(STR_TO_DATE(#{enddate}, '%Y-%m-%d')),'Saturday'), '%X%V %W')
						)
						SELECT YEARWEEK(DATES.DT) AS TARGET
						FROM DATES
					</when>
					<when test="type == 'month'">
						WITH RECURSIVE DATES AS (
						SELECT STR_TO_DATE(#{startdate}, '%Y-%m-%d') AS DT
						UNION
						SELECT DATE_ADD(DATES.DT, INTERVAL 1 MONTH) FROM DATES WHERE DATE_ADD(DATES.DT, INTERVAL 1 MONTH) <![CDATA[<=]]> STR_TO_DATE(#{enddate}, '%Y-%m-%d')
						)
						SELECT DATE_FORMAT(DATES.DT, '%Y%m') AS TARGET
						FROM DATES
					</when>
				</choose>
			)A LEFT OUTER JOIN (
				SELECT
					<choose>
						<when test="type == 'day'">
							DATE_FORMAT(ORDERDATE, '%Y%m%d') AS TARGET
						</when>
						<when test="type == 'week'">
							YEARWEEK(ORDERDATE) AS TARGET
						</when>
						<when test="type == 'month'">
							DATE_FORMAT(ORDERDATE, '%Y%m') AS TARGET
						</when>
					</choose>
					, SUM(ORD.ORDERCNT - IF(ORD.FRSTORDCNT - IFNULL(CLM.CLMCNT, 0) <![CDATA[<=]]> 0, 1, 0)) AS PORDERCNT
					, SUM((ORD.PURE - IFNULL(CLM.PURE, 0))) AS PRICE
				FROM (
					SELECT
						A.ORDERIDX
						, 1 AS ORDERCNT
						, FRSTORDCNT
						, STPRICE
						, SALEPROMOAMT
						, (GOODSCPNAMT + DELIVCPNAMT + A.BASKETCPNAMT) AS COUPONAMT
						, RESERVEAMT
						, EPOINTAMT
						, EMPRESERVEAMT
						, DELIVAMT
						, (STPRICE - SALEPROMOAMT - (GOODSCPNAMT + DELIVCPNAMT + A.BASKETCPNAMT)) AS PURE
						, (STPRICE - SALEPROMOAMT) AS PRICE
						, RPAYTOTPRICE
						, MARGIN
						, PAYMENTDATE
					    , ORDERDATE
						, DADAMEMBERTYPE
						, MEMLVTYPE
						, ORDPATHTYPE
						, PAYWAYTYPE
						, ISNONMEMBER
					FROM T_COMORDER A INNER JOIN (
						SELECT
							ORDERIDX
							 , SUM(A.FRSTORDCNT) AS FRSTORDCNT
							 , SUM(A.PRICE * A.FRSTORDCNT) AS STPRICE
							 , SUM(A.SALEPROMOAMT) AS SALEPROMOAMT
							 , SUM(A.GOODSCPNAMT) AS GOODSCPNAMT
							 , SUM(A.DELIVCPNAMT) AS DELIVCPNAMT
							 , SUM(A.RESERVEAMT) AS RESERVEAMT
							 , SUM(A.EPOINTAMT) AS EPOINTAMT
							 , SUM(A.EMPRESERVEAMT) AS EMPRESERVEAMT
							 , SUM(A.DELIVAMT) AS DELIVAMT
							 , SUM(IF(B.ISPBGOODS = 'T', ((A.PRICE - B.ORIGINALPRICE) * A.FRSTORDCNT ), (A.PRICE * (A.COMMRATE/100)) * A.FRSTORDCNT)) AS MARGIN
						FROM T_COMORDER_GOODS A INNER JOIN (
							SELECT
								B.GOODSNO, A.GOODSCODE, B.OPTIONCODE, A.GOODSNAME, BRANDIDX, B.ORIGINALPRICE, ISPBGOODS
								 , FN_GET_OPTION_CONCAT(B.GOODSNO, B.OPTIONCODE, ', ') AS OPTIONNAME
								 , (SELECT CATEIDX FROM T_GOODS_CATEGORY WHERE GOODSNO = A.GOODSNO AND ISREPRE = 'T') AS CATEIDX
							FROM T_GOODS A INNER JOIN T_GOODS_OPTION_DETAIL B ON A.GOODSNO = B.GOODSNO
						)B ON A.GOODSNO = B.GOODSNO AND A.OPTIONCODE = B.OPTIONCODE
						WHERE A.ISTRASH = 'F'
						AND FN_GET_ORDER_STATUS(A.ORDGDIDX) NOT IN ('ODS001', 'ODS002')
						GROUP BY ORDERIDX
					)B ON A.ORDERIDX = B.ORDERIDX AND A.ISTRASH = 'F'
				)ORD LEFT OUTER JOIN (
					SELECT
						   A.ORDERIDX
						 , SUM(CLMCNT) AS CLMCNT
						 , SUM(STPRICE) AS STPRICE
						 , SUM(SALEPROMOAMT) AS SALEPROMOAMT
						 , SUM((GOODSCPNAMT + DELIVCPNAMT + A.BASKETCPNAMT)) AS COUPONAMT
						 , SUM(RESERVEAMT) AS RESERVEAMT
						 , SUM(EPOINTAMT) AS EPOINTAMT
						 , SUM(EMPRESERVEAMT) AS EMPRESERVEAMT
						 , SUM(DELIVAMT) AS DELIVAMT
						 , SUM((STPRICE - SALEPROMOAMT - (GOODSCPNAMT + DELIVCPNAMT + A.BASKETCPNAMT))) AS PURE
						 , SUM((STPRICE - SALEPROMOAMT)) AS PRICE
						 , SUM(RTNPAYAMT) AS RTNPAYAMT
						 , SUM(RTNAMT) AS RTNAMT
						 , SUM(MARGIN) AS MARGIN
					FROM T_CLAIM A INNER JOIN (
						SELECT
							CLMIDX
							, SUM(A.CLMCNT) AS CLMCNT
							, SUM(A.PRICE * A.CLMCNT) AS STPRICE
							, SUM(A.SALEPROMOAMT) AS SALEPROMOAMT
							, SUM(A.GOODSCPNAMT) AS GOODSCPNAMT
							, SUM(A.DELIVCPNAMT) AS DELIVCPNAMT
							, SUM(A.RESERVEAMT) AS RESERVEAMT
							, SUM(A.EPOINTAMT) AS EPOINTAMT
							, SUM(A.EMPRESERVEAMT) AS EMPRESERVEAMT
							, SUM(A.DELIVAMT) AS DELIVAMT
							, SUM(IF(B.ISPBGOODS = 'T', ((A.PRICE - B.ORIGINALPRICE) * A.CLMCNT ), (A.PRICE * (A.COMMRATE/100)) * A.CLMCNT)) AS MARGIN
						FROM T_CLAIM_GOODS A INNER JOIN (
							SELECT
								B.GOODSNO, A.GOODSCODE, B.OPTIONCODE, A.GOODSNAME, BRANDIDX, B.ORIGINALPRICE, ISPBGOODS
								 , FN_GET_OPTION_CONCAT(B.GOODSNO, B.OPTIONCODE, ', ') AS OPTIONNAME
								 , (SELECT CATEIDX FROM T_GOODS_CATEGORY WHERE GOODSNO = A.GOODSNO AND ISREPRE = 'T') AS CATEIDX
							FROM T_GOODS A INNER JOIN T_GOODS_OPTION_DETAIL B ON A.GOODSNO = B.GOODSNO
						)B ON A.GOODSNO = B.GOODSNO AND A.OPTIONCODE = B.OPTIONCODE
						WHERE A.ISTRASH = 'F'
						AND ISCLMOPTION = 'T'
						AND CNCSTATUS = 'CNS005'
						GROUP BY CLMIDX
					)B ON A.CLMIDX = B.CLMIDX
					WHERE ISTRASH = 'F'
					AND CLMTYPE = 'CLM001'
					AND CNCSTATUS = 'CNS005'
					GROUP BY A.ORDERIDX
				)CLM ON ORD.ORDERIDX = CLM.ORDERIDX
				<where>
					AND ORD.ORDERDATE BETWEEN DATE_FORMAT(STR_TO_DATE(#{startdate}, '%Y-%m-%d'), '%Y%m%d000000') AND DATE_FORMAT(STR_TO_DATE(#{enddate}, '%Y-%m-%d'), '%Y%m%d235959')
					<if test='isallmember != null and isallmember == "F" and mumembertypearr != null and mumembertypearr.size > 0'>
						AND DADAMEMBERTYPE IN
						<foreach index="index" collection="mumembertypearr" item="_idx" open="(" close=")" separator="," >
							#{_idx}
						</foreach>
					</if>
					<if test='isallmemlv != null and isallmemlv =="F" and mumemlvtypearr != null and mumemlvtypearr.size > 0'>
						AND MEMLVTYPE IN
						<foreach index="index" collection="mumemlvtypearr" item="_idx" open="(" close=")" separator="," >
							#{_idx}
						</foreach>
					</if>
					<if test='isallchannel != null and isallchannel =="F" and muappchtypearr != null and muappchtypearr.size > 0'>
						AND ORDPATHTYPE IN
						<foreach index="index" collection="muappchtypearr" item="_idx" open="(" close=")" separator="," >
							#{_idx}
						</foreach>
					</if>
					<if test='isallpayway != null and isallpayway =="F" and paywaytypearr != null and paywaytypearr.size > 0'>
						AND PAYWAYTYPE IN
						<foreach index="index" collection="paywaytypearr" item="_idx" open="(" close=")" separator="," >
							#{_idx}
						</foreach>
					</if>
					<if test="isnonmember != null and isnonmember != '' ">
						AND ISNONMEMBER = #{isnonmember}
					</if>
				</where>
				GROUP BY TARGET
			)B ON A.TARGET = B.TARGET LEFT OUTER JOIN (
				 SELECT
					TARGET
					 , SUM(REGCNT) AS REGCNT
					 , SUM(DORCNT) AS DORCNT
					 , SUM(RESCNT) AS RESCNT
					 , SUM(SMSCNT) AS SMSCNT
				FROM (
					SELECT
						<choose>
							<when test="type == 'day'">
								DATE_FORMAT((CASE WHEN A.STATE = 'MST001' THEN REGDATE
								WHEN A.STATE = 'MST002' THEN CHANGESLEEPDATE
								WHEN A.STATE = 'MST003' THEN WITHDRAWDATE
								WHEN B.STATE = 'MST004' THEN B.HISDATE
								END), '%Y%m%d') AS TARGET
							</when>
							<when test="type == 'week'">
								YEARWEEK((CASE WHEN A.STATE = 'MST001' THEN REGDATE
								WHEN A.STATE = 'MST002' THEN CHANGESLEEPDATE
								WHEN A.STATE = 'MST003' THEN WITHDRAWDATE
								WHEN B.STATE = 'MST004' THEN B.HISDATE
								END)) AS TARGET
							</when>
							<when test="type == 'month'">
								DATE_FORMAT((CASE WHEN A.STATE = 'MST001' THEN REGDATE
								WHEN A.STATE = 'MST002' THEN CHANGESLEEPDATE
								WHEN A.STATE = 'MST003' THEN WITHDRAWDATE
								WHEN B.STATE = 'MST004' THEN B.HISDATE
								END), '%Y%m') AS TARGET
							</when>
						</choose>
						 , IF(A.STATE = 'MST001', 1, 0) AS REGCNT
						 , IF(A.STATE = 'MST002', 1, 0) AS DORCNT
						 , IF(A.STATE = 'MST003', 1, 0) AS RESCNT
						 , IF(B.STATE = 'MST004', CNT, 0) AS SMSCNT
					FROM T_MEMBER A LEFT OUTER JOIN (
							SELECT USERNO, COUNT(DISTINCT USERNO) AS CNT, MAX(REGDATE) AS HISDATE, 'MST004' AS STATE
							FROM T_MEMBER_HISTORY
							WHERE MHISTYPE = 'MHT004'
							AND AFTVAL = 'T'
							GROUP BY USERNO
					)B ON A.USERNO = B.USERNO
			    	<where>
						<if test='isallmember != null and isallmember == "F" and mumembertypearr != null and mumembertypearr.size > 0'>
							AND DADAMEMBERTYPE IN
							<foreach index="index" collection="mumembertypearr" item="_idx" open="(" close=")" separator="," >
								#{_idx}
							</foreach>
						</if>
						<if test='isallmemlv != null and isallmemlv =="F" and mumemlvtypearr != null and mumemlvtypearr.size > 0'>
							AND MEMLVTYPE IN
							<foreach index="index" collection="mumemlvtypearr" item="_idx" open="(" close=")" separator="," >
								#{_idx}
							</foreach>
						</if>
					</where>
				)T
				GROUP BY TARGET
			 )C ON A.TARGET = C.TARGET LEFT OUTER JOIN (
				 SELECT
					TARGET
					, SUM(CNCCNT) AS CNCCNT
					, SUM(EXCCNT) AS EXCCNT
					, SUM(RAMTCNT) AS RAMTCNT
					, SUM(RTNCNT) AS RTNCNT
				 FROM (
					 SELECT
						<choose>
							<when test="type == 'day'">
								DATE_FORMAT(CLMCOMPDATE, '%Y%m%d') AS TARGET
							</when>
							<when test="type == 'week'">
								YEARWEEK(CLMCOMPDATE) AS TARGET
							</when>
							<when test="type == 'month'">
								DATE_FORMAT(CLMCOMPDATE, '%Y%m') AS TARGET
							</when>
						</choose>
						, IF(CLMTYPE = 'CLM001' AND CNCSTATUS = 'CNS005', 1, 0) AS CNCCNT
						, IF(CLMTYPE = 'CLM003' AND EXCSTATUS = 'EXS012', 1, 0) AS EXCCNT
						, IF(CLMTYPE IN ('CLM001', 'CLM002') AND (RTNSTATUS = 'RTS010' OR CNCSTATUS = 'CNS005') AND RTNAMT > 0, 1, 0) AS RAMTCNT
						, IF(CLMTYPE = 'CLM002' AND RTNSTATUS = 'RTS010', 1, 0) AS RTNCNT
					 FROM T_CLAIM A LEFT OUTER JOIN T_COMORDER B ON A.ORDERIDX = B.ORDERIDX AND B.ISTRASH = 'F'
					 WHERE A.ISTRASH = 'F'
					 AND CLMCOMPDATE BETWEEN DATE_FORMAT(STR_TO_DATE(#{startdate}, '%Y-%m-%d'), '%Y%m%d000000') AND DATE_FORMAT(STR_TO_DATE(#{enddate}, '%Y-%m-%d'), '%Y%m%d235959')
					<if test='isallchannel != null and isallchannel =="F" and muappchtypearr != null and muappchtypearr.size > 0'>
						AND B.ORDPATHTYPE IN
						<foreach index="index" collection="muappchtypearr" item="_idx" open="(" close=")" separator="," >
							#{_idx}
						</foreach>
					</if>
					<if test='isallpayway != null and isallpayway =="F" and paywaytypearr != null and paywaytypearr.size > 0'>
						AND B.PAYWAYTYPE IN
						<foreach index="index" collection="paywaytypearr" item="_idx" open="(" close=")" separator="," >
							#{_idx}
						</foreach>
					</if>
					<if test="isnonmember != null and isnonmember != '' ">
						AND B.ISNONMEMBER = #{isnonmember}
					</if>
				 )T
				GROUP BY TARGET
			 )D ON A.TARGET = D.TARGET
		<choose>
			<when test="psort == 'target_asc'">
				ORDER BY TARGET ASC
			</when>
			<when test="psort == 'target_desc'">
				ORDER BY TARGET DESC
			</when>
			<when test="psort == 'ordercnt_asc'">
				ORDER BY ORDERCNT ASC
			</when>
			<when test="psort == 'ordercnt_desc'">
				ORDER BY ORDERCNT DESC
			</when>
			<when test="psort == 'pordercnt_asc'">
				ORDER BY PORDERCNT ASC
			</when>
			<when test="psort == 'pordercnt_desc'">
				ORDER BY PORDERCNT DESC
			</when>
			<when test="psort == 'price_asc'">
				ORDER BY PRICE ASC
			</when>
			<when test="psort == 'price_desc'">
				ORDER BY PRICE DESC
			</when>
			<when test="psort == 'unitamt_asc'">
				ORDER BY UNITAMT ASC
			</when>
			<when test="psort == 'unitamt_desc'">
				ORDER BY UNITAMT DESC
			</when>
			<when test="psort == 'cnccnt_asc'">
				ORDER BY CNCCNT ASC
			</when>
			<when test="psort == 'cnccnt_desc'">
				ORDER BY CNCCNT DESC
			</when>
			<when test="psort == 'exccnt_asc'">
				ORDER BY EXCCNT ASC
			</when>
			<when test="psort == 'exccnt_desc'">
				ORDER BY EXCCNT DESC
			</when>
			<when test="psort == 'ramtcnt_asc'">
				ORDER BY RAMTCNT ASC
			</when>
			<when test="psort == 'ramtcnt_desc'">
				ORDER BY RAMTCNT DESC
			</when>
			<when test="psort == 'rtncnt_asc'">
				ORDER BY RTNCNT ASC
			</when>
			<when test="psort == 'rtncnt_desc'">
				ORDER BY RTNCNT DESC
			</when>
			<when test="psort == 'regcnt_asc'">
				ORDER BY REGCNT ASC
			</when>
			<when test="psort == 'regcnt_desc'">
				ORDER BY REGCNT DESC
			</when>
			<when test="psort == 'smscnt_asc'">
				ORDER BY SMSCNT ASC
			</when>
			<when test="psort == 'smscnt_desc'">
				ORDER BY SMSCNT DESC
			</when>
			<when test="psort == 'dorcnt_asc'">
				ORDER BY DORCNT ASC
			</when>
			<when test="psort == 'dorcnt_desc'">
				ORDER BY DORCNT DESC
			</when>
			<when test="psort == 'rescnt_asc'">
				ORDER BY RESCNT ASC
			</when>
			<when test="psort == 'rescnt_desc'">
				ORDER BY RESCNT DESC
			</when>
			<otherwise>
				ORDER BY TARGET DESC
			</otherwise>
		</choose>
		)T
		<if test="startpage != null and !startpage.equals('') and endpage != null and !endpage.equals('')">
			LIMIT #{startpage}, #{endpage}
		</if>
	</select>

	<select id="selectDateStatListCountInfo" parameterType="somap" resultType="somap">
		SELECT /* ComOrderMapper.xml selectDateStatListCountInfo */
		  	  COUNT(*) AS TOTAL
			, FORMAT(SUM(PRICE), 0) AS PRICE
		    , FORMAT(SUM(ORDERCNT), 0) AS ORDERCNT
			, FORMAT(SUM(PORDERCNT), 0) AS PORDERCNT
			, FORMAT(SUM(PRICE) / SUM(PORDERCNT), 0) AS UNITAMT
			, FORMAT(SUM(CNCCNT), 0) AS CNCCNT
			, FORMAT(SUM(EXCCNT), 0) AS EXCCNT
			, FORMAT(SUM(RAMTCNT), 0) AS RAMTCNT
			, FORMAT(SUM(RTNCNT), 0) AS RTNCNT
			, FORMAT(SUM(REGCNT), 0) AS REGCNT
			, FORMAT(SUM(SMSCNT), 0) AS SMSCNT
			, FORMAT(SUM(DORCNT), 0) AS DORCNT
			, FORMAT(SUM(RESCNT), 0) AS RESCNT
		FROM (
			SELECT
				<choose>
					<when test="type == 'day'">
						DATE_FORMAT(A.TARGET, '%Y-%m-%d') AS TARGET
						, (SELECT COUNT(*) FROM T_COMORDER WHERE ISTRASH = 'F' AND DATE_FORMAT(ORDERDATE, '%Y%m%d') = A.TARGET) AS ORDERCNT
					</when>
					<when test="type == 'week'">
						CONCAT(DATE_FORMAT(STR_TO_DATE(CONCAT(A.TARGET,'Saturday'), '%X%V %W'), '%Y-%m'), ' ' ,WEEK(STR_TO_DATE(CONCAT(A.TARGET,'Saturday'), '%X%V %W')) - WEEK(DATE_FORMAT(STR_TO_DATE(CONCAT(A.TARGET,'Saturday'), '%X%V %W'), '%Y-%m-01')) + 1, '주차') AS TARGET
						, (SELECT COUNT(*) FROM T_COMORDER WHERE ISTRASH = 'F' AND YEARWEEK(ORDERDATE) = A.TARGET) AS ORDERCNT
					</when>
					<when test="type == 'month'">
						DATE_FORMAT(STR_TO_DATE(CONCAT(A.TARGET, '01'), '%Y%m%d'), '%Y-%m') AS TARGET
						, (SELECT COUNT(*) FROM T_COMORDER WHERE ISTRASH = 'F' AND DATE_FORMAT(ORDERDATE, '%Y%m') = A.TARGET) AS ORDERCNT
					</when>
				</choose>
			    , IFNULL(PORDERCNT, 0) AS PORDERCNT
				, IFNULL(PRICE, 0) AS PRICE
			    , IFNULL(ROUND( (PRICE / PORDERCNT), 0), 0) AS UNITAMT
				, IFNULL(D.CNCCNT, 0) AS CNCCNT
				, IFNULL(D.EXCCNT, 0) AS EXCCNT
				, IFNULL(D.RAMTCNT, 0) AS RAMTCNT
				, IFNULL(D.RTNCNT, 0) AS RTNCNT
				, IFNULL(C.REGCNT, 0) AS REGCNT
				, IFNULL(C.DORCNT, 0) AS DORCNT
				, IFNULL(C.RESCNT, 0) AS RESCNT
				, IFNULL(C.SMSCNT, 0) AS SMSCNT
			FROM (
				<choose>
					<when test="type == 'day'">
						WITH RECURSIVE DATES AS (
						SELECT STR_TO_DATE(#{startdate}, '%Y-%m-%d') AS DT
						UNION
						SELECT DATE_ADD(DATES.DT, INTERVAL 1 DAY) FROM DATES WHERE DATE_ADD(DATES.DT, INTERVAL 1 DAY) <![CDATA[<=]]> STR_TO_DATE(#{enddate}, '%Y-%m-%d')
						)
						SELECT DATE_FORMAT(DATES.DT, '%Y%m%d') AS TARGET
						FROM DATES
					</when>
					<when test="type == 'week'">
						WITH RECURSIVE DATES AS (
						SELECT STR_TO_DATE(#{startdate}, '%Y-%m-%d') AS DT
						UNION
						SELECT DATE_ADD(DATES.DT, INTERVAL 1 WEEK) FROM DATES WHERE DATE_ADD(DATES.DT, INTERVAL 1 WEEK) <![CDATA[<=]]> STR_TO_DATE(CONCAT(YEARWEEK(STR_TO_DATE(#{enddate}, '%Y-%m-%d')),'Saturday'), '%X%V %W')
						)
						SELECT YEARWEEK(DATES.DT) AS TARGET
						FROM DATES
					</when>
					<when test="type == 'month'">
						WITH RECURSIVE DATES AS (
						SELECT STR_TO_DATE(#{startdate}, '%Y-%m-%d') AS DT
						UNION
						SELECT DATE_ADD(DATES.DT, INTERVAL 1 MONTH) FROM DATES WHERE DATE_ADD(DATES.DT, INTERVAL 1 MONTH) <![CDATA[<=]]> STR_TO_DATE(#{enddate}, '%Y-%m-%d')
						)
						SELECT DATE_FORMAT(DATES.DT, '%Y%m') AS TARGET
						FROM DATES
					</when>
				</choose>
			)A LEFT OUTER JOIN (
				SELECT
					<choose>
						<when test="type == 'day'">
							DATE_FORMAT(ORDERDATE, '%Y%m%d') AS TARGET
						</when>
						<when test="type == 'week'">
							YEARWEEK(ORDERDATE) AS TARGET
						</when>
						<when test="type == 'month'">
							DATE_FORMAT(ORDERDATE, '%Y%m') AS TARGET
						</when>
					</choose>
					, SUM(ORD.ORDERCNT - IF(ORD.FRSTORDCNT - IFNULL(CLM.CLMCNT, 0) <![CDATA[<=]]> 0, 1, 0)) AS PORDERCNT
					, SUM((ORD.PURE - IFNULL(CLM.PURE, 0))) AS PRICE
				FROM (
					SELECT
						A.ORDERIDX
						, 1 AS ORDERCNT
						, FRSTORDCNT
						, STPRICE
						, SALEPROMOAMT
						, (GOODSCPNAMT + DELIVCPNAMT + A.BASKETCPNAMT) AS COUPONAMT
						, RESERVEAMT
						, EPOINTAMT
						, EMPRESERVEAMT
						, DELIVAMT
						, (STPRICE - SALEPROMOAMT - (GOODSCPNAMT + DELIVCPNAMT + A.BASKETCPNAMT)) AS PURE
						, (STPRICE - SALEPROMOAMT) AS PRICE
						, RPAYTOTPRICE
						, MARGIN
						, PAYMENTDATE
					    , ORDERDATE
						, DADAMEMBERTYPE
						, MEMLVTYPE
						, ORDPATHTYPE
						, PAYWAYTYPE
						, ISNONMEMBER
					FROM T_COMORDER A INNER JOIN (
						SELECT
							ORDERIDX
							 , SUM(A.FRSTORDCNT) AS FRSTORDCNT
							 , SUM(A.PRICE * A.FRSTORDCNT) AS STPRICE
							 , SUM(A.SALEPROMOAMT) AS SALEPROMOAMT
							 , SUM(A.GOODSCPNAMT) AS GOODSCPNAMT
							 , SUM(A.DELIVCPNAMT) AS DELIVCPNAMT
							 , SUM(A.RESERVEAMT) AS RESERVEAMT
							 , SUM(A.EPOINTAMT) AS EPOINTAMT
							 , SUM(A.EMPRESERVEAMT) AS EMPRESERVEAMT
							 , SUM(A.DELIVAMT) AS DELIVAMT
							 , SUM(IF(B.ISPBGOODS = 'T', ((A.PRICE - B.ORIGINALPRICE) * A.FRSTORDCNT ), (A.PRICE * (A.COMMRATE/100)) * A.FRSTORDCNT)) AS MARGIN
						FROM T_COMORDER_GOODS A INNER JOIN (
							SELECT
								B.GOODSNO, A.GOODSCODE, B.OPTIONCODE, A.GOODSNAME, BRANDIDX, B.ORIGINALPRICE, ISPBGOODS
								 , FN_GET_OPTION_CONCAT(B.GOODSNO, B.OPTIONCODE, ', ') AS OPTIONNAME
								 , (SELECT CATEIDX FROM T_GOODS_CATEGORY WHERE GOODSNO = A.GOODSNO AND ISREPRE = 'T') AS CATEIDX
							FROM T_GOODS A INNER JOIN T_GOODS_OPTION_DETAIL B ON A.GOODSNO = B.GOODSNO
						)B ON A.GOODSNO = B.GOODSNO AND A.OPTIONCODE = B.OPTIONCODE
						WHERE A.ISTRASH = 'F'
						AND FN_GET_ORDER_STATUS(A.ORDGDIDX) NOT IN ('ODS001', 'ODS002')
						GROUP BY ORDERIDX
					)B ON A.ORDERIDX = B.ORDERIDX AND A.ISTRASH = 'F'
				)ORD LEFT OUTER JOIN (
					SELECT
						   A.ORDERIDX
						 , SUM(CLMCNT) AS CLMCNT
						 , SUM(STPRICE) AS STPRICE
						 , SUM(SALEPROMOAMT) AS SALEPROMOAMT
						 , SUM((GOODSCPNAMT + DELIVCPNAMT + A.BASKETCPNAMT)) AS COUPONAMT
						 , SUM(RESERVEAMT) AS RESERVEAMT
						 , SUM(EPOINTAMT) AS EPOINTAMT
						 , SUM(EMPRESERVEAMT) AS EMPRESERVEAMT
						 , SUM(DELIVAMT) AS DELIVAMT
						 , SUM((STPRICE - SALEPROMOAMT - (GOODSCPNAMT + DELIVCPNAMT + A.BASKETCPNAMT))) AS PURE
						 , SUM((STPRICE - SALEPROMOAMT)) AS PRICE
						 , SUM(RTNPAYAMT) AS RTNPAYAMT
						 , SUM(RTNAMT) AS RTNAMT
						 , SUM(MARGIN) AS MARGIN
					FROM T_CLAIM A INNER JOIN (
						SELECT
							CLMIDX
							, SUM(A.CLMCNT) AS CLMCNT
							, SUM(A.PRICE * A.CLMCNT) AS STPRICE
							, SUM(A.SALEPROMOAMT) AS SALEPROMOAMT
							, SUM(A.GOODSCPNAMT) AS GOODSCPNAMT
							, SUM(A.DELIVCPNAMT) AS DELIVCPNAMT
							, SUM(A.RESERVEAMT) AS RESERVEAMT
							, SUM(A.EPOINTAMT) AS EPOINTAMT
							, SUM(A.EMPRESERVEAMT) AS EMPRESERVEAMT
							, SUM(A.DELIVAMT) AS DELIVAMT
							, SUM(IF(B.ISPBGOODS = 'T', ((A.PRICE - B.ORIGINALPRICE) * A.CLMCNT ), (A.PRICE * (A.COMMRATE/100)) * A.CLMCNT)) AS MARGIN
						FROM T_CLAIM_GOODS A INNER JOIN (
							SELECT
								B.GOODSNO, A.GOODSCODE, B.OPTIONCODE, A.GOODSNAME, BRANDIDX, B.ORIGINALPRICE, ISPBGOODS
								 , FN_GET_OPTION_CONCAT(B.GOODSNO, B.OPTIONCODE, ', ') AS OPTIONNAME
								 , (SELECT CATEIDX FROM T_GOODS_CATEGORY WHERE GOODSNO = A.GOODSNO AND ISREPRE = 'T') AS CATEIDX
							FROM T_GOODS A INNER JOIN T_GOODS_OPTION_DETAIL B ON A.GOODSNO = B.GOODSNO
						)B ON A.GOODSNO = B.GOODSNO AND A.OPTIONCODE = B.OPTIONCODE
						WHERE A.ISTRASH = 'F'
						AND CNCSTATUS = 'CNS005'
						AND ISCLMOPTION = 'T'
						GROUP BY CLMIDX
					)B ON A.CLMIDX = B.CLMIDX
					WHERE ISTRASH = 'F'
					AND CLMTYPE = 'CLM001'
					AND CNCSTATUS = 'CNS005'
					GROUP BY A.ORDERIDX
				)CLM ON ORD.ORDERIDX = CLM.ORDERIDX
				<where>
					AND ORD.ORDERDATE BETWEEN DATE_FORMAT(STR_TO_DATE(#{startdate}, '%Y-%m-%d'), '%Y%m%d000000') AND DATE_FORMAT(STR_TO_DATE(#{enddate}, '%Y-%m-%d'), '%Y%m%d235959')
					<if test='isallmember != null and isallmember == "F" and mumembertypearr != null and mumembertypearr.size > 0'>
						AND DADAMEMBERTYPE IN
						<foreach index="index" collection="mumembertypearr" item="_idx" open="(" close=")" separator="," >
							#{_idx}
						</foreach>
					</if>
					<if test='isallmemlv != null and isallmemlv =="F" and mumemlvtypearr != null and mumemlvtypearr.size > 0'>
						AND MEMLVTYPE IN
						<foreach index="index" collection="mumemlvtypearr" item="_idx" open="(" close=")" separator="," >
							#{_idx}
						</foreach>
					</if>
					<if test='isallchannel != null and isallchannel =="F" and muappchtypearr != null and muappchtypearr.size > 0'>
						AND ORDPATHTYPE IN
						<foreach index="index" collection="muappchtypearr" item="_idx" open="(" close=")" separator="," >
							#{_idx}
						</foreach>
					</if>
					<if test='isallpayway != null and isallpayway =="F" and paywaytypearr != null and paywaytypearr.size > 0'>
						AND PAYWAYTYPE IN
						<foreach index="index" collection="paywaytypearr" item="_idx" open="(" close=")" separator="," >
							#{_idx}
						</foreach>
					</if>
					<if test="isnonmember != null and isnonmember != '' ">
						AND ISNONMEMBER = #{isnonmember}
					</if>
				</where>
				GROUP BY TARGET
			)B ON A.TARGET = B.TARGET LEFT OUTER JOIN (
				 SELECT
					TARGET
					 , SUM(REGCNT) AS REGCNT
					 , SUM(DORCNT) AS DORCNT
					 , SUM(RESCNT) AS RESCNT
					 , SUM(SMSCNT) AS SMSCNT
				FROM (
					SELECT
					<choose>
						<when test="type == 'day'">
							DATE_FORMAT((CASE WHEN A.STATE = 'MST001' THEN REGDATE
							WHEN A.STATE = 'MST002' THEN CHANGESLEEPDATE
							WHEN A.STATE = 'MST003' THEN WITHDRAWDATE
							WHEN B.STATE = 'MST004' THEN B.HISDATE
							END), '%Y%m%d') AS TARGET
						</when>
						<when test="type == 'week'">
							YEARWEEK((CASE WHEN A.STATE = 'MST001' THEN REGDATE
							WHEN A.STATE = 'MST002' THEN CHANGESLEEPDATE
							WHEN A.STATE = 'MST003' THEN WITHDRAWDATE
							WHEN B.STATE = 'MST004' THEN B.HISDATE
							END)) AS TARGET
						</when>
						<when test="type == 'month'">
							DATE_FORMAT((CASE WHEN A.STATE = 'MST001' THEN REGDATE
							WHEN A.STATE = 'MST002' THEN CHANGESLEEPDATE
							WHEN A.STATE = 'MST003' THEN WITHDRAWDATE
							WHEN B.STATE = 'MST004' THEN B.HISDATE
							END), '%Y%m') AS TARGET
						</when>
					</choose>
						 , IF(A.STATE = 'MST001', 1, 0) AS REGCNT
						 , IF(A.STATE = 'MST002', 1, 0) AS DORCNT
						 , IF(A.STATE = 'MST003', 1, 0) AS RESCNT
						 , IF(B.STATE = 'MST004', CNT, 0) AS SMSCNT
					FROM T_MEMBER A LEFT OUTER JOIN (
							SELECT USERNO, COUNT(DISTINCT USERNO) AS CNT, MAX(REGDATE) AS HISDATE, 'MST004' AS STATE
							FROM T_MEMBER_HISTORY
							WHERE MHISTYPE = 'MHT004'
							AND AFTVAL = 'T'
							GROUP BY USERNO
					)B ON A.USERNO = B.USERNO
					<where>
						<if test='isallmember != null and isallmember == "F" and mumembertypearr != null and mumembertypearr.size > 0'>
							AND DADAMEMBERTYPE IN
							<foreach index="index" collection="mumembertypearr" item="_idx" open="(" close=")" separator="," >
								#{_idx}
							</foreach>
						</if>
						<if test='isallmemlv != null and isallmemlv =="F" and mumemlvtypearr != null and mumemlvtypearr.size > 0'>
							AND MEMLVTYPE IN
							<foreach index="index" collection="mumemlvtypearr" item="_idx" open="(" close=")" separator="," >
								#{_idx}
							</foreach>
						</if>
					</where>
				)T
				GROUP BY TARGET
			 )C ON A.TARGET = C.TARGET LEFT OUTER JOIN (
             SELECT
				TARGET
                , SUM(CNCCNT) AS CNCCNT
                , SUM(EXCCNT) AS EXCCNT
                , SUM(RAMTCNT) AS RAMTCNT
                , SUM(RTNCNT) AS RTNCNT
             FROM (
                 SELECT
					<choose>
						<when test="type == 'day'">
							DATE_FORMAT(CLMCOMPDATE, '%Y%m%d') AS TARGET
						</when>
						<when test="type == 'week'">
							YEARWEEK(CLMCOMPDATE) AS TARGET
						</when>
						<when test="type == 'month'">
							DATE_FORMAT(CLMCOMPDATE, '%Y%m') AS TARGET
						</when>
					</choose>
                    , IF(CLMTYPE = 'CLM001' AND CNCSTATUS = 'CNS005', 1, 0) AS CNCCNT
                    , IF(CLMTYPE = 'CLM003' AND EXCSTATUS = 'EXS012', 1, 0) AS EXCCNT
                    , IF(CLMTYPE IN ('CLM001', 'CLM002') AND (RTNSTATUS = 'RTS010' OR CNCSTATUS = 'CNS005') AND RTNAMT > 0, 1, 0) AS RAMTCNT
                    , IF(CLMTYPE = 'CLM002' AND RTNSTATUS = 'RTS010', 1, 0) AS RTNCNT
				FROM T_CLAIM A LEFT OUTER JOIN T_COMORDER B ON A.ORDERIDX = B.ORDERIDX AND B.ISTRASH = 'F'
				WHERE A.ISTRASH = 'F'
				AND CLMCOMPDATE BETWEEN DATE_FORMAT(STR_TO_DATE(#{startdate}, '%Y-%m-%d'), '%Y%m%d000000') AND DATE_FORMAT(STR_TO_DATE(#{enddate}, '%Y-%m-%d'), '%Y%m%d235959')
				<if test='isallchannel != null and isallchannel =="F" and muappchtypearr != null and muappchtypearr.size > 0'>
					AND B.ORDPATHTYPE IN
					<foreach index="index" collection="muappchtypearr" item="_idx" open="(" close=")" separator="," >
						#{_idx}
					</foreach>
				</if>
				<if test='isallpayway != null and isallpayway =="F" and paywaytypearr != null and paywaytypearr.size > 0'>
					AND B.PAYWAYTYPE IN
					<foreach index="index" collection="paywaytypearr" item="_idx" open="(" close=")" separator="," >
						#{_idx}
					</foreach>
				</if>
				<if test="isnonmember != null and isnonmember != '' ">
					AND B.ISNONMEMBER = #{isnonmember}
				</if>
             )T
            GROUP BY TARGET
         )D ON A.TARGET = D.TARGET
		)T
	</select>

	<select id="selectPartnersSaleList" parameterType="somap" resultType="somap">
		SELECT /* ComOrderMapper.xml selectPartnersSaleList */
			DATE_FORMAT(TARGET, '%Y-%m-%d') AS TARGET
			, FORMAT(ORDERCNT, 0) AS ORDERCNT
			, FORMAT(FRSTORDCNT, 0) AS FRSTORDCNT
			, FORMAT(ORDAMT, 0) AS ORDAMT
			, FORMAT(DELIVAMT, 0) AS DELIVAMT
			, FORMAT(PROMOSHAREAMT, 0) AS PROMOSHAREAMT
			, FORMAT(CPNSHAREAMT, 0) AS CPNSHAREAMT
			, FORMAT(REALAMT, 0) AS REALAMT
			, FORMAT(PRICE, 0) AS PRICE
			, FORMAT(RTNAMT, 0) AS RTNAMT
		FROM (
			SELECT
				A.TARGET
				,IFNULL(ORDERCNT, 0) AS ORDERCNT
				,IFNULL(FRSTORDCNT, 0) AS FRSTORDCNT
				,IFNULL(ORDAMT, 0) AS ORDAMT
				,IFNULL(DELIVAMT, 0) AS DELIVAMT
				,IFNULL(PROMOSHAREAMT, 0) AS PROMOSHAREAMT
				,IFNULL(CPNSHAREAMT, 0) AS CPNSHAREAMT
				,IFNULL(REALAMT, 0) AS REALAMT
				,IFNULL(ORDAMT, 0) + IFNULL(DELIVAMT, 0) - IFNULL(PROMOSHAREAMT, 0) - IFNULL(CPNSHAREAMT, 0) AS PRICE
				,IFNULL(RTNAMT, 0) AS RTNAMT
			FROM(
				WITH RECURSIVE DATES AS (
					SELECT STR_TO_DATE(#{startdate}, '%Y-%m-%d') AS DT
					UNION
					SELECT DATE_ADD(DATES.DT, INTERVAL 1 DAY) FROM DATES WHERE DATE_ADD(DATES.DT, INTERVAL 1 DAY) <![CDATA[<=]]> STR_TO_DATE(#{enddate}, '%Y-%m-%d')
				)
				SELECT DATE_FORMAT(DATES.DT, '%Y%m%d') AS TARGET
				FROM DATES
			)A LEFT OUTER JOIN
			(
				SELECT
					DATE_FORMAT(COMPLETEDATE, '%Y%m%d') AS TARGET
					, COUNT(DISTINCT DELORDERIDX) AS ORDERCNT
					, SUM(T.FRSTORDCNT - IFNULL(T.CLMCNT, 0)) AS FRSTORDCNT
					, SUM(PRICE - IFNULL(CNCPRICE, 0)) AS ORDAMT /* 주문금액 */
					, SUM(DELIVAMT - IFNULL(CNCDELIVAMT, 0)) AS DELIVAMT
					, SUM(T.PROMOSHAREAMT - IFNULL(CNCPROMOSHAREAMT, 0)) AS PROMOSHAREAMT
					, SUM(T.CPNSHAREAMT - IFNULL(CNCCPNSHAREAMT, 0)) AS CPNSHAREAMT
					, ROUND(SUM( ((T.PRICE - T.SALEPROMOAMT - (T.GOODSCPNAMT + T.DELIVCPNAMT + T.BASKETCPNAMT) - (RESERVEAMT + EPOINTAMT + EMPRESERVEAMT) + DELIVAMT) -  (IFNULL(T.CNCPRICE, 0) - IFNULL(T.CNCSALEPROMOAMT, 0) - (IFNULL(T.CNCGOODSCPNAMT, 0) + IFNULL(T.CNCDELIVCPNAMT, 0) + IFNULL(T.CNCBASKETCPNAMT, 0)) - (IFNULL(CNCRESERVEAMT, 0) + IFNULL(CNCEPOINTAMT, 0) + IFNULL(CNCEMPRESERVEAMT, 0)) + IFNULL(CNCDELIVAMT, 0) ))), 0) AS REALAMT
					, IF(#{standard} = 'BUY' , 0, SUM(IFNULL(RTNAMT, 0))) AS RTNAMT
				FROM ( <include refid="statOrderClaimBasicDataNew"/>	)T
				GROUP BY TARGET
			)B ON A.TARGET = B.TARGET
		)T
		<choose>
			<when test="psort == 'target_asc'">
				ORDER BY TARGET ASC
			</when>
			<when test="psort == 'target_desc'">
				ORDER BY TARGET DESC
			</when>
			<when test="psort == 'ordercnt_asc'">
				ORDER BY CAST(ORDERCNT AS SIGNED) ASC
			</when>
			<when test="psort == 'ordercnt_desc'">
				ORDER BY CAST(ORDERCNT AS SIGNED) DESC
			</when>
			<when test="psort == 'frstordcnt_asc'">
				ORDER BY CAST(FRSTORDCNT AS SIGNED) ASC
			</when>
			<when test="psort == 'frstordcnt_desc'">
				ORDER BY CAST(FRSTORDCNT AS SIGNED) DESC
			</when>

			<when test="psort == 'ordamt_asc'">
				ORDER BY CAST(ORDAMT AS SIGNED) ASC
			</when>
			<when test="psort == 'ordamt_desc'">
				ORDER BY CAST(ORDAMT AS SIGNED) DESC
			</when>
			<when test="psort == 'delivamt_asc'">
				ORDER BY CAST(DELIVAMT AS SIGNED) ASC
			</when>
			<when test="psort == 'delivamt_desc'">
				ORDER BY CAST(DELIVAMT AS SIGNED) DESC
			</when>
			<when test="psort == 'promoshareamt_asc'">
				ORDER BY CAST(PROMOSHAREAMT AS SIGNED) ASC
			</when>
			<when test="psort == 'promoshareamt_desc'">
				ORDER BY CAST(PROMOSHAREAMT AS SIGNED) DESC
			</when>
			<when test="psort == 'cpnshareamt_asc'">
				ORDER BY CAST(CPNSHAREAMT AS SIGNED) ASC
			</when>
			<when test="psort == 'cpnshareamt_desc'">
				ORDER BY CAST(CPNSHAREAMT AS SIGNED) DESC
			</when>

			<when test="psort == 'realamt_asc'">
				ORDER BY CAST(REALAMT AS SIGNED) ASC
			</when>
			<when test="psort == 'realamt_desc'">
				ORDER BY CAST(REALAMT AS SIGNED) DESC
			</when>
			<when test="psort == 'price_asc'">
				ORDER BY CAST(PRICE AS SIGNED) ASC
			</when>
			<when test="psort == 'price_desc'">
				ORDER BY CAST(PRICE AS SIGNED) DESC
			</when>

			<when test="psort == 'rtnamt_asc'">
				ORDER BY CAST(RTNAMT AS SIGNED) ASC
			</when>
			<when test="psort == 'rtnamt_desc'">
				ORDER BY CAST(RTNAMT AS SIGNED) DESC
			</when>

			<otherwise>
				ORDER BY TARGET DESC
			</otherwise>
		</choose>
		<if test="startpage != null and !startpage.equals('') and endpage != null and !endpage.equals('')">
			LIMIT #{startpage}, #{endpage}
		</if>
	</select>

	<select id="selectPartnersSaleListCountInfo" parameterType="somap" resultType="somap">
	SELECT /* ComOrderMapper.xml selectPartnersSaleListCountInfo */
		 COUNT(*) AS TOTAL
		,FORMAT(IFNULL(SUM(ORDERCNT), 0), 0) AS ORDERCNT
		,FORMAT(IFNULL(SUM(FRSTORDCNT), 0), 0) AS FRSTORDCNT
		,FORMAT(IFNULL(SUM(ORDAMT), 0), 0) AS ORDAMT
		,FORMAT(IFNULL(SUM(DELIVAMT), 0), 0) AS DELIVAMT
		,FORMAT(IFNULL(SUM(PROMOSHAREAMT), 0), 0) AS PROMOSHAREAMT
		,FORMAT(IFNULL(SUM(CPNSHAREAMT), 0), 0) AS CPNSHAREAMT
		,FORMAT(IFNULL(SUM(REALAMT), 0), 0) AS REALAMT
		,FORMAT(IFNULL(SUM(ORDAMT), 0) + IFNULL(SUM(DELIVAMT), 0) - IFNULL(SUM(PROMOSHAREAMT), 0) - IFNULL(SUM(CPNSHAREAMT), 0), 0) AS PRICE
		,FORMAT(IFNULL(SUM(RTNAMT), 0), 0) AS RTNAMT
	FROM(
		WITH RECURSIVE DATES AS (
			SELECT STR_TO_DATE(#{startdate}, '%Y-%m-%d') AS DT
			UNION
			SELECT DATE_ADD(DATES.DT, INTERVAL 1 DAY) FROM DATES WHERE DATE_ADD(DATES.DT, INTERVAL 1 DAY) <![CDATA[<=]]> STR_TO_DATE(#{enddate}, '%Y-%m-%d')
		)
		SELECT DATE_FORMAT(DATES.DT, '%Y%m%d') AS TARGET
		FROM DATES
	)A LEFT OUTER JOIN
	(
		SELECT
			DATE_FORMAT(COMPLETEDATE, '%Y%m%d') AS TARGET
			, COUNT(DISTINCT DELORDERIDX) AS ORDERCNT
			, SUM(T.FRSTORDCNT - IFNULL(T.CLMCNT, 0)) AS FRSTORDCNT
			, SUM(PRICE - IFNULL(CNCPRICE, 0)) AS ORDAMT /* 주문금액 */
			, SUM(DELIVAMT - IFNULL(CNCDELIVAMT, 0)) AS DELIVAMT
			, SUM(T.PROMOSHAREAMT - IFNULL(CNCPROMOSHAREAMT, 0)) AS PROMOSHAREAMT
			, SUM(T.CPNSHAREAMT - IFNULL(CNCCPNSHAREAMT, 0)) AS CPNSHAREAMT
			, ROUND(SUM( ((T.PRICE - T.SALEPROMOAMT - (T.GOODSCPNAMT + T.DELIVCPNAMT + T.BASKETCPNAMT) - (RESERVEAMT + EPOINTAMT + EMPRESERVEAMT) + DELIVAMT) -  (IFNULL(T.CNCPRICE, 0) - IFNULL(T.CNCSALEPROMOAMT, 0) - (IFNULL(T.CNCGOODSCPNAMT, 0) + IFNULL(T.CNCDELIVCPNAMT, 0) + IFNULL(T.CNCBASKETCPNAMT, 0)) - (IFNULL(CNCRESERVEAMT, 0) + IFNULL(CNCEPOINTAMT, 0) + IFNULL(CNCEMPRESERVEAMT, 0)) + IFNULL(CNCDELIVAMT, 0) ))), 0) AS REALAMT
			, IF(#{standard} = 'BUY' , 0, SUM(IFNULL(RTNAMT, 0))) AS RTNAMT
		FROM ( <include refid="statOrderClaimBasicDataNew"/>	)T
		GROUP BY TARGET
	)B ON A.TARGET = B.TARGET
	</select>

	<sql id="statOrderClaimBasicDataNew">
		SELECT /* ComOrderMapper.xml statOrderClaimBasicDataNew */
			B.ORDERIDX, B.ORDGDIDX
			 , IF(0 <![CDATA[<]]> (B.FRSTORDCNT - IFNULL(CLMCNT, 0)), B.ORDERIDX, NULL) AS DELORDERIDX
			 ,FRSTORDCNT
			 ,D.CLMCNT
			 ,(B.PRICE * FRSTORDCNT) AS PRICE
			 ,D.PRICE AS CNCPRICE
			 ,B.SALEPROMOAMT
			 ,D.SALEPROMOAMT AS CNCSALEPROMOAMT
			 ,B.GOODSCPNAMT
			 ,D.GOODSCPNAMT AS CNCGOODSCPNAMT
			 ,B.DELIVCPNAMT
			 ,D.DELIVCPNAMT AS CNCDELIVCPNAMT
			 ,B.RESERVEAMT
			 ,D.RESERVEAMT AS CNCRESERVEAMT
			 ,B.EPOINTAMT
			 ,D.EPOINTAMT AS CNCEPOINTAMT
			 ,B.EMPRESERVEAMT
			 ,D.EMPRESERVEAMT AS CNCEMPRESERVEAMT
			 ,B.DELIVAMT
			 ,D.DELIVAMT AS CNCDELIVAMT
			 ,IF(C.ISPBGOODS = 'T', ((CAST(B.PRICE AS SIGNED) - C.ORIGINALPRICE) * B.FRSTORDCNT ), (B.PRICE * (B.COMMRATE/100)) * B.FRSTORDCNT) AS MARGIN
			 ,D.MARGIN AS CNCMARGIN
			 ,A.BASKETCPNAMT * ((B.PRICE * B.FRSTORDCNT) / (SELECT SUM(PRICE * FRSTORDCNT) FROM T_COMORDER_GOODS WHERE ISTRASH = 'F' AND ORDERIDX = A.ORDERIDX)) AS BASKETCPNAMT
			 ,D.BASKETCPNAMT AS CNCBASKETCPNAMT
			 ,ROUND(IF(B.SALEPROMOAMT = 0, 0, B.SALEPROMOAMT * (IF(IFNULL((SELECT PARTRATIO FROM T_PROMOTION WHERE PROMOIDX = B.SALEPROMOIDX), 0) = 0, 0, IFNULL((SELECT PARTRATIO FROM T_PROMOTION WHERE PROMOIDX = B.SALEPROMOIDX), 0) /100))) , 0) AS PROMOSHAREAMT
			 ,D.PROMOSHAREAMT AS CNCPROMOSHAREAMT
			 ,ROUND(IF(B.GOODSCPNAMT = 0, 0, B.GOODSCPNAMT * (IF(IFNULL((SELECT PARTRATIO FROM T_COMCOUPON WHERE COMCPNIDX = B.GOODSCPNIDX), 0) = 0, 0, IFNULL((SELECT PARTRATIO FROM T_COMCOUPON WHERE COMCPNIDX = B.GOODSCPNIDX), 0) /100))), 0) AS CPNSHAREAMT
			 ,D.CPNSHAREAMT AS CNCCPNSHAREAMT
		     ,IF(#{standard} = 'BUY', FN_GET_ORDER_COMPLETE_DATE(B.ORDGDIDX), PAYMENTDATE) AS COMPLETEDATE
			 ,DADAMEMBERTYPE
			 ,MEMLVTYPE
			 ,ORDPATHTYPE
			 ,PAYWAYTYPE
			 ,ISNONMEMBER
			 ,C.CATEIDX
			 ,B.DEALERNO
			 ,C.GOODSNO
			 ,C.GOODSCODE
			 ,C.GOODSNAME
			 ,C.BRANDIDX
			 ,C.OPTIONCODE
			 ,E.RTNAMT
		FROM T_COMORDER A INNER JOIN T_COMORDER_GOODS B ON A.ORDERIDX = B.ORDERIDX AND A.ISTRASH = 'F' AND B.ISTRASH = 'F' INNER JOIN (
			SELECT
				B.GOODSNO, A.GOODSCODE, B.OPTIONCODE, A.GOODSNAME, BRANDIDX, B.ORIGINALPRICE, ISPBGOODS
				 , FN_GET_OPTION_CONCAT(B.GOODSNO, B.OPTIONCODE, ', ') AS OPTIONNAME
				 , (SELECT CATEIDX FROM T_GOODS_CATEGORY WHERE GOODSNO = A.GOODSNO AND ISREPRE = 'T') AS CATEIDX
			FROM T_GOODS A INNER JOIN T_GOODS_OPTION_DETAIL B ON A.GOODSNO = B.GOODSNO
		)C ON B.GOODSNO = C.GOODSNO AND B.OPTIONCODE = C.OPTIONCODE LEFT OUTER JOIN (
			SELECT
				ORDERIDX, ORDGDIDX
				 , SUM(CLMCNT) AS CLMCNT
				 , SUM(PRICE * CLMCNT) AS PRICE
				 , SUM(SALEPROMOAMT) AS SALEPROMOAMT
				 , SUM(GOODSCPNAMT) AS GOODSCPNAMT
				 , SUM(DELIVCPNAMT) AS DELIVCPNAMT
				 , SUM(RESERVEAMT) AS RESERVEAMT
				 , SUM(EPOINTAMT) AS EPOINTAMT
				 , SUM(EMPRESERVEAMT) AS EMPRESERVEAMT
				 , SUM(DELIVAMT) AS DELIVAMT
				 , SUM(MARGIN) AS MARGIN
				 , SUM(BASKETCPNAMT) AS BASKETCPNAMT
				 , SUM(ROUND(IF(SALEPROMOAMT = 0, 0, SALEPROMOAMT * (IF(PARTRATIO_PROMO = 0, 0, PARTRATIO_PROMO /100))) , 0)) AS PROMOSHAREAMT
				 , SUM(ROUND(IF(GOODSCPNAMT = 0, 0, GOODSCPNAMT * (IF(PARTRATIO_GOODS = 0, 0, PARTRATIO_GOODS /100))) , 0)) AS CPNSHAREAMT
			FROM (
					 SELECT
						 A.ORDERIDX, B.ORDGDIDX
						  ,CLMCNT
						  ,PRICE
						  ,SALEPROMOAMT
						  ,GOODSCPNAMT
						  ,DELIVCPNAMT
						  ,RESERVEAMT
						  ,EPOINTAMT
						  ,EMPRESERVEAMT
						  ,DELIVAMT
						  ,IF(C.ISPBGOODS = 'T', ((CAST(B.PRICE AS signed) - C.ORIGINALPRICE) * B.CLMCNT ), (B.PRICE * (B.COMMRATE/100)) * B.CLMCNT) AS MARGIN
						  , A.BASKETCPNAMT * ((B.PRICE * B.CLMCNT) / (SELECT SUM(PRICE * CLMCNT) FROM T_CLAIM_GOODS WHERE ISTRASH = 'F' AND B.ISCLMOPTION = 'T' AND CLMIDX = A.CLMIDX)) AS BASKETCPNAMT
						  , IFNULL((SELECT PARTRATIO FROM T_PROMOTION WHERE PROMOIDX = B.SALEPROMOIDX), 0) AS PARTRATIO_PROMO
						  , IFNULL((SELECT PARTRATIO FROM T_COMCOUPON WHERE COMCPNIDX = B.GOODSCPNIDX), 0) AS PARTRATIO_GOODS
					 FROM T_CLAIM A INNER JOIN T_CLAIM_GOODS B ON A.CLMIDX = B.CLMIDX AND A.ISTRASH = 'F' AND B.ISTRASH = 'F' AND B.ISCLMOPTION = 'T' INNER JOIN (
						 SELECT
							 B.GOODSNO, A.GOODSCODE, B.OPTIONCODE, A.GOODSNAME, BRANDIDX, B.ORIGINALPRICE, ISPBGOODS
							  , FN_GET_OPTION_CONCAT(B.GOODSNO, B.OPTIONCODE, ', ') AS OPTIONNAME
							  , (SELECT CATEIDX FROM T_GOODS_CATEGORY WHERE GOODSNO = A.GOODSNO AND ISREPRE = 'T') AS CATEIDX
						 FROM T_GOODS A INNER JOIN T_GOODS_OPTION_DETAIL B ON A.GOODSNO = B.GOODSNO
					 )C ON B.GOODSNO = C.GOODSNO AND B.OPTIONCODE = C.OPTIONCODE
					<if test="standard == 'BUY'">
						WHERE ( (A.CNCSTATUS = 'CNS005' AND B.CNCSTATUS = 'CNS005') OR RTNSTATUS = 'RTS010')
					</if>
					<if test="standard == 'PAY'">
						WHERE CLMTYPE = 'CLM001'
						AND A.CNCSTATUS = 'CNS005'
						AND B.CNCSTATUS = 'CNS005'
					</if>
			    )T
			GROUP BY ORDERIDX, ORDGDIDX
		)D ON B.ORDERIDX = D.ORDERIDX AND B.ORDGDIDX = D.ORDGDIDX LEFT OUTER JOIN (
			SELECT
				ORDERIDX, ORDGDIDX
				 , SUM(RTNAMT) AS RTNAMT
			FROM (
					 SELECT
						 A.ORDERIDX, B.ORDGDIDX
						  , A.RTNAMT
					 FROM T_CLAIM A INNER JOIN T_CLAIM_GOODS B ON A.CLMIDX = B.CLMIDX AND A.ISTRASH = 'F' AND B.ISTRASH = 'F' AND B.ISCLMOPTION = 'T' INNER JOIN (
						 SELECT
							 B.GOODSNO, A.GOODSCODE, B.OPTIONCODE, A.GOODSNAME, BRANDIDX, B.ORIGINALPRICE, ISPBGOODS
							  , FN_GET_OPTION_CONCAT(B.GOODSNO, B.OPTIONCODE, ', ') AS OPTIONNAME
							  , (SELECT CATEIDX FROM T_GOODS_CATEGORY WHERE GOODSNO = A.GOODSNO AND ISREPRE = 'T') AS CATEIDX
						 FROM T_GOODS A INNER JOIN T_GOODS_OPTION_DETAIL B ON A.GOODSNO = B.GOODSNO
					 )C ON B.GOODSNO = C.GOODSNO AND B.OPTIONCODE = C.OPTIONCODE
					WHERE (RTNSTATUS = 'RTS010' OR EXCSTATUS = 'EXS012')
			    )T
			GROUP BY ORDERIDX, ORDGDIDX
		)E ON B.ORDERIDX = E.ORDERIDX AND B.ORDGDIDX = E.ORDGDIDX
		WHERE A.ISTRASH = 'F'
		<if test="userno !=null and userno != ''">
			AND DEALERNO = #{userno}
		</if>
		<choose>
		  	<when test="isyear != null and isyear != ''">
				<if test="standard == 'BUY'">
					AND FN_GET_ORDER_STATUS(B.ORDGDIDX) = 'ODS009'
					AND FN_GET_ORDER_COMPLETE_DATE(B.ORDGDIDX) BETWEEN DATE_FORMAT(STR_TO_DATE(CONCAT(#{year}, '0101'), '%Y%m%d'), '%Y%m%d000000') AND DATE_FORMAT(LAST_DAY(STR_TO_DATE(CONCAT(#{year}, '1231'), '%Y%m%d')), '%Y%m%d235959')
				</if>
				<if test="standard == 'PAY'">
					AND FN_GET_ORDER_STATUS(B.ORDGDIDX) NOT IN ('ODS001', 'ODS002')
					AND PAYMENTDATE BETWEEN DATE_FORMAT(STR_TO_DATE(CONCAT(#{year}, '0101'), '%Y%m%d'), '%Y%m%d000000') AND DATE_FORMAT(LAST_DAY(STR_TO_DATE(CONCAT(#{year}, '1231'), '%Y%m%d')), '%Y%m%d235959')
				</if>
			</when>
			<when test="istwoweek != null and istwoweek != ''">
				AND FN_GET_ORDER_STATUS(B.ORDGDIDX) = 'ODS009'
				AND FN_GET_ORDER_COMPLETE_DATE(B.ORDGDIDX) BETWEEN DATE_FORMAT(DATE_ADD(CURRENT_TIMESTAMP, INTERVAL -13 DAY), '%Y%m%d000000') AND DATE_FORMAT(CURRENT_TIMESTAMP, '%Y%m%d235959')
			</when>
			<when test="saletype != null and saletype != ''">
		  		<if test="standard == 'BUY'">
					AND FN_GET_ORDER_STATUS(B.ORDGDIDX) = 'ODS009'
					<choose>
						<when test="saletype == 'MONTH'">
							AND FN_GET_ORDER_COMPLETE_DATE(B.ORDGDIDX) BETWEEN DATE_FORMAT(CURRENT_TIMESTAMP, '%Y%m01000000') AND DATE_FORMAT(LAST_DAY(CURRENT_TIMESTAMP), '%Y%m%d235959')
						</when>
						<when test="saletype == 'WEEK'">
							<choose>
								<when test="next != null and next != ''">
									AND (YEARWEEK(CURRENT_TIMESTAMP)) -1 = YEARWEEK(FN_GET_ORDER_COMPLETE_DATE(B.ORDGDIDX))
								</when>
								<otherwise>
									AND YEARWEEK(CURRENT_TIMESTAMP) = YEARWEEK(FN_GET_ORDER_COMPLETE_DATE(B.ORDGDIDX))
								</otherwise>
							</choose>
						</when>
						<when test="saletype == 'DAY'">
							<choose>
								<when test="next != null and next != ''">
									AND FN_GET_ORDER_COMPLETE_DATE(B.ORDGDIDX) BETWEEN DATE_FORMAT(DATE_ADD(CURRENT_TIMESTAMP, INTERVAL -1 DAY), '%Y%m%d000000') AND DATE_FORMAT(DATE_ADD(CURRENT_TIMESTAMP, INTERVAL -1 DAY), '%Y%m%d235959')
								</when>
								<otherwise>
									AND FN_GET_ORDER_COMPLETE_DATE(B.ORDGDIDX) BETWEEN DATE_FORMAT(CURRENT_TIMESTAMP, '%Y%m%d000000') AND DATE_FORMAT(CURRENT_TIMESTAMP, '%Y%m%d235959')
								</otherwise>
							</choose>
						</when>
						<when test="saletype == 'CALC'">
							AND FN_GET_ORDER_COMPLETE_DATE(B.ORDGDIDX) BETWEEN DATE_FORMAT(DATE_ADD(CURRENT_TIMESTAMP, INTERVAL #{addday} DAY), '%Y%m%d000000') AND DATE_FORMAT(CURRENT_TIMESTAMP, '%Y%m%d235959')
						</when>
					</choose>
				</if>
				<if test="standard == 'PAY'">
					AND FN_GET_ORDER_STATUS(B.ORDGDIDX) NOT IN ('ODS001', 'ODS002')
					<choose>
						<when test="saletype == 'MONTH'">
							AND PAYMENTDATE BETWEEN DATE_FORMAT(CURRENT_TIMESTAMP, '%Y%m01000000') AND DATE_FORMAT(LAST_DAY(CURRENT_TIMESTAMP), '%Y%m%d235959')
						</when>
						<when test="saletype == 'WEEK'">
							<choose>
								<when test="next != null and next != ''">
									AND (YEARWEEK(CURRENT_TIMESTAMP)) -1 = YEARWEEK(PAYMENTDATE)
								</when>
								<otherwise>
									AND YEARWEEK(CURRENT_TIMESTAMP) = YEARWEEK(PAYMENTDATE)
								</otherwise>
							</choose>
						</when>
						<when test="saletype == 'DAY'">
							<choose>
								<when test="next != null and next != ''">
									AND PAYMENTDATE BETWEEN DATE_FORMAT(DATE_ADD(CURRENT_TIMESTAMP, INTERVAL -1 DAY), '%Y%m%d000000') AND DATE_FORMAT(DATE_ADD(CURRENT_TIMESTAMP, INTERVAL -1 DAY), '%Y%m%d235959')
								</when>
								<otherwise>
									AND PAYMENTDATE BETWEEN DATE_FORMAT(CURRENT_TIMESTAMP, '%Y%m%d000000') AND DATE_FORMAT(CURRENT_TIMESTAMP, '%Y%m%d235959')
								</otherwise>
							</choose>
						</when>
						<when test="saletype == 'CALC'">
							AND PAYMENTDATE BETWEEN DATE_FORMAT(DATE_ADD(CURRENT_TIMESTAMP, INTERVAL #{addday} DAY), '%Y%m%d000000') AND DATE_FORMAT(CURRENT_TIMESTAMP, '%Y%m%d235959')
						</when>
					</choose>
				</if>
			</when>
		  	<otherwise>
				<if test="standard == 'BUY'">
					AND FN_GET_ORDER_STATUS(B.ORDGDIDX) = 'ODS009'
					AND FN_GET_ORDER_COMPLETE_DATE(B.ORDGDIDX) BETWEEN DATE_FORMAT(STR_TO_DATE(#{startdate}, '%Y-%m-%d'), '%Y%m%d000000') AND DATE_FORMAT(STR_TO_DATE(#{enddate}, '%Y-%m-%d'), '%Y%m%d235959')
				</if>
				<if test="standard == 'PAY'">
					AND FN_GET_ORDER_STATUS(B.ORDGDIDX) NOT IN ('ODS001', 'ODS002')
					AND PAYMENTDATE BETWEEN DATE_FORMAT(STR_TO_DATE(#{startdate}, '%Y-%m-%d'), '%Y%m%d000000') AND DATE_FORMAT(STR_TO_DATE(#{enddate}, '%Y-%m-%d'), '%Y%m%d235959')
				</if>
			</otherwise>
		</choose>
	</sql>

	<select id="selectUserOrderIngCnt" parameterType="somap" resultType="int">
		/*ComorderMapper.xml - selectUserOrderIngCnt :: 진행중인 주문,클레임 수 리턴*/
		SELECT FN_GET_ORDER_CLAIM_PROCEEDING_COUNT(userno) AS PROCNT
		FROM T_MEMBER
		WHERE USERNO = #{userno}
	</select>
</mapper>
